<?php

namespace ContainerRXVGlzE;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getApiPlatform_ArgumentResolver_PayloadService extends App_KernelTestDebugContainer
{
    /**
     * Gets the private 'api_platform.argument_resolver.payload' shared service.
     *
     * @return \ApiPlatform\Symfony\Bundle\ArgumentResolver\PayloadArgumentResolver
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/symfony/Bundle/ArgumentResolver/CompatibleValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/state/Util/OperationRequestInitiatorTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/api-platform/symfony/Bundle/ArgumentResolver/PayloadArgumentResolver.php';

        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.argument_resolver.payload'])) {
            return $container->privates['api_platform.argument_resolver.payload'];
        }
        $b = ($container->privates['api_platform.openapi.serializer_context_builder'] ?? $container->load('getApiPlatform_Openapi_SerializerContextBuilderService'));

        if (isset($container->privates['api_platform.argument_resolver.payload'])) {
            return $container->privates['api_platform.argument_resolver.payload'];
        }

        return $container->privates['api_platform.argument_resolver.payload'] = new \ApiPlatform\Symfony\Bundle\ArgumentResolver\PayloadArgumentResolver($a, $b);
    }
}
