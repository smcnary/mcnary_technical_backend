<?php

namespace ContainerJ65J2Sc;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class App_KernelTestContainer extends Container
{
    private const NONEMPTY_PARAMETERS = [
        'kernel.secret' => 'A non-empty value for the parameter "kernel.secret" is required. Did you forget to configure the "APP_SECRET" env var?',
    ];

    protected $targetDir;
    protected $parameters = [];
    protected \Closure $getService;

    public function __construct(private array $buildParameters = [], protected string $containerDir = __DIR__)
    {
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            'cache.security_is_csrf_token_valid_attribute_expression_language' => 'getCache_SecurityIsCsrfTokenValidAttributeExpressionLanguageService',
            'cache.security_is_granted_attribute_expression_language' => 'getCache_SecurityIsGrantedAttributeExpressionLanguageService',
            'doctrine' => 'getDoctrineService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'event_dispatcher' => 'getEventDispatcherService',
            'http_kernel' => 'getHttpKernelService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
        ];
        $this->fileMap = [
            'App\\Controller\\Api\\V1\\AgencyController' => 'getAgencyControllerService',
            'App\\Controller\\Api\\V1\\AuditFindingsController' => 'getAuditFindingsControllerService',
            'App\\Controller\\Api\\V1\\AuditsController' => 'getAuditsControllerService',
            'App\\Controller\\Api\\V1\\AuthController' => 'getAuthControllerService',
            'App\\Controller\\Api\\V1\\BacklinksController' => 'getBacklinksControllerService',
            'App\\Controller\\Api\\V1\\CampaignsController' => 'getCampaignsControllerService',
            'App\\Controller\\Api\\V1\\CitationsController' => 'getCitationsControllerService',
            'App\\Controller\\Api\\V1\\ClientController' => 'getClientControllerService',
            'App\\Controller\\Api\\V1\\ContentBriefsController' => 'getContentBriefsControllerService',
            'App\\Controller\\Api\\V1\\ContentItemsController' => 'getContentItemsControllerService',
            'App\\Controller\\Api\\V1\\FaqsController' => 'getFaqsControllerService',
            'App\\Controller\\Api\\V1\\InvoicesController' => 'getInvoicesControllerService',
            'App\\Controller\\Api\\V1\\KeywordsController' => 'getKeywordsControllerService',
            'App\\Controller\\Api\\V1\\LeadsController' => 'getLeadsControllerService',
            'App\\Controller\\Api\\V1\\MediaAssetsController' => 'getMediaAssetsControllerService',
            'App\\Controller\\Api\\V1\\PackagesController' => 'getPackagesControllerService',
            'App\\Controller\\Api\\V1\\PagesController' => 'getPagesControllerService',
            'App\\Controller\\Api\\V1\\RankingsController' => 'getRankingsControllerService',
            'App\\Controller\\Api\\V1\\RecommendationsController' => 'getRecommendationsControllerService',
            'App\\Controller\\Api\\V1\\ReviewsController' => 'getReviewsControllerService',
            'App\\Controller\\Api\\V1\\SubscriptionsController' => 'getSubscriptionsControllerService',
            'App\\Controller\\Api\\V1\\UploadsController' => 'getUploadsControllerService',
            'App\\Controller\\Api\\V1\\UserController' => 'getUserControllerService',
            'App\\Controller\\Api\\V1\\UserProfileController' => 'getUserProfileControllerService',
            'App\\Controller\\Api\\V1\\WebhooksController' => 'getWebhooksControllerService',
            'App\\Controller\\AuthController' => 'getAuthController2Service',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'api_platform.action.documentation' => 'getApiPlatform_Action_DocumentationService',
            'api_platform.action.entrypoint' => 'getApiPlatform_Action_EntrypointService',
            'api_platform.action.not_exposed' => 'getApiPlatform_Action_NotExposedService',
            'api_platform.action.not_found' => 'getApiPlatform_Action_NotFoundService',
            'api_platform.jsonld.action.context' => 'getApiPlatform_Jsonld_Action_ContextService',
            'api_platform.state_provider.parameter_validator' => 'getApiPlatform_StateProvider_ParameterValidatorService',
            'api_platform.symfony.main_controller' => 'getApiPlatform_Symfony_MainControllerService',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'cache_warmer' => 'getCacheWarmerService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'container.get_routing_condition_service' => 'getContainer_GetRoutingConditionServiceService',
            'debug.error_handler_configurator' => 'getDebug_ErrorHandlerConfiguratorService',
            'error_controller' => 'getErrorControllerService',
            'lexik_jwt_authentication.encoder' => 'getLexikJwtAuthentication_EncoderService',
            'lexik_jwt_authentication.generate_token_command' => 'getLexikJwtAuthentication_GenerateTokenCommandService',
            'lexik_jwt_authentication.jwt_manager' => 'getLexikJwtAuthentication_JwtManagerService',
            'lexik_jwt_authentication.key_loader' => 'getLexikJwtAuthentication_KeyLoaderService',
            'monolog.logger.deprecation' => 'getMonolog_Logger_DeprecationService',
            'routing.loader' => 'getRouting_LoaderService',
            'services_resetter' => 'getServicesResetterService',
            'test.private_services_locator' => 'getTest_PrivateServicesLocatorService',
            'test.service_container' => 'getTest_ServiceContainerService',
        ];
        $this->aliases = [
            'ApiPlatform\\Symfony\\Action\\NotExposedAction' => 'api_platform.action.not_exposed',
            'ApiPlatform\\Symfony\\Action\\NotFoundAction' => 'api_platform.action.not_found',
            'App\\Kernel' => 'kernel',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
        ];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function load($file, $lazyLoad = true): mixed
    {
        if (class_exists($class = __NAMESPACE__.'\\'.$file, false)) {
            return $class::do($this, $lazyLoad);
        }

        if ('.' === $file[-4]) {
            $class = substr($class, 0, -4);
        } else {
            $file .= '.php';
        }

        $service = require $this->containerDir.\DIRECTORY_SEPARATOR.$file;

        return class_exists($class, false) ? $class::do($this, $lazyLoad) : $service;
    }

    protected function createProxy($class, \Closure $factory)
    {
        class_exists($class, false) || require __DIR__.'/'.$class.'.php';

        return $factory();
    }

    /*
     * Gets the public 'cache.security_is_csrf_token_valid_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SecurityIsCsrfTokenValidAttributeExpressionLanguageService($container)
    {
        return $container->services['cache.security_is_csrf_token_valid_attribute_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('bZhbRXdW0I', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the public 'cache.security_is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SecurityIsGrantedAttributeExpressionLanguageService($container)
    {
        return $container->services['cache.security_is_granted_attribute_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('RwGkbKsb5v', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected static function getDoctrineService($container)
    {
        return $container->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($container, $container->parameters['doctrine.connections'], $container->parameters['doctrine.entity_managers'], 'default', 'default');
    }

    /*
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected static function getDoctrine_Dbal_DefaultConnectionService($container)
    {
        $container->services['doctrine.dbal.default_connection'] = $instance = ($container->privates['doctrine.dbal.connection_factory'] ?? self::getDoctrine_Dbal_ConnectionFactoryService($container))->createConnection(['url' => $container->getEnv('resolve:DATABASE_URL'), 'use_savepoints' => true, 'dbname_suffix' => '_test'.$container->getEnv('string:default::TEST_TOKEN'), 'driver' => 'pdo_mysql', 'idle_connection_ttl' => 600, 'host' => 'localhost', 'port' => NULL, 'user' => 'root', 'password' => NULL, 'driverOptions' => [1002 => 'SET timezone=\'UTC\''], 'serverVersion' => '16', 'defaultTableOptions' => []], ($container->privates['doctrine.dbal.default_connection.configuration'] ?? self::getDoctrine_Dbal_DefaultConnection_ConfigurationService($container)), ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container)), ['citext' => 'string', 'text' => 'text']);

        $instance->setNestTransactionsWithSavepoints(true);

        return $instance;
    }

    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected static function getDoctrine_Orm_DefaultEntityManagerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = new \ReflectionClass('Doctrine\ORM\EntityManager')->newLazyGhost(static function ($proxy) use ($container) { self::getDoctrine_Orm_DefaultEntityManagerService($container, $proxy); });
        }

        $instance = ($lazyLoad->__construct(($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container)), ($container->privates['doctrine.orm.default_configuration'] ?? self::getDoctrine_Orm_DefaultConfigurationService($container)), ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? self::getDoctrine_Dbal_DefaultConnection_EventManagerService($container))) && false ?: $lazyLoad);

        ($container->privates['doctrine.orm.default_manager_configurator'] ??= new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }

    /*
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    protected static function getEventDispatcherService($container)
    {
        $container->services['event_dispatcher'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.user_provider', class: 'Symfony\\Component\\Security\\Http\\EventListener\\UserProviderListener')] fn () => ($container->privates['security.listener.user_provider'] ?? $container->load('getSecurity_Listener_UserProviderService')), 'checkPassport'], 1024);
        $instance->addListener('console.command', [#[\Closure(name: 'doctrine_migrations.schema_filter_listener', class: 'Doctrine\\Bundle\\MigrationsBundle\\EventListener\\SchemaFilterListener')] fn () => ($container->privates['doctrine_migrations.schema_filter_listener'] ??= new \Doctrine\Bundle\MigrationsBundle\EventListener\SchemaFilterListener('doctrine_migration_versions')), 'onConsoleCommand'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'nelmio_cors.cors_listener', class: 'Nelmio\\CorsBundle\\EventListener\\CorsListener')] fn () => ($container->privates['nelmio_cors.cors_listener'] ?? self::getNelmioCors_CorsListenerService($container)), 'onKernelRequest'], 250);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_cors.cors_listener', class: 'Nelmio\\CorsBundle\\EventListener\\CorsListener')] fn () => ($container->privates['nelmio_cors.cors_listener'] ?? self::getNelmioCors_CorsListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'nelmio_cors.cacheable_response_vary_listener', class: 'Nelmio\\CorsBundle\\EventListener\\CacheableResponseVaryListener')] fn () => ($container->privates['nelmio_cors.cacheable_response_vary_listener'] ??= new \Nelmio\CorsBundle\EventListener\CacheableResponseVaryListener()), 'onResponse'], -10);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'api_platform.listener.exception', class: 'ApiPlatform\\Symfony\\EventListener\\ExceptionListener')] fn () => ($container->privates['api_platform.listener.exception'] ?? $container->load('getApiPlatform_Listener_ExceptionService')), 'onKernelException'], -96);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'argument_resolver.request_payload', class: 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver')] fn () => ($container->privates['argument_resolver.request_payload'] ?? self::getArgumentResolver_RequestPayloadService($container)), 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener')] fn () => ($container->privates['response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'validate_request_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener')] fn () => ($container->privates['validate_request_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()), 'onKernelRequest'], 256);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onKernelException'], -128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'removeCspHeader'], -128);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelControllerArguments'], 10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelResponse'], -10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? $container->load('getConsole_ErrorListenerService')), 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [#[\Closure(name: 'console.suggest_missing_package_subscriber', class: 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SuggestMissingPackageSubscriber')] fn () => ($container->privates['console.suggest_missing_package_subscriber'] ??= new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()), 'onConsoleError'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'test.session.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['test.session.listener'] ?? self::getTest_Session_ListenerService($container)), 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'test.session.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['test.session.listener'] ?? self::getTest_Session_ListenerService($container)), 'onKernelResponse'], -1000);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('console.command', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'))), 'configure'], 2048);
        $instance->addListener('kernel.request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelException'], -64);
        $instance->addListener('kernel.response', [#[\Closure(name: 'web_link.add_link_header_listener', class: 'Symfony\\Component\\WebLink\\EventListener\\AddLinkHeaderListener')] fn () => ($container->privates['web_link.add_link_header_listener'] ?? self::getWebLink_AddLinkHeaderListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.view', [#[\Closure(name: 'controller.template_attribute_listener', class: 'Symfony\\Bridge\\Twig\\EventListener\\TemplateAttributeListener')] fn () => ($container->privates['controller.template_attribute_listener'] ?? $container->load('getController_TemplateAttributeListenerService')), 'onKernelView'], -128);
        $instance->addListener('kernel.request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'configureLogoutUrlGenerator'], 8);
        $instance->addListener('kernel.request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'onKernelRequest'], 8);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'security.firewall', class: 'Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener')] fn () => ($container->privates['security.firewall'] ?? self::getSecurity_FirewallService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.is_granted_attribute_listener', class: 'Symfony\\Component\\Security\\Http\\EventListener\\IsGrantedAttributeListener')] fn () => ($container->privates['controller.is_granted_attribute_listener'] ?? self::getController_IsGrantedAttributeListenerService($container)), 'onKernelControllerArguments'], 20);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.check_authenticator_credentials', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CheckCredentialsListener')] fn () => ($container->privates['security.listener.check_authenticator_credentials'] ?? $container->load('getSecurity_Listener_CheckAuthenticatorCredentialsService')), 'checkPassport'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent', [#[\Closure(name: 'security.listener.password_migrating', class: 'Symfony\\Component\\Security\\Http\\EventListener\\PasswordMigratingListener')] fn () => ($container->privates['security.listener.password_migrating'] ?? $container->load('getSecurity_Listener_PasswordMigratingService')), 'onLoginSuccess'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'doctrine.dbal.idle_connection_listener', class: 'Symfony\\Bridge\\Doctrine\\Middleware\\IdleConnection\\Listener')] fn () => ($container->privates['doctrine.dbal.idle_connection_listener'] ?? self::getDoctrine_Dbal_IdleConnectionListenerService($container)), 'onKernelRequest'], 192);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent', [#[\Closure(name: 'security.listener.csrf_protection', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfProtectionListener')] fn () => ($container->privates['security.listener.csrf_protection'] ?? $container->load('getSecurity_Listener_CsrfProtectionService')), 'checkPassport'], 512);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.is_csrf_token_valid_attribute_listener', class: 'Symfony\\Component\\Security\\Http\\EventListener\\IsCsrfTokenValidAttributeListener')] fn () => ($container->privates['controller.is_csrf_token_valid_attribute_listener'] ?? self::getController_IsCsrfTokenValidAttributeListenerService($container)), 'onKernelControllerArguments'], 25);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [#[\Closure(name: 'security.logout.listener.csrf_token_clearing', class: 'Symfony\\Component\\Security\\Http\\EventListener\\CsrfTokenClearingLogoutListener')] fn () => ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService')), 'onLogout'], 0);

        return $instance;
    }

    /*
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected static function getHttpKernelService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }
        $b = ($container->privates['argument_resolver'] ?? self::getArgumentResolverService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }

        return $container->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, ($container->privates['controller_resolver'] ?? self::getControllerResolverService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $b, true);
    }

    /*
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected static function getRequestStackService($container)
    {
        return $container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /*
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected static function getRouterService($container)
    {
        $container->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', true],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $container), 'kernel::loadRoutes', ['cache_dir' => $container->targetDir.'', 'debug' => false, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => true, 'resource_type' => 'service'], ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), ($container->privates['monolog.logger.router'] ?? self::getMonolog_Logger_RouterService($container)), 'en');

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ??= new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory()));
        $instance->addExpressionLanguageProvider(($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /*
     * Gets the private '.doctrine.orm.default_metadata_driver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver
     */
    protected static function get_Doctrine_Orm_DefaultMetadataDriverService($container)
    {
        $a = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();
        $a->addDriver(($container->privates['doctrine.orm.default_attribute_metadata_driver'] ??= new \Doctrine\ORM\Mapping\Driver\AttributeDriver([(\dirname(__DIR__, 4).'/src/Entity')], true)), 'App\\Entity');

        return $container->privates['.doctrine.orm.default_metadata_driver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($a, ($container->privates['.service_locator.BxSdgVt'] ?? self::get_ServiceLocator_BxSdgVtService($container)));
    }

    /*
     * Gets the private '.service_locator.BxSdgVt' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_BxSdgVtService($container)
    {
        return $container->privates['.service_locator.BxSdgVt'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ]);
    }

    /*
     * Gets the private '.service_locator.shxE9gp' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_ShxE9gpService($container)
    {
        return $container->privates['.service_locator.shxE9gp'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'security.firewall.map.context.dev' => ['privates', 'security.firewall.map.context.dev', 'getSecurity_Firewall_Map_Context_DevService', true],
            'security.firewall.map.context.login' => ['privates', 'security.firewall.map.context.login', 'getSecurity_Firewall_Map_Context_LoginService', true],
            'security.firewall.map.context.public_api' => ['privates', 'security.firewall.map.context.public_api', 'getSecurity_Firewall_Map_Context_PublicApiService', true],
            'security.firewall.map.context.google_oauth' => ['privates', 'security.firewall.map.context.google_oauth', 'getSecurity_Firewall_Map_Context_GoogleOauthService', true],
            'security.firewall.map.context.microsoft_oauth' => ['privates', 'security.firewall.map.context.microsoft_oauth', 'getSecurity_Firewall_Map_Context_MicrosoftOauthService', true],
            'security.firewall.map.context.api' => ['privates', 'security.firewall.map.context.api', 'getSecurity_Firewall_Map_Context_ApiService', true],
        ], [
            'security.firewall.map.context.dev' => '?',
            'security.firewall.map.context.login' => '?',
            'security.firewall.map.context.public_api' => '?',
            'security.firewall.map.context.google_oauth' => '?',
            'security.firewall.map.context.microsoft_oauth' => '?',
            'security.firewall.map.context.api' => '?',
        ]);
    }

    /*
     * Gets the private 'api_platform.api.identifiers_extractor' shared service.
     *
     * @return \ApiPlatform\Metadata\IdentifiersExtractor
     */
    protected static function getApiPlatform_Api_IdentifiersExtractorService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.api.identifiers_extractor'])) {
            return $container->privates['api_platform.api.identifiers_extractor'];
        }
        $b = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.api.identifiers_extractor'])) {
            return $container->privates['api_platform.api.identifiers_extractor'];
        }

        return $container->privates['api_platform.api.identifiers_extractor'] = new \ApiPlatform\Metadata\IdentifiersExtractor($a, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), ($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $b, ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)));
    }

    /*
     * Gets the private 'api_platform.cache.metadata.property' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getApiPlatform_Cache_Metadata_PropertyService($container)
    {
        return $container->privates['api_platform.cache.metadata.property'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('NvYgF+AL+c', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'api_platform.cache.metadata.resource' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getApiPlatform_Cache_Metadata_ResourceService($container)
    {
        return $container->privates['api_platform.cache.metadata.resource'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('02WurjrooL', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'api_platform.cache.metadata.resource_collection' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getApiPlatform_Cache_Metadata_ResourceCollectionService($container)
    {
        return $container->privates['api_platform.cache.metadata.resource_collection'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('PmJMke+n25', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'api_platform.doctrine.orm.metadata.property.metadata_factory' shared service.
     *
     * @return \ApiPlatform\Doctrine\Orm\Metadata\Property\DoctrineOrmPropertyMetadataFactory
     */
    protected static function getApiPlatform_Doctrine_Orm_Metadata_Property_MetadataFactoryService($container)
    {
        return $container->privates['api_platform.doctrine.orm.metadata.property.metadata_factory'] = new \ApiPlatform\Doctrine\Orm\Metadata\Property\DoctrineOrmPropertyMetadataFactory(($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->privates['api_platform.metadata.property.metadata_factory.property_info'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_PropertyInfoService($container)));
    }

    /*
     * Gets the private 'api_platform.doctrine.orm.metadata.resource.link_factory' shared service.
     *
     * @return \ApiPlatform\Doctrine\Orm\Metadata\Resource\DoctrineOrmLinkFactory
     */
    protected static function getApiPlatform_Doctrine_Orm_Metadata_Resource_LinkFactoryService($container)
    {
        $a = ($container->privates['api_platform.doctrine.orm.metadata.resource.link_factory.inner'] ?? self::getApiPlatform_Doctrine_Orm_Metadata_Resource_LinkFactory_InnerService($container));

        if (isset($container->privates['api_platform.doctrine.orm.metadata.resource.link_factory'])) {
            return $container->privates['api_platform.doctrine.orm.metadata.resource.link_factory'];
        }

        return $container->privates['api_platform.doctrine.orm.metadata.resource.link_factory'] = new \ApiPlatform\Doctrine\Orm\Metadata\Resource\DoctrineOrmLinkFactory(($container->services['doctrine'] ?? self::getDoctrineService($container)), ($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), $a);
    }

    /*
     * Gets the private 'api_platform.doctrine.orm.metadata.resource.link_factory.inner' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\LinkFactory
     */
    protected static function getApiPlatform_Doctrine_Orm_Metadata_Resource_LinkFactory_InnerService($container)
    {
        $a = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.doctrine.orm.metadata.resource.link_factory.inner'])) {
            return $container->privates['api_platform.doctrine.orm.metadata.resource.link_factory.inner'];
        }

        return $container->privates['api_platform.doctrine.orm.metadata.resource.link_factory.inner'] = new \ApiPlatform\Metadata\Resource\Factory\LinkFactory(($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $a, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)));
    }

    /*
     * Gets the private 'api_platform.doctrine.orm.metadata.resource.metadata_collection_factory' shared service.
     *
     * @return \ApiPlatform\Doctrine\Orm\Metadata\Resource\DoctrineOrmResourceCollectionMetadataFactory
     */
    protected static function getApiPlatform_Doctrine_Orm_Metadata_Resource_MetadataCollectionFactoryService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.php_doc'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_PhpDocService($container));

        if (isset($container->privates['api_platform.doctrine.orm.metadata.resource.metadata_collection_factory'])) {
            return $container->privates['api_platform.doctrine.orm.metadata.resource.metadata_collection_factory'];
        }

        return $container->privates['api_platform.doctrine.orm.metadata.resource.metadata_collection_factory'] = new \ApiPlatform\Doctrine\Orm\Metadata\Resource\DoctrineOrmResourceCollectionMetadataFactory(($container->services['doctrine'] ?? self::getDoctrineService($container)), $a);
    }

    /*
     * Gets the private 'api_platform.filter_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function getApiPlatform_FilterLocatorService($container)
    {
        return $container->privates['api_platform.filter_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityBacklinkApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityBacklinkApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityBacklinkApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_range_filter' => ['privates', 'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_range_filter', 'getAnnotatedAppEntityBacklinkApiPlatformDoctrineOrmFilterRangeFilterService', true],
            'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityCampaignApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityCampaignApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityCampaignApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_case_study_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_case_study_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityCaseStudyApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_case_study_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_case_study_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityCaseStudyApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_citation_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_citation_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityCitationApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_citation_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_citation_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityCitationApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_citation_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_citation_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityCitationApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityContentBriefApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityContentBriefApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityContentBriefApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityContentItemApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityContentItemApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityContentItemApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_faq_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_faq_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityFaqApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_faq_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_faq_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityFaqApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityInvoiceApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityInvoiceApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityInvoiceApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_range_filter' => ['privates', 'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_range_filter', 'getAnnotatedAppEntityInvoiceApiPlatformDoctrineOrmFilterRangeFilterService', true],
            'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityKeywordApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityKeywordApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityKeywordApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_lead_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_lead_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityLeadApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_lead_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_lead_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityLeadApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_lead_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_lead_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityLeadApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityRankingApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityRankingApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityRankingApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_range_filter' => ['privates', 'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_range_filter', 'getAnnotatedAppEntityRankingApiPlatformDoctrineOrmFilterRangeFilterService', true],
            'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityRecommendationApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityRecommendationApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityRecommendationApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_review_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_review_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntityReviewApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_review_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_review_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntityReviewApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_review_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_review_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntityReviewApiPlatformDoctrineOrmFilterDateFilterService', true],
            'annotated_app_entity_review_api_platform_doctrine_orm_filter_range_filter' => ['privates', 'annotated_app_entity_review_api_platform_doctrine_orm_filter_range_filter', 'getAnnotatedAppEntityReviewApiPlatformDoctrineOrmFilterRangeFilterService', true],
            'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_search_filter' => ['privates', 'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_search_filter', 'getAnnotatedAppEntitySubscriptionApiPlatformDoctrineOrmFilterSearchFilterService', true],
            'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_order_filter' => ['privates', 'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_order_filter', 'getAnnotatedAppEntitySubscriptionApiPlatformDoctrineOrmFilterOrderFilterService', true],
            'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_date_filter' => ['privates', 'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_date_filter', 'getAnnotatedAppEntitySubscriptionApiPlatformDoctrineOrmFilterDateFilterService', true],
        ], [
            'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_backlink_api_platform_doctrine_orm_filter_range_filter' => '?',
            'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_campaign_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_case_study_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_case_study_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_citation_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_citation_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_citation_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_content_brief_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_content_item_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_faq_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_faq_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_invoice_api_platform_doctrine_orm_filter_range_filter' => '?',
            'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_keyword_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_lead_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_lead_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_lead_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_ranking_api_platform_doctrine_orm_filter_range_filter' => '?',
            'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_recommendation_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_review_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_review_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_review_api_platform_doctrine_orm_filter_date_filter' => '?',
            'annotated_app_entity_review_api_platform_doctrine_orm_filter_range_filter' => '?',
            'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_search_filter' => '?',
            'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_order_filter' => '?',
            'annotated_app_entity_subscription_api_platform_doctrine_orm_filter_date_filter' => '?',
        ]);
    }

    /*
     * Gets the private 'api_platform.hydra.name_converter.hydra_prefix' shared service.
     *
     * @return \ApiPlatform\Hydra\Serializer\HydraPrefixNameConverter
     */
    protected static function getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)
    {
        return $container->privates['api_platform.hydra.name_converter.hydra_prefix'] = new \ApiPlatform\Hydra\Serializer\HydraPrefixNameConverter(($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)), $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'api_platform.hydra.normalizer.collection_filters' shared service.
     *
     * @return \ApiPlatform\Hydra\Serializer\CollectionFiltersNormalizer
     */
    protected static function getApiPlatform_Hydra_Normalizer_CollectionFiltersService($container)
    {
        $a = ($container->privates['api_platform.hydra.normalizer.partial_collection_view'] ?? self::getApiPlatform_Hydra_Normalizer_PartialCollectionViewService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.collection_filters'])) {
            return $container->privates['api_platform.hydra.normalizer.collection_filters'];
        }
        $b = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.collection_filters'])) {
            return $container->privates['api_platform.hydra.normalizer.collection_filters'];
        }
        $c = ($container->privates['api_platform.filter_locator'] ?? self::getApiPlatform_FilterLocatorService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.collection_filters'])) {
            return $container->privates['api_platform.hydra.normalizer.collection_filters'];
        }

        return $container->privates['api_platform.hydra.normalizer.collection_filters'] = new \ApiPlatform\Hydra\Serializer\CollectionFiltersNormalizer($a, $b, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), $c, $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'api_platform.hydra.normalizer.constraint_violation_list' shared service.
     *
     * @return \ApiPlatform\Hydra\Serializer\ConstraintViolationListNormalizer
     */
    protected static function getApiPlatform_Hydra_Normalizer_ConstraintViolationListService($container)
    {
        return $container->privates['api_platform.hydra.normalizer.constraint_violation_list'] = new \ApiPlatform\Hydra\Serializer\ConstraintViolationListNormalizer([], ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)), $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'api_platform.hydra.normalizer.documentation' shared service.
     *
     * @return \ApiPlatform\Hydra\Serializer\DocumentationNormalizer
     */
    protected static function getApiPlatform_Hydra_Normalizer_DocumentationService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.documentation'])) {
            return $container->privates['api_platform.hydra.normalizer.documentation'];
        }
        $b = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.documentation'])) {
            return $container->privates['api_platform.hydra.normalizer.documentation'];
        }

        return $container->privates['api_platform.hydra.normalizer.documentation'] = new \ApiPlatform\Hydra\Serializer\DocumentationNormalizer($a, ($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $b, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), ($container->privates['api_platform.router'] ?? self::getApiPlatform_RouterService($container)), ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)), $container->parameters['api_platform.serializer.default_context'], true);
    }

    /*
     * Gets the private 'api_platform.hydra.normalizer.entrypoint' shared service.
     *
     * @return \ApiPlatform\Hydra\Serializer\EntrypointNormalizer
     */
    protected static function getApiPlatform_Hydra_Normalizer_EntrypointService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.entrypoint'])) {
            return $container->privates['api_platform.hydra.normalizer.entrypoint'];
        }
        $b = ($container->privates['api_platform.symfony.iri_converter'] ?? self::getApiPlatform_Symfony_IriConverterService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.entrypoint'])) {
            return $container->privates['api_platform.hydra.normalizer.entrypoint'];
        }

        return $container->privates['api_platform.hydra.normalizer.entrypoint'] = new \ApiPlatform\Hydra\Serializer\EntrypointNormalizer($a, $b, ($container->privates['api_platform.router'] ?? self::getApiPlatform_RouterService($container)));
    }

    /*
     * Gets the private 'api_platform.hydra.normalizer.partial_collection_view' shared service.
     *
     * @return \ApiPlatform\Hydra\Serializer\PartialCollectionViewNormalizer
     */
    protected static function getApiPlatform_Hydra_Normalizer_PartialCollectionViewService($container)
    {
        $a = ($container->privates['api_platform.hydra.normalizer.partial_collection_view.inner'] ?? self::getApiPlatform_Hydra_Normalizer_PartialCollectionView_InnerService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.partial_collection_view'])) {
            return $container->privates['api_platform.hydra.normalizer.partial_collection_view'];
        }
        $b = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.partial_collection_view'])) {
            return $container->privates['api_platform.hydra.normalizer.partial_collection_view'];
        }

        return $container->privates['api_platform.hydra.normalizer.partial_collection_view'] = new \ApiPlatform\Hydra\Serializer\PartialCollectionViewNormalizer($a, 'page', 'pagination', $b, ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), 1, $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'api_platform.hydra.normalizer.partial_collection_view.inner' shared service.
     *
     * @return \ApiPlatform\Hydra\Serializer\CollectionNormalizer
     */
    protected static function getApiPlatform_Hydra_Normalizer_PartialCollectionView_InnerService($container)
    {
        $a = ($container->privates['api_platform.jsonld.context_builder'] ?? self::getApiPlatform_Jsonld_ContextBuilderService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.partial_collection_view.inner'])) {
            return $container->privates['api_platform.hydra.normalizer.partial_collection_view.inner'];
        }
        $b = ($container->privates['api_platform.symfony.iri_converter'] ?? self::getApiPlatform_Symfony_IriConverterService($container));

        if (isset($container->privates['api_platform.hydra.normalizer.partial_collection_view.inner'])) {
            return $container->privates['api_platform.hydra.normalizer.partial_collection_view.inner'];
        }

        return $container->privates['api_platform.hydra.normalizer.partial_collection_view.inner'] = new \ApiPlatform\Hydra\Serializer\CollectionNormalizer($a, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), $b, $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'api_platform.json_schema.metadata.property.metadata_factory.schema' shared service.
     *
     * @return \ApiPlatform\JsonSchema\Metadata\Property\Factory\SchemaPropertyMetadataFactory
     */
    protected static function getApiPlatform_JsonSchema_Metadata_Property_MetadataFactory_SchemaService($container)
    {
        $a = ($container->privates['api_platform.metadata.property.metadata_factory.validator'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_ValidatorService($container));

        if (isset($container->privates['api_platform.json_schema.metadata.property.metadata_factory.schema'])) {
            return $container->privates['api_platform.json_schema.metadata.property.metadata_factory.schema'];
        }

        return $container->privates['api_platform.json_schema.metadata.property.metadata_factory.schema'] = new \ApiPlatform\JsonSchema\Metadata\Property\Factory\SchemaPropertyMetadataFactory(($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), $a);
    }

    /*
     * Gets the private 'api_platform.jsonld.context_builder' shared service.
     *
     * @return \ApiPlatform\JsonLd\ContextBuilder
     */
    protected static function getApiPlatform_Jsonld_ContextBuilderService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.jsonld.context_builder'])) {
            return $container->privates['api_platform.jsonld.context_builder'];
        }
        $b = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.jsonld.context_builder'])) {
            return $container->privates['api_platform.jsonld.context_builder'];
        }

        return $container->privates['api_platform.jsonld.context_builder'] = new \ApiPlatform\JsonLd\ContextBuilder(($container->privates['api_platform.metadata.resource.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_CachedService($container)), $a, ($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $b, ($container->privates['api_platform.router'] ?? self::getApiPlatform_RouterService($container)), ($container->privates['api_platform.symfony.iri_converter.skolem'] ?? self::getApiPlatform_Symfony_IriConverter_SkolemService($container)), ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)), $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'api_platform.jsonld.encoder' shared service.
     *
     * @return \ApiPlatform\Serializer\JsonEncoder
     */
    protected static function getApiPlatform_Jsonld_EncoderService($container)
    {
        return $container->privates['api_platform.jsonld.encoder'] = new \ApiPlatform\Serializer\JsonEncoder('jsonld', NULL);
    }

    /*
     * Gets the private 'api_platform.jsonld.normalizer.error' shared service.
     *
     * @return \ApiPlatform\JsonLd\Serializer\ErrorNormalizer
     */
    protected static function getApiPlatform_Jsonld_Normalizer_ErrorService($container)
    {
        $a = ($container->privates['api_platform.jsonld.normalizer.item'] ?? self::getApiPlatform_Jsonld_Normalizer_ItemService($container));

        if (isset($container->privates['api_platform.jsonld.normalizer.error'])) {
            return $container->privates['api_platform.jsonld.normalizer.error'];
        }

        return $container->privates['api_platform.jsonld.normalizer.error'] = new \ApiPlatform\JsonLd\Serializer\ErrorNormalizer($a, $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'api_platform.jsonld.normalizer.item' shared service.
     *
     * @return \ApiPlatform\JsonLd\Serializer\ItemNormalizer
     */
    protected static function getApiPlatform_Jsonld_Normalizer_ItemService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.jsonld.normalizer.item'])) {
            return $container->privates['api_platform.jsonld.normalizer.item'];
        }
        $b = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.jsonld.normalizer.item'])) {
            return $container->privates['api_platform.jsonld.normalizer.item'];
        }
        $c = ($container->privates['api_platform.symfony.iri_converter'] ?? self::getApiPlatform_Symfony_IriConverterService($container));

        if (isset($container->privates['api_platform.jsonld.normalizer.item'])) {
            return $container->privates['api_platform.jsonld.normalizer.item'];
        }
        $d = ($container->privates['api_platform.jsonld.context_builder'] ?? self::getApiPlatform_Jsonld_ContextBuilderService($container));

        if (isset($container->privates['api_platform.jsonld.normalizer.item'])) {
            return $container->privates['api_platform.jsonld.normalizer.item'];
        }

        return $container->privates['api_platform.jsonld.normalizer.item'] = new \ApiPlatform\JsonLd\Serializer\ItemNormalizer($a, ($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $b, $c, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), $d, ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)), ($container->privates['api_platform.serializer.mapping.cache_class_metadata_factory'] ?? self::getApiPlatform_Serializer_Mapping_CacheClassMetadataFactoryService($container)), $container->parameters['api_platform.serializer.default_context'], ($container->privates['api_platform.security.resource_access_checker'] ?? self::getApiPlatform_Security_ResourceAccessCheckerService($container)), NULL);
    }

    /*
     * Gets the private 'api_platform.jsonld.normalizer.object' shared service.
     *
     * @return \ApiPlatform\JsonLd\Serializer\ObjectNormalizer
     */
    protected static function getApiPlatform_Jsonld_Normalizer_ObjectService($container)
    {
        $a = ($container->privates['api_platform.symfony.iri_converter'] ?? self::getApiPlatform_Symfony_IriConverterService($container));

        if (isset($container->privates['api_platform.jsonld.normalizer.object'])) {
            return $container->privates['api_platform.jsonld.normalizer.object'];
        }
        $b = ($container->privates['api_platform.jsonld.context_builder'] ?? self::getApiPlatform_Jsonld_ContextBuilderService($container));

        if (isset($container->privates['api_platform.jsonld.normalizer.object'])) {
            return $container->privates['api_platform.jsonld.normalizer.object'];
        }

        return $container->privates['api_platform.jsonld.normalizer.object'] = new \ApiPlatform\JsonLd\Serializer\ObjectNormalizer(($container->privates['serializer.normalizer.object'] ?? self::getSerializer_Normalizer_ObjectService($container)), $a, $b);
    }

    /*
     * Gets the private 'api_platform.jsonld.normalizer.validation_exception' shared service.
     *
     * @return \ApiPlatform\Symfony\Validator\Serializer\ValidationExceptionNormalizer
     */
    protected static function getApiPlatform_Jsonld_Normalizer_ValidationExceptionService($container)
    {
        $a = ($container->privates['api_platform.jsonld.normalizer.error'] ?? self::getApiPlatform_Jsonld_Normalizer_ErrorService($container));

        if (isset($container->privates['api_platform.jsonld.normalizer.validation_exception'])) {
            return $container->privates['api_platform.jsonld.normalizer.validation_exception'];
        }

        return $container->privates['api_platform.jsonld.normalizer.validation_exception'] = new \ApiPlatform\Symfony\Validator\Serializer\ValidationExceptionNormalizer($a, ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)));
    }

    /*
     * Gets the private 'api_platform.jsonopenapi.encoder' shared service.
     *
     * @return \ApiPlatform\Serializer\JsonEncoder
     */
    protected static function getApiPlatform_Jsonopenapi_EncoderService($container)
    {
        return $container->privates['api_platform.jsonopenapi.encoder'] = new \ApiPlatform\Serializer\JsonEncoder('jsonopenapi', NULL);
    }

    /*
     * Gets the private 'api_platform.metadata.inflector' shared service.
     *
     * @return \ApiPlatform\Metadata\Util\Inflector
     */
    protected static function getApiPlatform_Metadata_InflectorService($container)
    {
        return $container->privates['api_platform.metadata.inflector'] = new \ApiPlatform\Metadata\Util\Inflector();
    }

    /*
     * Gets the private 'api_platform.metadata.operation.metadata_factory' shared service.
     *
     * @return \ApiPlatform\Metadata\Operation\Factory\OperationMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Operation_MetadataFactoryService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.metadata.operation.metadata_factory'])) {
            return $container->privates['api_platform.metadata.operation.metadata_factory'];
        }

        return $container->privates['api_platform.metadata.operation.metadata_factory'] = new \ApiPlatform\Metadata\Operation\Factory\OperationMetadataFactory(($container->privates['api_platform.metadata.resource.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_CachedService($container)), $a);
    }

    /*
     * Gets the private 'api_platform.metadata.path_segment_name_generator.underscore' shared service.
     *
     * @return \ApiPlatform\Metadata\Operation\UnderscorePathSegmentNameGenerator
     */
    protected static function getApiPlatform_Metadata_PathSegmentNameGenerator_UnderscoreService($container)
    {
        return $container->privates['api_platform.metadata.path_segment_name_generator.underscore'] = new \ApiPlatform\Metadata\Operation\UnderscorePathSegmentNameGenerator(($container->privates['api_platform.metadata.inflector'] ??= new \ApiPlatform\Metadata\Util\Inflector()));
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.attribute' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\AttributePropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_AttributeService($container)
    {
        return $container->privates['api_platform.metadata.property.metadata_factory.attribute'] = new \ApiPlatform\Metadata\Property\Factory\AttributePropertyMetadataFactory(($container->privates['api_platform.metadata.property.metadata_factory.identifier'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_IdentifierService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.cached' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\CachedPropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container)
    {
        $a = ($container->privates['api_platform.json_schema.metadata.property.metadata_factory.schema'] ?? self::getApiPlatform_JsonSchema_Metadata_Property_MetadataFactory_SchemaService($container));

        if (isset($container->privates['api_platform.metadata.property.metadata_factory.cached'])) {
            return $container->privates['api_platform.metadata.property.metadata_factory.cached'];
        }

        return $container->privates['api_platform.metadata.property.metadata_factory.cached'] = new \ApiPlatform\Metadata\Property\Factory\CachedPropertyMetadataFactory(($container->privates['api_platform.cache.metadata.property'] ?? self::getApiPlatform_Cache_Metadata_PropertyService($container)), $a);
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.default_property' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\DefaultPropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_DefaultPropertyService($container)
    {
        return $container->privates['api_platform.metadata.property.metadata_factory.default_property'] = new \ApiPlatform\Metadata\Property\Factory\DefaultPropertyMetadataFactory(($container->privates['api_platform.metadata.property.metadata_factory.serializer'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_SerializerService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.identifier' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\IdentifierPropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_IdentifierService($container)
    {
        return $container->privates['api_platform.metadata.property.metadata_factory.identifier'] = new \ApiPlatform\Metadata\Property\Factory\IdentifierPropertyMetadataFactory(($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), ($container->privates['api_platform.metadata.property.metadata_factory.default_property'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_DefaultPropertyService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.property_info' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\PropertyInfoPropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_PropertyInfoService($container)
    {
        return $container->privates['api_platform.metadata.property.metadata_factory.property_info'] = new \ApiPlatform\Metadata\Property\Factory\PropertyInfoPropertyMetadataFactory(($container->privates['property_info.cache'] ?? self::getPropertyInfo_CacheService($container)), ($container->privates['api_platform.metadata.property.metadata_factory.xml'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_XmlService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.serializer' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\SerializerPropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_SerializerService($container)
    {
        return $container->privates['api_platform.metadata.property.metadata_factory.serializer'] = new \ApiPlatform\Metadata\Property\Factory\SerializerPropertyMetadataFactory(($container->privates['api_platform.serializer.mapping.cache_class_metadata_factory'] ?? self::getApiPlatform_Serializer_Mapping_CacheClassMetadataFactoryService($container)), ($container->privates['api_platform.doctrine.orm.metadata.property.metadata_factory'] ?? self::getApiPlatform_Doctrine_Orm_Metadata_Property_MetadataFactoryService($container)), ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.validator' shared service.
     *
     * @return \ApiPlatform\Symfony\Validator\Metadata\Property\ValidatorPropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_ValidatorService($container)
    {
        $a = ($container->privates['validator'] ?? self::getValidatorService($container));

        if (isset($container->privates['api_platform.metadata.property.metadata_factory.validator'])) {
            return $container->privates['api_platform.metadata.property.metadata_factory.validator'];
        }

        return $container->privates['api_platform.metadata.property.metadata_factory.validator'] = new \ApiPlatform\Symfony\Validator\Metadata\Property\ValidatorPropertyMetadataFactory($a, ($container->privates['api_platform.metadata.property.metadata_factory.yaml'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_YamlService($container)), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['api_platform.metadata.property_schema.choice_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaChoiceRestriction());
            yield 1 => ($container->privates['api_platform.metadata.property_schema.collection_restriction'] ?? $container->load('getApiPlatform_Metadata_PropertySchema_CollectionRestrictionService'));
            yield 2 => ($container->privates['api_platform.metadata.property_schema.count_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaCountRestriction());
            yield 3 => ($container->privates['api_platform.metadata.property_schema.greater_than_or_equal_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaGreaterThanOrEqualRestriction());
            yield 4 => ($container->privates['api_platform.metadata.property_schema.greater_than_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaGreaterThanRestriction());
            yield 5 => ($container->privates['api_platform.metadata.property_schema.length_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaLengthRestriction());
            yield 6 => ($container->privates['api_platform.metadata.property_schema.less_than_or_equal_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaLessThanOrEqualRestriction());
            yield 7 => ($container->privates['api_platform.metadata.property_schema.less_than_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaLessThanRestriction());
            yield 8 => ($container->privates['api_platform.metadata.property_schema.one_of_restriction'] ?? $container->load('getApiPlatform_Metadata_PropertySchema_OneOfRestrictionService'));
            yield 9 => ($container->privates['api_platform.metadata.property_schema.range_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaRangeRestriction());
            yield 10 => ($container->privates['api_platform.metadata.property_schema.regex_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaRegexRestriction());
            yield 11 => ($container->privates['api_platform.metadata.property_schema.format_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaFormat());
            yield 12 => ($container->privates['api_platform.metadata.property_schema.unique_restriction'] ??= new \ApiPlatform\Symfony\Validator\Metadata\Property\Restriction\PropertySchemaUniqueRestriction());
        }, 13));
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.xml' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\ExtractorPropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_XmlService($container)
    {
        return $container->privates['api_platform.metadata.property.metadata_factory.xml'] = new \ApiPlatform\Metadata\Property\Factory\ExtractorPropertyMetadataFactory(($container->privates['api_platform.metadata.property_extractor.xml'] ??= new \ApiPlatform\Metadata\Extractor\XmlPropertyExtractor([], $container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.metadata_factory.yaml' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\ExtractorPropertyMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_MetadataFactory_YamlService($container)
    {
        return $container->privates['api_platform.metadata.property.metadata_factory.yaml'] = new \ApiPlatform\Metadata\Property\Factory\ExtractorPropertyMetadataFactory(($container->privates['api_platform.metadata.property_extractor.yaml'] ??= new \ApiPlatform\Metadata\Extractor\YamlPropertyExtractor([], $container)), ($container->privates['api_platform.metadata.property.metadata_factory.attribute'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_AttributeService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.name_collection_factory.cached' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\CachedPropertyNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)
    {
        return $container->privates['api_platform.metadata.property.name_collection_factory.cached'] = new \ApiPlatform\Metadata\Property\Factory\CachedPropertyNameCollectionFactory(($container->privates['api_platform.cache.metadata.property'] ?? self::getApiPlatform_Cache_Metadata_PropertyService($container)), ($container->privates['api_platform.metadata.property.name_collection_factory.yaml'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_YamlService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.name_collection_factory.concerns' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\ConcernsPropertyNameCollectionMetadataFactory
     */
    protected static function getApiPlatform_Metadata_Property_NameCollectionFactory_ConcernsService($container)
    {
        return $container->privates['api_platform.metadata.property.name_collection_factory.concerns'] = new \ApiPlatform\Metadata\Property\Factory\ConcernsPropertyNameCollectionMetadataFactory(($container->privates['api_platform.metadata.property.name_collection_factory.xml'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_XmlService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.name_collection_factory.property_info' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\PropertyInfoPropertyNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Property_NameCollectionFactory_PropertyInfoService($container)
    {
        return $container->privates['api_platform.metadata.property.name_collection_factory.property_info'] = new \ApiPlatform\Metadata\Property\Factory\PropertyInfoPropertyNameCollectionFactory(($container->privates['property_info.cache'] ?? self::getPropertyInfo_CacheService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.name_collection_factory.xml' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\ExtractorPropertyNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Property_NameCollectionFactory_XmlService($container)
    {
        return $container->privates['api_platform.metadata.property.name_collection_factory.xml'] = new \ApiPlatform\Metadata\Property\Factory\ExtractorPropertyNameCollectionFactory(($container->privates['api_platform.metadata.property_extractor.xml'] ??= new \ApiPlatform\Metadata\Extractor\XmlPropertyExtractor([], $container)), ($container->privates['api_platform.metadata.property.name_collection_factory.property_info'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_PropertyInfoService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property.name_collection_factory.yaml' shared service.
     *
     * @return \ApiPlatform\Metadata\Property\Factory\ExtractorPropertyNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Property_NameCollectionFactory_YamlService($container)
    {
        return $container->privates['api_platform.metadata.property.name_collection_factory.yaml'] = new \ApiPlatform\Metadata\Property\Factory\ExtractorPropertyNameCollectionFactory(($container->privates['api_platform.metadata.property_extractor.yaml'] ??= new \ApiPlatform\Metadata\Extractor\YamlPropertyExtractor([], $container)), ($container->privates['api_platform.metadata.property.name_collection_factory.concerns'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_ConcernsService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.property_extractor.xml' shared service.
     *
     * @return \ApiPlatform\Metadata\Extractor\XmlPropertyExtractor
     */
    protected static function getApiPlatform_Metadata_PropertyExtractor_XmlService($container)
    {
        return $container->privates['api_platform.metadata.property_extractor.xml'] = new \ApiPlatform\Metadata\Extractor\XmlPropertyExtractor([], $container);
    }

    /*
     * Gets the private 'api_platform.metadata.property_extractor.yaml' shared service.
     *
     * @return \ApiPlatform\Metadata\Extractor\YamlPropertyExtractor
     */
    protected static function getApiPlatform_Metadata_PropertyExtractor_YamlService($container)
    {
        return $container->privates['api_platform.metadata.property_extractor.yaml'] = new \ApiPlatform\Metadata\Extractor\YamlPropertyExtractor([], $container);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.alternate_uri' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\AlternateUriResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_AlternateUriService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.filters'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_FiltersService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.alternate_uri'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.alternate_uri'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.alternate_uri'] = new \ApiPlatform\Metadata\Resource\Factory\AlternateUriResourceMetadataCollectionFactory($a);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.attributes' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\AttributesResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_AttributesService($container)
    {
        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.attributes'] = new \ApiPlatform\Metadata\Resource\Factory\AttributesResourceMetadataCollectionFactory(NULL, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), $container->parameters['api_platform.defaults'], false);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.backed_enum' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\BackedEnumResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_BackedEnumService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_NotExposedOperationService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.backed_enum'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.backed_enum'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.backed_enum'] = new \ApiPlatform\Metadata\Resource\Factory\BackedEnumResourceMetadataCollectionFactory($a);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.cached' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\CachedResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container)
    {
        $a = ($container->privates['api_platform.doctrine.orm.metadata.resource.metadata_collection_factory'] ?? self::getApiPlatform_Doctrine_Orm_Metadata_Resource_MetadataCollectionFactoryService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] = new \ApiPlatform\Metadata\Resource\Factory\CachedResourceMetadataCollectionFactory(($container->privates['api_platform.cache.metadata.resource_collection'] ?? self::getApiPlatform_Cache_Metadata_ResourceCollectionService($container)), $a);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.concerns' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\ConcernsResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_ConcernsService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.xml'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_XmlService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.concerns'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.concerns'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.concerns'] = new \ApiPlatform\Metadata\Resource\Factory\ConcernsResourceMetadataCollectionFactory($a);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.filters' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\FiltersResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_FiltersService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.formats'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_FormatsService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.filters'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.filters'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.filters'] = new \ApiPlatform\Metadata\Resource\Factory\FiltersResourceMetadataCollectionFactory($a);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.formats' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\FormatsResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_FormatsService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.input_output'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_InputOutputService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.formats'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.formats'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.formats'] = new \ApiPlatform\Metadata\Resource\Factory\FormatsResourceMetadataCollectionFactory($a, $container->parameters['api_platform.formats'], $container->parameters['api_platform.patch_formats'], $container->parameters['api_platform.error_formats']);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.input_output' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\InputOutputResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_InputOutputService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.operation_name'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_OperationNameService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.input_output'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.input_output'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.input_output'] = new \ApiPlatform\Metadata\Resource\Factory\InputOutputResourceMetadataCollectionFactory($a);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.link' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\LinkResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_LinkService($container)
    {
        $a = ($container->privates['api_platform.doctrine.orm.metadata.resource.link_factory'] ?? self::getApiPlatform_Doctrine_Orm_Metadata_Resource_LinkFactoryService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.link'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.link'];
        }
        $b = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.main_controller'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_MainControllerService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.link'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.link'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.link'] = new \ApiPlatform\Metadata\Resource\Factory\LinkResourceMetadataCollectionFactory($a, $b, false);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.main_controller' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\MainControllerResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_MainControllerService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.uri_template'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_UriTemplateService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.main_controller'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.main_controller'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.main_controller'] = new \ApiPlatform\Metadata\Resource\Factory\MainControllerResourceMetadataCollectionFactory($a, false);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\NotExposedOperationResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_NotExposedOperationService($container)
    {
        $a = ($container->privates['api_platform.doctrine.orm.metadata.resource.link_factory'] ?? self::getApiPlatform_Doctrine_Orm_Metadata_Resource_LinkFactoryService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation'];
        }
        $b = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.yaml'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_YamlService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.not_exposed_operation'] = new \ApiPlatform\Metadata\Resource\Factory\NotExposedOperationResourceMetadataCollectionFactory($a, $b);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.operation_name' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\OperationNameResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_OperationNameService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.link'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_LinkService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.operation_name'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.operation_name'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.operation_name'] = new \ApiPlatform\Metadata\Resource\Factory\OperationNameResourceMetadataCollectionFactory($a);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.parameter' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\ParameterResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_ParameterService($container)
    {
        $a = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.parameter'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.parameter'];
        }
        $b = ($container->privates['api_platform.filter_locator'] ?? self::getApiPlatform_FilterLocatorService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.parameter'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.parameter'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.parameter'] = new \ApiPlatform\Metadata\Resource\Factory\ParameterResourceMetadataCollectionFactory(($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $a, ($container->privates['api_platform.metadata.resource.metadata_collection_factory.attributes'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_AttributesService($container)), $b, ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.php_doc' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\PhpDocResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_PhpDocService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.alternate_uri'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_AlternateUriService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.php_doc'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.php_doc'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.php_doc'] = new \ApiPlatform\Metadata\Resource\Factory\PhpDocResourceMetadataCollectionFactory($a);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.uri_template' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\UriTemplateResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_UriTemplateService($container)
    {
        $a = ($container->privates['api_platform.doctrine.orm.metadata.resource.link_factory'] ?? self::getApiPlatform_Doctrine_Orm_Metadata_Resource_LinkFactoryService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.uri_template'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.uri_template'];
        }
        $b = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.backed_enum'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_BackedEnumService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.uri_template'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.uri_template'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.uri_template'] = new \ApiPlatform\Metadata\Resource\Factory\UriTemplateResourceMetadataCollectionFactory($a, ($container->privates['api_platform.metadata.path_segment_name_generator.underscore'] ?? self::getApiPlatform_Metadata_PathSegmentNameGenerator_UnderscoreService($container)), $b);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.xml' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\ExtractorResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_XmlService($container)
    {
        $a = ($container->privates['api_platform.validator.metadata.resource.metadata_collection_factory.parameter'] ?? self::getApiPlatform_Validator_Metadata_Resource_MetadataCollectionFactory_ParameterService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.xml'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.xml'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.xml'] = new \ApiPlatform\Metadata\Resource\Factory\ExtractorResourceMetadataCollectionFactory(($container->privates['api_platform.metadata.resource_extractor.xml'] ??= new \ApiPlatform\Metadata\Extractor\XmlResourceExtractor([], $container)), $a, $container->parameters['api_platform.defaults'], ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), false);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.metadata_collection_factory.yaml' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\ExtractorResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_MetadataCollectionFactory_YamlService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.concerns'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_ConcernsService($container));

        if (isset($container->privates['api_platform.metadata.resource.metadata_collection_factory.yaml'])) {
            return $container->privates['api_platform.metadata.resource.metadata_collection_factory.yaml'];
        }

        return $container->privates['api_platform.metadata.resource.metadata_collection_factory.yaml'] = new \ApiPlatform\Metadata\Resource\Factory\ExtractorResourceMetadataCollectionFactory(($container->privates['api_platform.metadata.resource_extractor.yaml'] ??= new \ApiPlatform\Metadata\Extractor\YamlResourceExtractor([], $container)), $a, $container->parameters['api_platform.defaults'], ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), false);
    }

    /*
     * Gets the private 'api_platform.metadata.resource.name_collection_factory.attributes' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\AttributesResourceNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_NameCollectionFactory_AttributesService($container)
    {
        return $container->privates['api_platform.metadata.resource.name_collection_factory.attributes'] = new \ApiPlatform\Metadata\Resource\Factory\AttributesResourceNameCollectionFactory($container->parameters['api_platform.resource_class_directories'], ($container->privates['api_platform.metadata.resource.name_collection_factory.concerns'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_ConcernsService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.resource.name_collection_factory.cached' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\CachedResourceNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_NameCollectionFactory_CachedService($container)
    {
        return $container->privates['api_platform.metadata.resource.name_collection_factory.cached'] = new \ApiPlatform\Metadata\Resource\Factory\CachedResourceNameCollectionFactory(($container->privates['api_platform.cache.metadata.resource'] ?? self::getApiPlatform_Cache_Metadata_ResourceService($container)), ($container->privates['api_platform.metadata.resource.name_collection_factory.yaml'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_YamlService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.resource.name_collection_factory.class_name' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\ClassNameResourceNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_NameCollectionFactory_ClassNameService($container)
    {
        return $container->privates['api_platform.metadata.resource.name_collection_factory.class_name'] = new \ApiPlatform\Metadata\Resource\Factory\ClassNameResourceNameCollectionFactory($container->parameters['api_platform.class_name_resources'], ($container->privates['api_platform.metadata.resource.name_collection_factory.attributes'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_AttributesService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.resource.name_collection_factory.concerns' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\ConcernsResourceNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_NameCollectionFactory_ConcernsService($container)
    {
        return $container->privates['api_platform.metadata.resource.name_collection_factory.concerns'] = new \ApiPlatform\Metadata\Resource\Factory\ConcernsResourceNameCollectionFactory($container->parameters['api_platform.resource_class_directories'], ($container->privates['api_platform.metadata.resource.name_collection_factory.xml'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_XmlService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.resource.name_collection_factory.xml' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\ExtractorResourceNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_NameCollectionFactory_XmlService($container)
    {
        return $container->privates['api_platform.metadata.resource.name_collection_factory.xml'] = new \ApiPlatform\Metadata\Resource\Factory\ExtractorResourceNameCollectionFactory(($container->privates['api_platform.metadata.resource_extractor.xml'] ??= new \ApiPlatform\Metadata\Extractor\XmlResourceExtractor([], $container)));
    }

    /*
     * Gets the private 'api_platform.metadata.resource.name_collection_factory.yaml' shared service.
     *
     * @return \ApiPlatform\Metadata\Resource\Factory\ExtractorResourceNameCollectionFactory
     */
    protected static function getApiPlatform_Metadata_Resource_NameCollectionFactory_YamlService($container)
    {
        return $container->privates['api_platform.metadata.resource.name_collection_factory.yaml'] = new \ApiPlatform\Metadata\Resource\Factory\ExtractorResourceNameCollectionFactory(($container->privates['api_platform.metadata.resource_extractor.yaml'] ??= new \ApiPlatform\Metadata\Extractor\YamlResourceExtractor([], $container)), ($container->privates['api_platform.metadata.resource.name_collection_factory.class_name'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_ClassNameService($container)));
    }

    /*
     * Gets the private 'api_platform.metadata.resource_extractor.xml' shared service.
     *
     * @return \ApiPlatform\Metadata\Extractor\XmlResourceExtractor
     */
    protected static function getApiPlatform_Metadata_ResourceExtractor_XmlService($container)
    {
        return $container->privates['api_platform.metadata.resource_extractor.xml'] = new \ApiPlatform\Metadata\Extractor\XmlResourceExtractor([], $container);
    }

    /*
     * Gets the private 'api_platform.metadata.resource_extractor.yaml' shared service.
     *
     * @return \ApiPlatform\Metadata\Extractor\YamlResourceExtractor
     */
    protected static function getApiPlatform_Metadata_ResourceExtractor_YamlService($container)
    {
        return $container->privates['api_platform.metadata.resource_extractor.yaml'] = new \ApiPlatform\Metadata\Extractor\YamlResourceExtractor([], $container);
    }

    /*
     * Gets the private 'api_platform.normalizer.constraint_violation_list' shared service.
     *
     * @return \ApiPlatform\Serializer\ConstraintViolationListNormalizer
     */
    protected static function getApiPlatform_Normalizer_ConstraintViolationListService($container)
    {
        return $container->privates['api_platform.normalizer.constraint_violation_list'] = new \ApiPlatform\Serializer\ConstraintViolationListNormalizer([], ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)));
    }

    /*
     * Gets the private 'api_platform.openapi.normalizer.api_gateway.inner' shared service.
     *
     * @return \ApiPlatform\OpenApi\Serializer\OpenApiNormalizer
     */
    protected static function getApiPlatform_Openapi_Normalizer_ApiGateway_InnerService($container)
    {
        return $container->privates['api_platform.openapi.normalizer.api_gateway.inner'] = new \ApiPlatform\OpenApi\Serializer\OpenApiNormalizer(new \Symfony\Component\Serializer\Serializer([new \Symfony\Component\Serializer\Normalizer\ObjectNormalizer(NULL, NULL, ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), ($container->privates['property_info.cache'] ?? self::getPropertyInfo_CacheService($container)))], [($container->privates['serializer.encoder.json'] ??= new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL, $container->parameters['api_platform.serializer.default_context']))]));
    }

    /*
     * Gets the private 'api_platform.openapi.normalizer.legacy' shared service.
     *
     * @return \ApiPlatform\OpenApi\Serializer\LegacyOpenApiNormalizer
     */
    protected static function getApiPlatform_Openapi_Normalizer_LegacyService($container)
    {
        return $container->privates['api_platform.openapi.normalizer.legacy'] = new \ApiPlatform\OpenApi\Serializer\LegacyOpenApiNormalizer(($container->privates['api_platform.openapi.normalizer.legacy.inner'] ?? self::getApiPlatform_Openapi_Normalizer_Legacy_InnerService($container)));
    }

    /*
     * Gets the private 'api_platform.openapi.normalizer.legacy.inner' shared service.
     *
     * @return \ApiPlatform\OpenApi\Serializer\ApiGatewayNormalizer
     */
    protected static function getApiPlatform_Openapi_Normalizer_Legacy_InnerService($container)
    {
        return $container->privates['api_platform.openapi.normalizer.legacy.inner'] = new \ApiPlatform\OpenApi\Serializer\ApiGatewayNormalizer(($container->privates['api_platform.openapi.normalizer.api_gateway.inner'] ?? self::getApiPlatform_Openapi_Normalizer_ApiGateway_InnerService($container)));
    }

    /*
     * Gets the private 'api_platform.problem.encoder' shared service.
     *
     * @return \ApiPlatform\Serializer\JsonEncoder
     */
    protected static function getApiPlatform_Problem_EncoderService($container)
    {
        return $container->privates['api_platform.problem.encoder'] = new \ApiPlatform\Serializer\JsonEncoder('jsonproblem');
    }

    /*
     * Gets the private 'api_platform.problem.normalizer.validation_exception' shared service.
     *
     * @return \ApiPlatform\Symfony\Validator\Serializer\ValidationExceptionNormalizer
     */
    protected static function getApiPlatform_Problem_Normalizer_ValidationExceptionService($container)
    {
        $a = ($container->privates['api_platform.serializer.normalizer.item'] ?? self::getApiPlatform_Serializer_Normalizer_ItemService($container));

        if (isset($container->privates['api_platform.problem.normalizer.validation_exception'])) {
            return $container->privates['api_platform.problem.normalizer.validation_exception'];
        }

        return $container->privates['api_platform.problem.normalizer.validation_exception'] = new \ApiPlatform\Symfony\Validator\Serializer\ValidationExceptionNormalizer($a, ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)));
    }

    /*
     * Gets the private 'api_platform.resource_class_resolver' shared service.
     *
     * @return \ApiPlatform\Metadata\ResourceClassResolver
     */
    protected static function getApiPlatform_ResourceClassResolverService($container)
    {
        return $container->privates['api_platform.resource_class_resolver'] = new \ApiPlatform\Metadata\ResourceClassResolver(($container->privates['api_platform.metadata.resource.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_CachedService($container)));
    }

    /*
     * Gets the private 'api_platform.router' shared service.
     *
     * @return \ApiPlatform\Symfony\Routing\Router
     */
    protected static function getApiPlatform_RouterService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->privates['api_platform.router'])) {
            return $container->privates['api_platform.router'];
        }

        return $container->privates['api_platform.router'] = new \ApiPlatform\Symfony\Routing\Router($a, 1);
    }

    /*
     * Gets the private 'api_platform.security.expression_language_provider' shared service.
     *
     * @return \ApiPlatform\Symfony\Security\Core\Authorization\ExpressionLanguageProvider
     */
    protected static function getApiPlatform_Security_ExpressionLanguageProviderService($container)
    {
        return $container->privates['api_platform.security.expression_language_provider'] = new \ApiPlatform\Symfony\Security\Core\Authorization\ExpressionLanguageProvider();
    }

    /*
     * Gets the private 'api_platform.security.resource_access_checker' shared service.
     *
     * @return \ApiPlatform\Symfony\Security\ResourceAccessChecker
     */
    protected static function getApiPlatform_Security_ResourceAccessCheckerService($container)
    {
        return $container->privates['api_platform.security.resource_access_checker'] = new \ApiPlatform\Symfony\Security\ResourceAccessChecker(($container->privates['security.expression_language'] ?? self::getSecurity_ExpressionLanguageService($container)), ($container->privates['security.authentication.trust_resolver'] ??= new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver()), ($container->privates['security.role_hierarchy'] ??= new \Symfony\Component\Security\Core\Role\RoleHierarchy([])), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), ($container->privates['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container)), false);
    }

    /*
     * Gets the private 'api_platform.serializer.mapping.cache_class_metadata_factory' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\CacheClassMetadataFactory
     */
    protected static function getApiPlatform_Serializer_Mapping_CacheClassMetadataFactoryService($container)
    {
        return $container->privates['api_platform.serializer.mapping.cache_class_metadata_factory'] = new \Symfony\Component\Serializer\Mapping\Factory\CacheClassMetadataFactory(($container->privates['api_platform.serializer.mapping.cache_class_metadata_factory.inner'] ?? self::getApiPlatform_Serializer_Mapping_CacheClassMetadataFactory_InnerService($container)), ($container->privates['serializer.mapping.cache.symfony'] ?? self::getSerializer_Mapping_Cache_SymfonyService($container)));
    }

    /*
     * Gets the private 'api_platform.serializer.mapping.cache_class_metadata_factory.inner' shared service.
     *
     * @return \ApiPlatform\Serializer\Mapping\Factory\ClassMetadataFactory
     */
    protected static function getApiPlatform_Serializer_Mapping_CacheClassMetadataFactory_InnerService($container)
    {
        return $container->privates['api_platform.serializer.mapping.cache_class_metadata_factory.inner'] = new \ApiPlatform\Serializer\Mapping\Factory\ClassMetadataFactory(($container->privates['serializer.mapping.cache_class_metadata_factory'] ?? self::getSerializer_Mapping_CacheClassMetadataFactoryService($container)));
    }

    /*
     * Gets the private 'api_platform.serializer.normalizer.item' shared service.
     *
     * @return \ApiPlatform\Serializer\ItemNormalizer
     */
    protected static function getApiPlatform_Serializer_Normalizer_ItemService($container)
    {
        $a = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.serializer.normalizer.item'])) {
            return $container->privates['api_platform.serializer.normalizer.item'];
        }
        $b = ($container->privates['api_platform.symfony.iri_converter'] ?? self::getApiPlatform_Symfony_IriConverterService($container));

        if (isset($container->privates['api_platform.serializer.normalizer.item'])) {
            return $container->privates['api_platform.serializer.normalizer.item'];
        }
        $c = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.serializer.normalizer.item'])) {
            return $container->privates['api_platform.serializer.normalizer.item'];
        }

        return $container->privates['api_platform.serializer.normalizer.item'] = new \ApiPlatform\Serializer\ItemNormalizer(($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $a, $b, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), ($container->privates['api_platform.hydra.name_converter.hydra_prefix'] ?? self::getApiPlatform_Hydra_NameConverter_HydraPrefixService($container)), ($container->privates['api_platform.serializer.mapping.cache_class_metadata_factory'] ?? self::getApiPlatform_Serializer_Mapping_CacheClassMetadataFactoryService($container)), NULL, $c, ($container->privates['api_platform.security.resource_access_checker'] ?? self::getApiPlatform_Security_ResourceAccessCheckerService($container)), [], NULL);
    }

    /*
     * Gets the private 'api_platform.state_provider.locator' shared service.
     *
     * @return \ApiPlatform\State\CallableProvider
     */
    protected static function getApiPlatform_StateProvider_LocatorService($container)
    {
        return $container->privates['api_platform.state_provider.locator'] = new \ApiPlatform\State\CallableProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'ApiPlatform\\State\\CreateProvider' => ['privates', 'api_platform.state_provider.create', 'getApiPlatform_StateProvider_CreateService', true],
            'api_platform.state_provider.create' => ['privates', 'api_platform.state_provider.create', 'getApiPlatform_StateProvider_CreateService', true],
            'ApiPlatform\\State\\ObjectProvider' => ['privates', 'api_platform.state_provider.object', 'getApiPlatform_StateProvider_ObjectService', true],
            'api_platform.state_provider.object' => ['privates', 'api_platform.state_provider.object', 'getApiPlatform_StateProvider_ObjectService', true],
            'ApiPlatform\\State\\Provider\\BackedEnumProvider' => ['privates', 'api_platform.state_provider.backed_enum', 'getApiPlatform_StateProvider_BackedEnumService', true],
            'api_platform.state_provider.backed_enum' => ['privates', 'api_platform.state_provider.backed_enum', 'getApiPlatform_StateProvider_BackedEnumService', true],
            'api_platform.state.error_provider' => ['privates', 'api_platform.state.error_provider', 'getApiPlatform_State_ErrorProviderService', true],
            'api_platform.validator.state.error_provider' => ['privates', 'api_platform.validator.state.error_provider', 'getApiPlatform_Validator_State_ErrorProviderService', true],
            'ApiPlatform\\OpenApi\\State\\OpenApiProvider' => ['privates', 'api_platform.openapi.provider', 'getApiPlatform_Openapi_ProviderService', true],
            'api_platform.openapi.provider' => ['privates', 'api_platform.openapi.provider', 'getApiPlatform_Openapi_ProviderService', true],
            'ApiPlatform\\Doctrine\\Orm\\State\\CollectionProvider' => ['privates', 'api_platform.doctrine.orm.state.collection_provider', 'getApiPlatform_Doctrine_Orm_State_CollectionProviderService', true],
            'api_platform.doctrine.orm.state.collection_provider' => ['privates', 'api_platform.doctrine.orm.state.collection_provider', 'getApiPlatform_Doctrine_Orm_State_CollectionProviderService', true],
            'ApiPlatform\\Doctrine\\Orm\\State\\ItemProvider' => ['privates', 'api_platform.doctrine.orm.state.item_provider', 'getApiPlatform_Doctrine_Orm_State_ItemProviderService', true],
            'api_platform.doctrine.orm.state.item_provider' => ['privates', 'api_platform.doctrine.orm.state.item_provider', 'getApiPlatform_Doctrine_Orm_State_ItemProviderService', true],
        ], [
            'ApiPlatform\\State\\CreateProvider' => 'ApiPlatform\\State\\CreateProvider',
            'api_platform.state_provider.create' => 'ApiPlatform\\State\\CreateProvider',
            'ApiPlatform\\State\\ObjectProvider' => 'ApiPlatform\\State\\ObjectProvider',
            'api_platform.state_provider.object' => 'ApiPlatform\\State\\ObjectProvider',
            'ApiPlatform\\State\\Provider\\BackedEnumProvider' => 'ApiPlatform\\State\\Provider\\BackedEnumProvider',
            'api_platform.state_provider.backed_enum' => 'ApiPlatform\\State\\Provider\\BackedEnumProvider',
            'api_platform.state.error_provider' => 'ApiPlatform\\State\\ErrorProvider',
            'api_platform.validator.state.error_provider' => 'ApiPlatform\\Symfony\\Validator\\State\\ErrorProvider',
            'ApiPlatform\\OpenApi\\State\\OpenApiProvider' => 'ApiPlatform\\OpenApi\\State\\OpenApiProvider',
            'api_platform.openapi.provider' => 'ApiPlatform\\OpenApi\\State\\OpenApiProvider',
            'ApiPlatform\\Doctrine\\Orm\\State\\CollectionProvider' => 'ApiPlatform\\Doctrine\\Orm\\State\\CollectionProvider',
            'api_platform.doctrine.orm.state.collection_provider' => 'ApiPlatform\\Doctrine\\Orm\\State\\CollectionProvider',
            'ApiPlatform\\Doctrine\\Orm\\State\\ItemProvider' => 'ApiPlatform\\Doctrine\\Orm\\State\\ItemProvider',
            'api_platform.doctrine.orm.state.item_provider' => 'ApiPlatform\\Doctrine\\Orm\\State\\ItemProvider',
        ]));
    }

    /*
     * Gets the private 'api_platform.symfony.iri_converter' shared service.
     *
     * @return \ApiPlatform\Symfony\Routing\IriConverter
     */
    protected static function getApiPlatform_Symfony_IriConverterService($container)
    {
        $a = ($container->privates['api_platform.state_provider.locator'] ?? self::getApiPlatform_StateProvider_LocatorService($container));

        if (isset($container->privates['api_platform.symfony.iri_converter'])) {
            return $container->privates['api_platform.symfony.iri_converter'];
        }
        $b = ($container->privates['api_platform.api.identifiers_extractor'] ?? self::getApiPlatform_Api_IdentifiersExtractorService($container));

        if (isset($container->privates['api_platform.symfony.iri_converter'])) {
            return $container->privates['api_platform.symfony.iri_converter'];
        }
        $c = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.symfony.iri_converter'])) {
            return $container->privates['api_platform.symfony.iri_converter'];
        }
        $d = ($container->privates['api_platform.uri_variables.converter'] ?? self::getApiPlatform_UriVariables_ConverterService($container));

        if (isset($container->privates['api_platform.symfony.iri_converter'])) {
            return $container->privates['api_platform.symfony.iri_converter'];
        }
        $e = ($container->privates['api_platform.metadata.operation.metadata_factory'] ?? self::getApiPlatform_Metadata_Operation_MetadataFactoryService($container));

        if (isset($container->privates['api_platform.symfony.iri_converter'])) {
            return $container->privates['api_platform.symfony.iri_converter'];
        }

        return $container->privates['api_platform.symfony.iri_converter'] = new \ApiPlatform\Symfony\Routing\IriConverter($a, ($container->privates['api_platform.router'] ?? self::getApiPlatform_RouterService($container)), $b, ($container->privates['api_platform.resource_class_resolver'] ?? self::getApiPlatform_ResourceClassResolverService($container)), $c, $d, ($container->privates['api_platform.symfony.iri_converter.skolem'] ?? self::getApiPlatform_Symfony_IriConverter_SkolemService($container)), $e);
    }

    /*
     * Gets the private 'api_platform.symfony.iri_converter.skolem' shared service.
     *
     * @return \ApiPlatform\Symfony\Routing\SkolemIriConverter
     */
    protected static function getApiPlatform_Symfony_IriConverter_SkolemService($container)
    {
        return $container->privates['api_platform.symfony.iri_converter.skolem'] = new \ApiPlatform\Symfony\Routing\SkolemIriConverter(($container->privates['api_platform.router'] ?? self::getApiPlatform_RouterService($container)));
    }

    /*
     * Gets the private 'api_platform.uri_variables.converter' shared service.
     *
     * @return \ApiPlatform\Metadata\UriVariablesConverter
     */
    protected static function getApiPlatform_UriVariables_ConverterService($container)
    {
        $a = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.uri_variables.converter'])) {
            return $container->privates['api_platform.uri_variables.converter'];
        }
        $b = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.uri_variables.converter'])) {
            return $container->privates['api_platform.uri_variables.converter'];
        }

        return $container->privates['api_platform.uri_variables.converter'] = new \ApiPlatform\Metadata\UriVariablesConverter($a, $b, new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['api_platform.symfony.uri_variables.transformer.ulid'] ??= new \ApiPlatform\Symfony\UriVariableTransformer\UlidUriVariableTransformer());
            yield 1 => ($container->privates['api_platform.symfony.uri_variables.transformer.uuid'] ??= new \ApiPlatform\Symfony\UriVariableTransformer\UuidUriVariableTransformer());
            yield 2 => ($container->privates['api_platform.uri_variables.transformer.integer'] ??= new \ApiPlatform\Metadata\UriVariableTransformer\IntegerUriVariableTransformer());
            yield 3 => ($container->privates['api_platform.uri_variables.transformer.date_time'] ??= new \ApiPlatform\Metadata\UriVariableTransformer\DateTimeUriVariableTransformer());
        }, 4));
    }

    /*
     * Gets the private 'api_platform.validator.metadata.resource.metadata_collection_factory.parameter' shared service.
     *
     * @return \ApiPlatform\Validator\Metadata\Resource\Factory\ParameterValidationResourceMetadataCollectionFactory
     */
    protected static function getApiPlatform_Validator_Metadata_Resource_MetadataCollectionFactory_ParameterService($container)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.parameter'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_ParameterService($container));

        if (isset($container->privates['api_platform.validator.metadata.resource.metadata_collection_factory.parameter'])) {
            return $container->privates['api_platform.validator.metadata.resource.metadata_collection_factory.parameter'];
        }
        $b = ($container->privates['api_platform.filter_locator'] ?? self::getApiPlatform_FilterLocatorService($container));

        if (isset($container->privates['api_platform.validator.metadata.resource.metadata_collection_factory.parameter'])) {
            return $container->privates['api_platform.validator.metadata.resource.metadata_collection_factory.parameter'];
        }

        return $container->privates['api_platform.validator.metadata.resource.metadata_collection_factory.parameter'] = new \ApiPlatform\Validator\Metadata\Resource\Factory\ParameterValidationResourceMetadataCollectionFactory($a, $b);
    }

    /*
     * Gets the private 'api_platform.yamlopenapi.encoder' shared service.
     *
     * @return \ApiPlatform\Serializer\YamlEncoder
     */
    protected static function getApiPlatform_Yamlopenapi_EncoderService($container)
    {
        return $container->privates['api_platform.yamlopenapi.encoder'] = new \ApiPlatform\Serializer\YamlEncoder('yamlopenapi', ($container->privates['serializer.encoder.yaml'] ??= new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL, $container->parameters['api_platform.serializer.default_context'])));
    }

    /*
     * Gets the private 'argument_metadata_factory' shared service.
     *
     * @return \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory
     */
    protected static function getArgumentMetadataFactoryService($container)
    {
        return $container->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory();
    }

    /*
     * Gets the private 'argument_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver
     */
    protected static function getArgumentResolverService($container)
    {
        return $container->privates['argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(($container->privates['argument_metadata_factory'] ??= new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.user_value_resolver'] ?? $container->load('getSecurity_UserValueResolverService'));
            yield 1 => ($container->privates['security.security_token_value_resolver'] ?? $container->load('getSecurity_SecurityTokenValueResolverService'));
            yield 2 => ($container->privates['doctrine.orm.entity_value_resolver'] ?? $container->load('getDoctrine_Orm_EntityValueResolverService'));
            yield 3 => ($container->privates['argument_resolver.backed_enum_resolver'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver());
            yield 4 => ($container->privates['argument_resolver.uid'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\UidValueResolver());
            yield 5 => ($container->privates['argument_resolver.datetime'] ?? $container->load('getArgumentResolver_DatetimeService'));
            yield 6 => ($container->privates['argument_resolver.request_attribute'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver());
            yield 7 => ($container->privates['argument_resolver.request'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver());
            yield 8 => ($container->privates['argument_resolver.session'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver());
            yield 9 => ($container->privates['api_platform.argument_resolver.payload'] ?? $container->load('getApiPlatform_ArgumentResolver_PayloadService'));
            yield 10 => ($container->privates['argument_resolver.service'] ?? $container->load('getArgumentResolver_ServiceService'));
            yield 11 => ($container->privates['argument_resolver.default'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver());
            yield 12 => ($container->privates['argument_resolver.variadic'] ??= new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver());
        }, 13), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => ['privates', 'argument_resolver.request_payload', 'getArgumentResolver_RequestPayloadService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => ['privates', 'argument_resolver.query_parameter_value_resolver', 'getArgumentResolver_QueryParameterValueResolverService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => ['privates', 'security.user_value_resolver', 'getSecurity_UserValueResolverService', true],
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => ['privates', 'security.security_token_value_resolver', 'getSecurity_SecurityTokenValueResolverService', true],
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => ['privates', 'doctrine.orm.entity_value_resolver', 'getDoctrine_Orm_EntityValueResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => ['privates', 'argument_resolver.backed_enum_resolver', 'getArgumentResolver_BackedEnumResolverService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\UidValueResolver' => ['privates', 'argument_resolver.uid', 'getArgumentResolver_UidService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => ['privates', 'argument_resolver.datetime', 'getArgumentResolver_DatetimeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => ['privates', 'argument_resolver.request_attribute', 'getArgumentResolver_RequestAttributeService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => ['privates', 'argument_resolver.request', 'getArgumentResolver_RequestService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => ['privates', 'argument_resolver.session', 'getArgumentResolver_SessionService', true],
            'api_platform.argument_resolver.payload' => ['privates', 'api_platform.argument_resolver.payload', 'getApiPlatform_ArgumentResolver_PayloadService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => ['privates', 'argument_resolver.service', 'getArgumentResolver_ServiceService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => ['privates', 'argument_resolver.default', 'getArgumentResolver_DefaultService', true],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => ['privates', 'argument_resolver.variadic', 'getArgumentResolver_VariadicService', true],
        ], [
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver',
            'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver' => 'Symfony\\Component\\Security\\Http\\Controller\\SecurityTokenValueResolver',
            'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver' => 'Symfony\\Bridge\\Doctrine\\ArgumentResolver\\EntityValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\UidValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\UidValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver',
            'api_platform.argument_resolver.payload' => 'ApiPlatform\\Symfony\\Bundle\\ArgumentResolver\\PayloadArgumentResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver',
        ]));
    }

    /*
     * Gets the private 'argument_resolver.request_payload' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver
     */
    protected static function getArgumentResolver_RequestPayloadService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['argument_resolver.request_payload'] = new \ReflectionClass('Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver')->newLazyGhost(static function ($proxy) use ($container) { self::getArgumentResolver_RequestPayloadService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->privates['validator'] ?? self::getValidatorService($container)), NULL, 'validators') && false ?: $lazyLoad);
    }

    /*
     * Gets the private 'cache.doctrine.orm.default.metadata' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\PhpArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_MetadataService($container)
    {
        return $container->privates['cache.doctrine.orm.default.metadata'] = new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter());
    }

    /*
     * Gets the private 'cache.doctrine.orm.default.query' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_QueryService($container)
    {
        return $container->privates['cache.doctrine.orm.default.query'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /*
     * Gets the private 'cache.doctrine.orm.default.result' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Doctrine_Orm_Default_ResultService($container)
    {
        return $container->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter();
    }

    /*
     * Gets the private 'cache.property_access' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_PropertyAccessService($container)
    {
        return $container->privates['cache.property_access'] = \Symfony\Component\PropertyAccess\PropertyAccessor::createCache('ttky8-3OCF', 0, $container->getParameter('container.build_id'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'cache.property_info' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_PropertyInfoService($container)
    {
        return $container->privates['cache.property_info'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('V5oOezu9G8', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'cache.security_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SecurityExpressionLanguageService($container)
    {
        return $container->privates['cache.security_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('3q8vQ9tpK7', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'cache.serializer' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SerializerService($container)
    {
        return $container->privates['cache.serializer'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('02Vrtk4yuG', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'cache.validator' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_ValidatorService($container)
    {
        return $container->privates['cache.validator'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('I3TiqSL-bo', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /*
     * Gets the private 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected static function getConfigCacheFactoryService($container)
    {
        return $container->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory();
    }

    /*
     * Gets the private 'controller.cache_attribute_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener
     */
    protected static function getController_CacheAttributeListenerService($container)
    {
        return $container->privates['controller.cache_attribute_listener'] = new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener();
    }

    /*
     * Gets the private 'controller.is_csrf_token_valid_attribute_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\EventListener\IsCsrfTokenValidAttributeListener
     */
    protected static function getController_IsCsrfTokenValidAttributeListenerService($container)
    {
        return $container->privates['controller.is_csrf_token_valid_attribute_listener'] = new \Symfony\Component\Security\Http\EventListener\IsCsrfTokenValidAttributeListener(($container->privates['security.csrf.token_manager'] ?? self::getSecurity_Csrf_TokenManagerService($container)), ($container->privates['security.is_csrf_token_valid_attribute_expression_language'] ?? self::getSecurity_IsCsrfTokenValidAttributeExpressionLanguageService($container)));
    }

    /*
     * Gets the private 'controller.is_granted_attribute_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener
     */
    protected static function getController_IsGrantedAttributeListenerService($container)
    {
        return $container->privates['controller.is_granted_attribute_listener'] = new \Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener(($container->privates['security.authorization_checker'] ?? self::getSecurity_AuthorizationCheckerService($container)), ($container->privates['security.is_granted_attribute_expression_language'] ?? self::getSecurity_IsGrantedAttributeExpressionLanguageService($container)));
    }

    /*
     * Gets the private 'controller_resolver' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver
     */
    protected static function getControllerResolverService($container)
    {
        $container->privates['controller_resolver'] = $instance = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($container, ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)));

        $instance->allowControllers(['Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController', 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController']);
        $instance->allowControllers(['App\\Kernel', 'App\\Controller\\Api\\V1\\AgencyController', 'App\\Controller\\Api\\V1\\AuditFindingsController', 'App\\Controller\\Api\\V1\\AuditsController', 'App\\Controller\\Api\\V1\\AuthController', 'App\\Controller\\Api\\V1\\BacklinksController', 'App\\Controller\\Api\\V1\\CampaignsController', 'App\\Controller\\Api\\V1\\CitationsController', 'App\\Controller\\Api\\V1\\ClientController', 'App\\Controller\\Api\\V1\\ContentBriefsController', 'App\\Controller\\Api\\V1\\ContentItemsController', 'App\\Controller\\Api\\V1\\FaqsController', 'App\\Controller\\Api\\V1\\InvoicesController', 'App\\Controller\\Api\\V1\\KeywordsController', 'App\\Controller\\Api\\V1\\LeadsController', 'App\\Controller\\Api\\V1\\MediaAssetsController', 'App\\Controller\\Api\\V1\\PackagesController', 'App\\Controller\\Api\\V1\\PagesController', 'App\\Controller\\Api\\V1\\RankingsController', 'App\\Controller\\Api\\V1\\RecommendationsController', 'App\\Controller\\Api\\V1\\ReviewsController', 'App\\Controller\\Api\\V1\\SubscriptionsController', 'App\\Controller\\Api\\V1\\UploadsController', 'App\\Controller\\Api\\V1\\UserController', 'App\\Controller\\Api\\V1\\UserProfileController', 'App\\Controller\\Api\\V1\\WebhooksController', 'App\\Controller\\AuthController', 'Doctrine\\Bundle\\DoctrineBundle\\Controller\\ProfilerController']);

        return $instance;
    }

    /*
     * Gets the private 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected static function getDebug_DebugHandlersListenerService($container)
    {
        return $container->privates['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'));
    }

    /*
     * Gets the private 'doctrine.dbal.connection_expiries' shared service.
     *
     * @return \ArrayObject
     */
    protected static function getDoctrine_Dbal_ConnectionExpiriesService($container)
    {
        return $container->privates['doctrine.dbal.connection_expiries'] = new \ArrayObject();
    }

    /*
     * Gets the private 'doctrine.dbal.connection_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory
     */
    protected static function getDoctrine_Dbal_ConnectionFactoryService($container)
    {
        return $container->privates['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory($container->parameters['doctrine.dbal.connection_factory.types'], ($container->privates['doctrine.dbal.connection_factory.dsn_parser'] ?? self::getDoctrine_Dbal_ConnectionFactory_DsnParserService($container)));
    }

    /*
     * Gets the private 'doctrine.dbal.connection_factory.dsn_parser' shared service.
     *
     * @return \Doctrine\DBAL\Tools\DsnParser
     */
    protected static function getDoctrine_Dbal_ConnectionFactory_DsnParserService($container)
    {
        return $container->privates['doctrine.dbal.connection_factory.dsn_parser'] = new \Doctrine\DBAL\Tools\DsnParser(['db2' => 'ibm_db2', 'mssql' => 'pdo_sqlsrv', 'mysql' => 'pdo_mysql', 'mysql2' => 'pdo_mysql', 'postgres' => 'pdo_pgsql', 'postgresql' => 'pdo_pgsql', 'pgsql' => 'pdo_pgsql', 'sqlite' => 'pdo_sqlite', 'sqlite3' => 'pdo_sqlite']);
    }

    /*
     * Gets the private 'doctrine.dbal.default_connection.configuration' shared service.
     *
     * @return \Doctrine\DBAL\Configuration
     */
    protected static function getDoctrine_Dbal_DefaultConnection_ConfigurationService($container)
    {
        $container->privates['doctrine.dbal.default_connection.configuration'] = $instance = new \Doctrine\DBAL\Configuration();

        $instance->setSchemaManagerFactory(($container->privates['doctrine.dbal.legacy_schema_manager_factory'] ??= new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory()));
        $instance->setSchemaAssetsFilter(($container->privates['doctrine.dbal.default_schema_asset_filter_manager'] ?? self::getDoctrine_Dbal_DefaultSchemaAssetFilterManagerService($container)));
        $instance->setMiddlewares([($container->privates['doctrine.dbal.idle_connection_middleware.default'] ?? self::getDoctrine_Dbal_IdleConnectionMiddleware_DefaultService($container))]);

        return $instance;
    }

    /*
     * Gets the private 'doctrine.dbal.default_connection.event_manager' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\ContainerAwareEventManager
     */
    protected static function getDoctrine_Dbal_DefaultConnection_EventManagerService($container)
    {
        return $container->privates['doctrine.dbal.default_connection.event_manager'] = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineDbalCacheAdapterSchemaListenerService', true],
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => ['privates', 'doctrine.orm.listeners.doctrine_token_provider_schema_listener', 'getDoctrine_Orm_Listeners_DoctrineTokenProviderSchemaListenerService', true],
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => ['privates', 'doctrine.orm.listeners.pdo_session_handler_schema_listener', 'getDoctrine_Orm_Listeners_PdoSessionHandlerSchemaListenerService', true],
            'doctrine.orm.listeners.lock_store_schema_listener' => ['privates', 'doctrine.orm.listeners.lock_store_schema_listener', 'getDoctrine_Orm_Listeners_LockStoreSchemaListenerService', true],
            'doctrine.orm.default_listeners.attach_entity_listeners' => ['privates', 'doctrine.orm.default_listeners.attach_entity_listeners', 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService', true],
        ], [
            'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener' => '?',
            'doctrine.orm.listeners.doctrine_token_provider_schema_listener' => '?',
            'doctrine.orm.listeners.pdo_session_handler_schema_listener' => '?',
            'doctrine.orm.listeners.lock_store_schema_listener' => '?',
            'doctrine.orm.default_listeners.attach_entity_listeners' => '?',
        ]), [[['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.doctrine_token_provider_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.pdo_session_handler_schema_listener'], [['postGenerateSchema'], 'doctrine.orm.listeners.lock_store_schema_listener'], [['loadClassMetadata'], 'doctrine.orm.default_listeners.attach_entity_listeners']]);
    }

    /*
     * Gets the private 'doctrine.dbal.default_regex_schema_filter' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Dbal\RegexSchemaAssetFilter
     */
    protected static function getDoctrine_Dbal_DefaultRegexSchemaFilterService($container)
    {
        return $container->privates['doctrine.dbal.default_regex_schema_filter'] = new \Doctrine\Bundle\DoctrineBundle\Dbal\RegexSchemaAssetFilter('~^(?!pg_stat_statements)~');
    }

    /*
     * Gets the private 'doctrine.dbal.default_schema_asset_filter_manager' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Dbal\SchemaAssetsFilterManager
     */
    protected static function getDoctrine_Dbal_DefaultSchemaAssetFilterManagerService($container)
    {
        return $container->privates['doctrine.dbal.default_schema_asset_filter_manager'] = new \Doctrine\Bundle\DoctrineBundle\Dbal\SchemaAssetsFilterManager([($container->privates['doctrine.dbal.default_regex_schema_filter'] ??= new \Doctrine\Bundle\DoctrineBundle\Dbal\RegexSchemaAssetFilter('~^(?!pg_stat_statements)~')), ($container->privates['doctrine_migrations.schema_filter_listener'] ??= new \Doctrine\Bundle\MigrationsBundle\EventListener\SchemaFilterListener('doctrine_migration_versions'))]);
    }

    /*
     * Gets the private 'doctrine.dbal.idle_connection_listener' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Middleware\IdleConnection\Listener
     */
    protected static function getDoctrine_Dbal_IdleConnectionListenerService($container)
    {
        return $container->privates['doctrine.dbal.idle_connection_listener'] = new \Symfony\Bridge\Doctrine\Middleware\IdleConnection\Listener(($container->privates['doctrine.dbal.connection_expiries'] ??= new \ArrayObject()), $container);
    }

    /*
     * Gets the private 'doctrine.dbal.idle_connection_middleware.default' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Middleware\IdleConnectionMiddleware
     */
    protected static function getDoctrine_Dbal_IdleConnectionMiddleware_DefaultService($container)
    {
        $container->privates['doctrine.dbal.idle_connection_middleware.default'] = $instance = new \Doctrine\Bundle\DoctrineBundle\Middleware\IdleConnectionMiddleware(($container->privates['doctrine.dbal.connection_expiries'] ??= new \ArrayObject()), ['default' => 600]);

        $instance->setConnectionName('default');

        return $instance;
    }

    /*
     * Gets the private 'doctrine.dbal.legacy_schema_manager_factory' shared service.
     *
     * @return \Doctrine\DBAL\Schema\LegacySchemaManagerFactory
     */
    protected static function getDoctrine_Dbal_LegacySchemaManagerFactoryService($container)
    {
        return $container->privates['doctrine.dbal.legacy_schema_manager_factory'] = new \Doctrine\DBAL\Schema\LegacySchemaManagerFactory();
    }

    /*
     * Gets the private 'doctrine.orm.container_repository_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory
     */
    protected static function getDoctrine_Orm_ContainerRepositoryFactoryService($container)
    {
        return $container->privates['doctrine.orm.container_repository_factory'] = new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'App\\Repository\\AgencyRepository' => ['privates', 'App\\Repository\\AgencyRepository', 'getAgencyRepositoryService', true],
            'App\\Repository\\AuditCompetitorRepository' => ['privates', 'App\\Repository\\AuditCompetitorRepository', 'getAuditCompetitorRepositoryService', true],
            'App\\Repository\\AuditConversionGoalRepository' => ['privates', 'App\\Repository\\AuditConversionGoalRepository', 'getAuditConversionGoalRepositoryService', true],
            'App\\Repository\\AuditFindingRepository' => ['privates', 'App\\Repository\\AuditFindingRepository', 'getAuditFindingRepositoryService', true],
            'App\\Repository\\AuditIntakeRepository' => ['privates', 'App\\Repository\\AuditIntakeRepository', 'getAuditIntakeRepositoryService', true],
            'App\\Repository\\AuditKeywordRepository' => ['privates', 'App\\Repository\\AuditKeywordRepository', 'getAuditKeywordRepositoryService', true],
            'App\\Repository\\AuditRunRepository' => ['privates', 'App\\Repository\\AuditRunRepository', 'getAuditRunRepositoryService', true],
            'App\\Repository\\BacklinkRepository' => ['privates', 'App\\Repository\\BacklinkRepository', 'getBacklinkRepositoryService', true],
            'App\\Repository\\CampaignRepository' => ['privates', 'App\\Repository\\CampaignRepository', 'getCampaignRepositoryService', true],
            'App\\Repository\\CaseStudyRepository' => ['privates', 'App\\Repository\\CaseStudyRepository', 'getCaseStudyRepositoryService', true],
            'App\\Repository\\CitationRepository' => ['privates', 'App\\Repository\\CitationRepository', 'getCitationRepositoryService', true],
            'App\\Repository\\ClientRepository' => ['privates', 'App\\Repository\\ClientRepository', 'getClientRepositoryService', true],
            'App\\Repository\\ContentBriefRepository' => ['privates', 'App\\Repository\\ContentBriefRepository', 'getContentBriefRepositoryService', true],
            'App\\Repository\\ContentItemRepository' => ['privates', 'App\\Repository\\ContentItemRepository', 'getContentItemRepositoryService', true],
            'App\\Repository\\FaqRepository' => ['privates', 'App\\Repository\\FaqRepository', 'getFaqRepositoryService', true],
            'App\\Repository\\InvoiceRepository' => ['privates', 'App\\Repository\\InvoiceRepository', 'getInvoiceRepositoryService', true],
            'App\\Repository\\KeywordRankingRepository' => ['privates', 'App\\Repository\\KeywordRankingRepository', 'getKeywordRankingRepositoryService', true],
            'App\\Repository\\KeywordRepository' => ['privates', 'App\\Repository\\KeywordRepository', 'getKeywordRepositoryService', true],
            'App\\Repository\\LeadRepository' => ['privates', 'App\\Repository\\LeadRepository', 'getLeadRepositoryService', true],
            'App\\Repository\\MediaAssetRepository' => ['privates', 'App\\Repository\\MediaAssetRepository', 'getMediaAssetRepositoryService', true],
            'App\\Repository\\OAuthConnectionRepository' => ['privates', 'App\\Repository\\OAuthConnectionRepository', 'getOAuthConnectionRepositoryService', true],
            'App\\Repository\\OAuthTokenRepository' => ['privates', 'App\\Repository\\OAuthTokenRepository', 'getOAuthTokenRepositoryService', true],
            'App\\Repository\\OrganizationRepository' => ['privates', 'App\\Repository\\OrganizationRepository', 'getOrganizationRepositoryService', true],
            'App\\Repository\\PackageRepository' => ['privates', 'App\\Repository\\PackageRepository', 'getPackageRepositoryService', true],
            'App\\Repository\\PageRepository' => ['privates', 'App\\Repository\\PageRepository', 'getPageRepositoryService', true],
            'App\\Repository\\RecommendationRepository' => ['privates', 'App\\Repository\\RecommendationRepository', 'getRecommendationRepositoryService', true],
            'App\\Repository\\ReviewRepository' => ['privates', 'App\\Repository\\ReviewRepository', 'getReviewRepositoryService', true],
            'App\\Repository\\SubscriptionRepository' => ['privates', 'App\\Repository\\SubscriptionRepository', 'getSubscriptionRepositoryService', true],
            'App\\Repository\\TenantRepository' => ['privates', 'App\\Repository\\TenantRepository', 'getTenantRepositoryService', true],
            'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
        ], [
            'App\\Repository\\AgencyRepository' => '?',
            'App\\Repository\\AuditCompetitorRepository' => '?',
            'App\\Repository\\AuditConversionGoalRepository' => '?',
            'App\\Repository\\AuditFindingRepository' => '?',
            'App\\Repository\\AuditIntakeRepository' => '?',
            'App\\Repository\\AuditKeywordRepository' => '?',
            'App\\Repository\\AuditRunRepository' => '?',
            'App\\Repository\\BacklinkRepository' => '?',
            'App\\Repository\\CampaignRepository' => '?',
            'App\\Repository\\CaseStudyRepository' => '?',
            'App\\Repository\\CitationRepository' => '?',
            'App\\Repository\\ClientRepository' => '?',
            'App\\Repository\\ContentBriefRepository' => '?',
            'App\\Repository\\ContentItemRepository' => '?',
            'App\\Repository\\FaqRepository' => '?',
            'App\\Repository\\InvoiceRepository' => '?',
            'App\\Repository\\KeywordRankingRepository' => '?',
            'App\\Repository\\KeywordRepository' => '?',
            'App\\Repository\\LeadRepository' => '?',
            'App\\Repository\\MediaAssetRepository' => '?',
            'App\\Repository\\OAuthConnectionRepository' => '?',
            'App\\Repository\\OAuthTokenRepository' => '?',
            'App\\Repository\\OrganizationRepository' => '?',
            'App\\Repository\\PackageRepository' => '?',
            'App\\Repository\\PageRepository' => '?',
            'App\\Repository\\RecommendationRepository' => '?',
            'App\\Repository\\ReviewRepository' => '?',
            'App\\Repository\\SubscriptionRepository' => '?',
            'App\\Repository\\TenantRepository' => '?',
            'App\\Repository\\UserRepository' => '?',
        ]));
    }

    /*
     * Gets the private 'doctrine.orm.default_attribute_metadata_driver' shared service.
     *
     * @return \Doctrine\ORM\Mapping\Driver\AttributeDriver
     */
    protected static function getDoctrine_Orm_DefaultAttributeMetadataDriverService($container)
    {
        return $container->privates['doctrine.orm.default_attribute_metadata_driver'] = new \Doctrine\ORM\Mapping\Driver\AttributeDriver([(\dirname(__DIR__, 4).'/src/Entity')], true);
    }

    /*
     * Gets the private 'doctrine.orm.default_configuration' shared service.
     *
     * @return \Doctrine\ORM\Configuration
     */
    protected static function getDoctrine_Orm_DefaultConfigurationService($container)
    {
        $container->privates['doctrine.orm.default_configuration'] = $instance = new \Doctrine\ORM\Configuration();

        $instance->setEntityNamespaces(['App' => 'App\\Entity']);
        $instance->setMetadataCache(($container->privates['cache.doctrine.orm.default.metadata'] ?? self::getCache_Doctrine_Orm_Default_MetadataService($container)));
        $instance->setQueryCache(($container->privates['cache.doctrine.orm.default.query'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setResultCache(($container->privates['cache.doctrine.orm.default.result'] ??= new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $instance->setMetadataDriverImpl(($container->privates['.doctrine.orm.default_metadata_driver'] ?? self::get_Doctrine_Orm_DefaultMetadataDriverService($container)));
        $instance->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $instance->setProxyNamespace('Proxies');
        $instance->setAutoGenerateProxyClasses(true);
        $instance->setSchemaIgnoreClasses([]);
        $instance->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $instance->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $instance->setNamingStrategy(($container->privates['doctrine.orm.naming_strategy.underscore_number_aware'] ??= new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true)));
        $instance->setQuoteStrategy(($container->privates['doctrine.orm.quote_strategy.default'] ??= new \Doctrine\ORM\Mapping\DefaultQuoteStrategy()));
        $instance->setTypedFieldMapper(($container->privates['doctrine.orm.typed_field_mapper.default'] ??= new \Doctrine\ORM\Mapping\DefaultTypedFieldMapper()));
        $instance->setEntityListenerResolver(($container->privates['doctrine.orm.default_entity_listener_resolver'] ??= new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container)));
        $instance->setLazyGhostObjectEnabled(true);
        $instance->setIdentityGenerationPreferences(['Doctrine\\DBAL\\Platforms\\PostgreSQLPlatform' => 4]);
        $instance->enableNativeLazyObjects(false);
        $instance->setRepositoryFactory(($container->privates['doctrine.orm.container_repository_factory'] ?? self::getDoctrine_Orm_ContainerRepositoryFactoryService($container)));
        $instance->addFilter('tenant_filter', 'App\\MultiTenancy\\TenantFilter');

        return $instance;
    }

    /*
     * Gets the private 'doctrine.orm.default_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver
     */
    protected static function getDoctrine_Orm_DefaultEntityListenerResolverService($container)
    {
        return $container->privates['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container);
    }

    /*
     * Gets the private 'doctrine.orm.default_entity_manager.validator_loader' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineLoader
     */
    protected static function getDoctrine_Orm_DefaultEntityManager_ValidatorLoaderService($container)
    {
        return $container->privates['doctrine.orm.default_entity_manager.validator_loader'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineLoader(($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container)), NULL);
    }

    /*
     * Gets the private 'doctrine.orm.default_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected static function getDoctrine_Orm_DefaultManagerConfiguratorService($container)
    {
        return $container->privates['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []);
    }

    /*
     * Gets the private 'doctrine.orm.naming_strategy.underscore_number_aware' shared service.
     *
     * @return \Doctrine\ORM\Mapping\UnderscoreNamingStrategy
     */
    protected static function getDoctrine_Orm_NamingStrategy_UnderscoreNumberAwareService($container)
    {
        return $container->privates['doctrine.orm.naming_strategy.underscore_number_aware'] = new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true);
    }

    /*
     * Gets the private 'doctrine.orm.quote_strategy.default' shared service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultQuoteStrategy
     */
    protected static function getDoctrine_Orm_QuoteStrategy_DefaultService($container)
    {
        return $container->privates['doctrine.orm.quote_strategy.default'] = new \Doctrine\ORM\Mapping\DefaultQuoteStrategy();
    }

    /*
     * Gets the private 'doctrine.orm.typed_field_mapper.default' shared service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultTypedFieldMapper
     */
    protected static function getDoctrine_Orm_TypedFieldMapper_DefaultService($container)
    {
        return $container->privates['doctrine.orm.typed_field_mapper.default'] = new \Doctrine\ORM\Mapping\DefaultTypedFieldMapper();
    }

    /*
     * Gets the private 'doctrine.orm.validator_initializer' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer
     */
    protected static function getDoctrine_Orm_ValidatorInitializerService($container)
    {
        return $container->privates['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(($container->services['doctrine'] ?? self::getDoctrineService($container)));
    }

    /*
     * Gets the private 'doctrine_migrations.schema_filter_listener' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\EventListener\SchemaFilterListener
     */
    protected static function getDoctrineMigrations_SchemaFilterListenerService($container)
    {
        return $container->privates['doctrine_migrations.schema_filter_listener'] = new \Doctrine\Bundle\MigrationsBundle\EventListener\SchemaFilterListener('doctrine_migration_versions');
    }

    /*
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected static function getExceptionListenerService($container)
    {
        return $container->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)), false, [], []);
    }

    /*
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected static function getLocaleAwareListenerService($container)
    {
        return $container->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger('en'));
        }, 1), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected static function getLocaleListenerService($container)
    {
        return $container->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'en', ($container->services['router'] ?? self::getRouterService($container)), false, []);
    }

    /*
     * Gets the private 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\StreamHandler
     */
    protected static function getMonolog_Handler_MainService($container)
    {
        $container->privates['monolog.handler.main'] = $instance = new \Monolog\Handler\StreamHandler((\dirname(__DIR__, 3).'/log/test.log'), 'debug', true, NULL, false);

        $instance->pushProcessor(($container->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_LoggerService($container)
    {
        $container->privates['monolog.logger'] = $instance = new \Monolog\Logger('app');

        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.cache' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_CacheService($container)
    {
        $container->privates['monolog.logger.cache'] = $instance = new \Monolog\Logger('cache');

        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.request' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_RequestService($container)
    {
        $container->privates['monolog.logger.request'] = $instance = new \Monolog\Logger('request');

        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.logger.router' shared service.
     *
     * @return \Monolog\Logger
     */
    protected static function getMonolog_Logger_RouterService($container)
    {
        $container->privates['monolog.logger.router'] = $instance = new \Monolog\Logger('router');

        $instance->pushHandler(($container->privates['monolog.handler.main'] ?? self::getMonolog_Handler_MainService($container)));

        return $instance;
    }

    /*
     * Gets the private 'monolog.processor.psr_log_message' shared service.
     *
     * @return \Monolog\Processor\PsrLogMessageProcessor
     */
    protected static function getMonolog_Processor_PsrLogMessageService($container)
    {
        return $container->privates['monolog.processor.psr_log_message'] = new \Monolog\Processor\PsrLogMessageProcessor();
    }

    /*
     * Gets the private 'nelmio_cors.cacheable_response_vary_listener' shared service.
     *
     * @return \Nelmio\CorsBundle\EventListener\CacheableResponseVaryListener
     */
    protected static function getNelmioCors_CacheableResponseVaryListenerService($container)
    {
        return $container->privates['nelmio_cors.cacheable_response_vary_listener'] = new \Nelmio\CorsBundle\EventListener\CacheableResponseVaryListener();
    }

    /*
     * Gets the private 'nelmio_cors.cors_listener' shared service.
     *
     * @return \Nelmio\CorsBundle\EventListener\CorsListener
     */
    protected static function getNelmioCors_CorsListenerService($container)
    {
        return $container->privates['nelmio_cors.cors_listener'] = new \Nelmio\CorsBundle\EventListener\CorsListener(($container->privates['nelmio_cors.options_resolver'] ?? self::getNelmioCors_OptionsResolverService($container)));
    }

    /*
     * Gets the private 'nelmio_cors.options_provider.config' shared service.
     *
     * @return \Nelmio\CorsBundle\Options\ConfigProvider
     */
    protected static function getNelmioCors_OptionsProvider_ConfigService($container)
    {
        return $container->privates['nelmio_cors.options_provider.config'] = new \Nelmio\CorsBundle\Options\ConfigProvider($container->parameters['nelmio_cors.map'], $container->getParameter('nelmio_cors.defaults'));
    }

    /*
     * Gets the private 'nelmio_cors.options_resolver' shared service.
     *
     * @return \Nelmio\CorsBundle\Options\Resolver
     */
    protected static function getNelmioCors_OptionsResolverService($container)
    {
        return $container->privates['nelmio_cors.options_resolver'] = new \Nelmio\CorsBundle\Options\Resolver([($container->privates['nelmio_cors.options_provider.config'] ?? self::getNelmioCors_OptionsProvider_ConfigService($container))]);
    }

    /*
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected static function getParameterBagService($container)
    {
        return $container->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container);
    }

    /*
     * Gets the private 'property_accessor' shared service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor
     */
    protected static function getPropertyAccessorService($container)
    {
        $a = ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());

        return $container->privates['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(3, 2, ($container->privates['cache.property_access'] ?? self::getCache_PropertyAccessService($container)), $a, $a);
    }

    /*
     * Gets the private 'property_info.cache' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoCacheExtractor
     */
    protected static function getPropertyInfo_CacheService($container)
    {
        return $container->privates['property_info.cache'] = new \Symfony\Component\PropertyInfo\PropertyInfoCacheExtractor(($container->privates['property_info.cache.inner'] ?? self::getPropertyInfo_Cache_InnerService($container)), ($container->privates['cache.property_info'] ?? self::getCache_PropertyInfoService($container)));
    }

    /*
     * Gets the private 'property_info.cache.inner' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoExtractor
     */
    protected static function getPropertyInfo_Cache_InnerService($container)
    {
        return $container->privates['property_info.cache.inner'] = new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.serializer_extractor'] ?? $container->load('getPropertyInfo_SerializerExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
            yield 2 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
        }, 3), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.constructor_extractor'] ?? $container->load('getPropertyInfo_ConstructorExtractorService'));
            yield 1 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 2 => ($container->privates['property_info.phpstan_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\PhpStanExtractor());
            yield 3 => ($container->privates['property_info.php_doc_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor());
            yield 4 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 5), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.php_doc_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor());
        }, 1), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $container->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService'));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1));
    }

    /*
     * Gets the private 'property_info.reflection_extractor' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor
     */
    protected static function getPropertyInfo_ReflectionExtractorService($container)
    {
        return $container->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor();
    }

    /*
     * Gets the private 'response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener
     */
    protected static function getResponseListenerService($container)
    {
        return $container->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false);
    }

    /*
     * Gets the private 'router.expression_language_provider' shared service.
     *
     * @return \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider
     */
    protected static function getRouter_ExpressionLanguageProviderService($container)
    {
        return $container->privates['router.expression_language_provider'] = new \Symfony\Component\Routing\Matcher\ExpressionLanguageProvider(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'env' => ['privates', 'container.getenv', 'getContainer_GetenvService', true],
            'service' => ['services', 'container.get_routing_condition_service', 'getContainer_GetRoutingConditionServiceService', true],
        ], [
            'env' => 'Closure',
            'service' => 'Closure',
        ]));
    }

    /*
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected static function getRouter_RequestContextService($container)
    {
        $container->privates['router.request_context'] = $instance = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);

        $instance->setParameter('_functions', ($container->privates['router.expression_language_provider'] ?? self::getRouter_ExpressionLanguageProviderService($container)));

        return $instance;
    }

    /*
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected static function getRouterListenerService($container)
    {
        return $container->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($container->services['router'] ?? self::getRouterService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)), \dirname(__DIR__, 4), false);
    }

    /*
     * Gets the private 'security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected static function getSecurity_Access_DecisionManagerService($container)
    {
        return $container->privates['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.access.authenticated_voter'] ?? $container->load('getSecurity_Access_AuthenticatedVoterService'));
            yield 1 => ($container->privates['security.access.simple_role_voter'] ??= new \Symfony\Component\Security\Core\Authorization\Voter\RoleVoter());
            yield 2 => ($container->privates['security.access.expression_voter'] ?? $container->load('getSecurity_Access_ExpressionVoterService'));
            yield 3 => ($container->privates['security.access.closure_voter'] ?? $container->load('getSecurity_Access_ClosureVoterService'));
        }, 4), new \Symfony\Component\Security\Core\Authorization\Strategy\AffirmativeStrategy(false));
    }

    /*
     * Gets the private 'security.authentication.trust_resolver' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver
     */
    protected static function getSecurity_Authentication_TrustResolverService($container)
    {
        return $container->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver();
    }

    /*
     * Gets the private 'security.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected static function getSecurity_AuthorizationCheckerService($container)
    {
        $a = ($container->privates['security.access.decision_manager'] ?? self::getSecurity_Access_DecisionManagerService($container));

        if (isset($container->privates['security.authorization_checker'])) {
            return $container->privates['security.authorization_checker'];
        }

        return $container->privates['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $a);
    }

    /*
     * Gets the private 'security.csrf.token_generator' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator
     */
    protected static function getSecurity_Csrf_TokenGeneratorService($container)
    {
        return $container->privates['security.csrf.token_generator'] = new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator();
    }

    /*
     * Gets the private 'security.csrf.token_manager' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager
     */
    protected static function getSecurity_Csrf_TokenManagerService($container)
    {
        return $container->privates['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(($container->privates['security.csrf.token_generator'] ??= new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator()), ($container->privates['security.csrf.token_storage'] ?? self::getSecurity_Csrf_TokenStorageService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'security.csrf.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage
     */
    protected static function getSecurity_Csrf_TokenStorageService($container)
    {
        return $container->privates['security.csrf.token_storage'] = new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /*
     * Gets the private 'security.expression_language' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\ExpressionLanguage
     */
    protected static function getSecurity_ExpressionLanguageService($container)
    {
        $container->privates['security.expression_language'] = $instance = new \Symfony\Component\Security\Core\Authorization\ExpressionLanguage(($container->privates['cache.security_expression_language'] ?? self::getCache_SecurityExpressionLanguageService($container)));

        $instance->registerProvider(($container->privates['api_platform.security.expression_language_provider'] ??= new \ApiPlatform\Symfony\Security\Core\Authorization\ExpressionLanguageProvider()));

        return $instance;
    }

    /*
     * Gets the private 'security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener
     */
    protected static function getSecurity_FirewallService($container)
    {
        $a = ($container->privates['security.firewall.map'] ?? self::getSecurity_Firewall_MapService($container));

        if (isset($container->privates['security.firewall'])) {
            return $container->privates['security.firewall'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['security.firewall'])) {
            return $container->privates['security.firewall'];
        }

        return $container->privates['security.firewall'] = new \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener($a, $b, ($container->privates['security.logout_url_generator'] ?? self::getSecurity_LogoutUrlGeneratorService($container)));
    }

    /*
     * Gets the private 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected static function getSecurity_Firewall_MapService($container)
    {
        $a = ($container->privates['.service_locator.shxE9gp'] ?? self::get_ServiceLocator_ShxE9gpService($container));

        if (isset($container->privates['security.firewall.map'])) {
            return $container->privates['security.firewall.map'];
        }

        return $container->privates['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap($a, new RewindableGenerator(function () use ($container) {
            yield 'security.firewall.map.context.dev' => ($container->privates['.security.request_matcher.gOpgIHx'] ?? $container->load('get_Security_RequestMatcher_GOpgIHxService'));
            yield 'security.firewall.map.context.login' => ($container->privates['.security.request_matcher.0hnHUuT'] ?? $container->load('get_Security_RequestMatcher_0hnHUuTService'));
            yield 'security.firewall.map.context.public_api' => ($container->privates['.security.request_matcher.7W5bBcb'] ?? $container->load('get_Security_RequestMatcher_7W5bBcbService'));
            yield 'security.firewall.map.context.google_oauth' => ($container->privates['.security.request_matcher.ER1XpfU'] ?? $container->load('get_Security_RequestMatcher_ER1XpfUService'));
            yield 'security.firewall.map.context.microsoft_oauth' => ($container->privates['.security.request_matcher.__yH6K8'] ?? $container->load('get_Security_RequestMatcher_YH6K8Service'));
            yield 'security.firewall.map.context.api' => ($container->privates['.security.request_matcher.NaFk5J1'] ?? $container->load('get_Security_RequestMatcher_NaFk5J1Service'));
        }, 6));
    }

    /*
     * Gets the private 'security.is_csrf_token_valid_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage
     */
    protected static function getSecurity_IsCsrfTokenValidAttributeExpressionLanguageService($container)
    {
        return $container->privates['security.is_csrf_token_valid_attribute_expression_language'] = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage(($container->services['cache.security_is_csrf_token_valid_attribute_expression_language'] ?? self::getCache_SecurityIsCsrfTokenValidAttributeExpressionLanguageService($container)));
    }

    /*
     * Gets the private 'security.is_granted_attribute_expression_language' shared service.
     *
     * @return \Symfony\Component\ExpressionLanguage\ExpressionLanguage
     */
    protected static function getSecurity_IsGrantedAttributeExpressionLanguageService($container)
    {
        return $container->privates['security.is_granted_attribute_expression_language'] = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage(($container->services['cache.security_is_granted_attribute_expression_language'] ?? self::getCache_SecurityIsGrantedAttributeExpressionLanguageService($container)));
    }

    /*
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected static function getSecurity_LogoutUrlGeneratorService($container)
    {
        $a = ($container->services['router'] ?? self::getRouterService($container));

        if (isset($container->privates['security.logout_url_generator'])) {
            return $container->privates['security.logout_url_generator'];
        }

        return $container->privates['security.logout_url_generator'] = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a, ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)));
    }

    /*
     * Gets the private 'security.role_hierarchy' shared service.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy
     */
    protected static function getSecurity_RoleHierarchyService($container)
    {
        return $container->privates['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy([]);
    }

    /*
     * Gets the private 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage
     */
    protected static function getSecurity_TokenStorageService($container)
    {
        return $container->privates['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage(($container->privates['security.untracked_token_storage'] ??= new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage()), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
        ], [
            'request_stack' => '?',
        ]));
    }

    /*
     * Gets the private 'security.untracked_token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage
     */
    protected static function getSecurity_UntrackedTokenStorageService($container)
    {
        return $container->privates['security.untracked_token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /*
     * Gets the private 'serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected static function getSerializerService($container)
    {
        $a = ($container->privates['api_platform.jsonld.normalizer.validation_exception'] ?? self::getApiPlatform_Jsonld_Normalizer_ValidationExceptionService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $b = ($container->privates['api_platform.hydra.normalizer.documentation'] ?? self::getApiPlatform_Hydra_Normalizer_DocumentationService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $c = ($container->privates['api_platform.hydra.normalizer.entrypoint'] ?? self::getApiPlatform_Hydra_Normalizer_EntrypointService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $d = ($container->privates['api_platform.problem.normalizer.validation_exception'] ?? self::getApiPlatform_Problem_Normalizer_ValidationExceptionService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $e = ($container->privates['api_platform.jsonld.normalizer.error'] ?? self::getApiPlatform_Jsonld_Normalizer_ErrorService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $f = ($container->privates['api_platform.jsonld.normalizer.item'] ?? self::getApiPlatform_Jsonld_Normalizer_ItemService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $g = ($container->privates['api_platform.serializer.normalizer.item'] ?? self::getApiPlatform_Serializer_Normalizer_ItemService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $h = ($container->privates['api_platform.hydra.normalizer.collection_filters'] ?? self::getApiPlatform_Hydra_Normalizer_CollectionFiltersService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $i = ($container->privates['api_platform.jsonld.normalizer.object'] ?? self::getApiPlatform_Jsonld_Normalizer_ObjectService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $j = ($container->privates['api_platform.openapi.normalizer.legacy'] ?? self::getApiPlatform_Openapi_Normalizer_LegacyService($container));

        return $container->privates['serializer'] = new \Symfony\Component\Serializer\Serializer([($container->privates['serializer.denormalizer.unwrapping'] ?? self::getSerializer_Denormalizer_UnwrappingService($container)), $j, $j, ($container->privates['api_platform.normalizer.constraint_violation_list'] ?? self::getApiPlatform_Normalizer_ConstraintViolationListService($container)), ($container->privates['api_platform.hydra.normalizer.constraint_violation_list'] ?? self::getApiPlatform_Hydra_Normalizer_ConstraintViolationListService($container)), $j, $a, $b, $c, $d, $e, ($container->privates['serializer.normalizer.problem'] ??= new \Symfony\Component\Serializer\Normalizer\ProblemNormalizer(false, $container->parameters['api_platform.serializer.default_context'], NULL)), ($container->privates['serializer.normalizer.uid'] ??= new \Symfony\Component\Serializer\Normalizer\UidNormalizer($container->parameters['api_platform.serializer.default_context'])), $f, $g, ($container->privates['serializer.normalizer.datetime'] ??= new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer($container->parameters['api_platform.serializer.default_context'])), ($container->privates['serializer.normalizer.constraint_violation_list'] ?? self::getSerializer_Normalizer_ConstraintViolationListService($container)), ($container->privates['serializer.normalizer.datetimezone'] ??= new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer()), ($container->privates['serializer.normalizer.dateinterval'] ??= new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer($container->parameters['api_platform.serializer.default_context'])), ($container->privates['serializer.normalizer.form_error'] ??= new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer()), ($container->privates['serializer.normalizer.backed_enum'] ??= new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer()), ($container->privates['serializer.normalizer.number'] ??= new \Symfony\Component\Serializer\Normalizer\NumberNormalizer()), ($container->privates['serializer.normalizer.data_uri'] ??= new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(NULL)), ($container->privates['serializer.normalizer.json_serializable'] ??= new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL, $container->parameters['api_platform.serializer.default_context'])), $h, ($container->privates['serializer.denormalizer.array'] ??= new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer()), $i, ($container->privates['serializer.normalizer.object'] ?? self::getSerializer_Normalizer_ObjectService($container))], [($container->privates['serializer.encoder.xml'] ??= new \Symfony\Component\Serializer\Encoder\XmlEncoder($container->parameters['api_platform.serializer.default_context'])), ($container->privates['serializer.encoder.json'] ??= new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL, $container->parameters['api_platform.serializer.default_context'])), ($container->privates['serializer.encoder.yaml'] ??= new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL, $container->parameters['api_platform.serializer.default_context'])), ($container->privates['serializer.encoder.csv'] ??= new \Symfony\Component\Serializer\Encoder\CsvEncoder($container->parameters['api_platform.serializer.default_context'])), ($container->privates['api_platform.jsonopenapi.encoder'] ??= new \ApiPlatform\Serializer\JsonEncoder('jsonopenapi', NULL)), ($container->privates['api_platform.yamlopenapi.encoder'] ?? self::getApiPlatform_Yamlopenapi_EncoderService($container)), ($container->privates['api_platform.jsonld.encoder'] ??= new \ApiPlatform\Serializer\JsonEncoder('jsonld', NULL)), ($container->privates['api_platform.problem.encoder'] ??= new \ApiPlatform\Serializer\JsonEncoder('jsonproblem'))], $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'serializer.denormalizer.array' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer
     */
    protected static function getSerializer_Denormalizer_ArrayService($container)
    {
        return $container->privates['serializer.denormalizer.array'] = new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer();
    }

    /*
     * Gets the private 'serializer.denormalizer.unwrapping' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer
     */
    protected static function getSerializer_Denormalizer_UnwrappingService($container)
    {
        return $container->privates['serializer.denormalizer.unwrapping'] = new \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer(($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)));
    }

    /*
     * Gets the private 'serializer.encoder.csv' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\CsvEncoder
     */
    protected static function getSerializer_Encoder_CsvService($container)
    {
        return $container->privates['serializer.encoder.csv'] = new \Symfony\Component\Serializer\Encoder\CsvEncoder($container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'serializer.encoder.json' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\JsonEncoder
     */
    protected static function getSerializer_Encoder_JsonService($container)
    {
        return $container->privates['serializer.encoder.json'] = new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL, $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'serializer.encoder.xml' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\XmlEncoder
     */
    protected static function getSerializer_Encoder_XmlService($container)
    {
        return $container->privates['serializer.encoder.xml'] = new \Symfony\Component\Serializer\Encoder\XmlEncoder($container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'serializer.encoder.yaml' shared service.
     *
     * @return \Symfony\Component\Serializer\Encoder\YamlEncoder
     */
    protected static function getSerializer_Encoder_YamlService($container)
    {
        return $container->privates['serializer.encoder.yaml'] = new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL, $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'serializer.mapping.cache.symfony' shared service.
     *
     * @return \Psr\Cache\CacheItemPoolInterface
     */
    protected static function getSerializer_Mapping_Cache_SymfonyService($container)
    {
        return $container->privates['serializer.mapping.cache.symfony'] = \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($container->targetDir.''.'/serialization.php'), ($container->privates['cache.serializer'] ?? self::getCache_SerializerService($container)));
    }

    /*
     * Gets the private 'serializer.mapping.cache_class_metadata_factory' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\CacheClassMetadataFactory
     */
    protected static function getSerializer_Mapping_CacheClassMetadataFactoryService($container)
    {
        return $container->privates['serializer.mapping.cache_class_metadata_factory'] = new \Symfony\Component\Serializer\Mapping\Factory\CacheClassMetadataFactory(($container->privates['serializer.mapping.cache_class_metadata_factory.inner'] ?? self::getSerializer_Mapping_CacheClassMetadataFactory_InnerService($container)), ($container->privates['serializer.mapping.cache.symfony'] ?? self::getSerializer_Mapping_Cache_SymfonyService($container)));
    }

    /*
     * Gets the private 'serializer.mapping.cache_class_metadata_factory.inner' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory
     */
    protected static function getSerializer_Mapping_CacheClassMetadataFactory_InnerService($container)
    {
        return $container->privates['serializer.mapping.cache_class_metadata_factory.inner'] = new \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory(($container->privates['serializer.mapping.chain_loader'] ?? self::getSerializer_Mapping_ChainLoaderService($container)));
    }

    /*
     * Gets the private 'serializer.mapping.chain_loader' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Loader\LoaderChain
     */
    protected static function getSerializer_Mapping_ChainLoaderService($container)
    {
        return $container->privates['serializer.mapping.chain_loader'] = new \Symfony\Component\Serializer\Mapping\Loader\LoaderChain([new \Symfony\Component\Serializer\Mapping\Loader\AttributeLoader()]);
    }

    /*
     * Gets the private 'serializer.mapping.class_discriminator_resolver' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata
     */
    protected static function getSerializer_Mapping_ClassDiscriminatorResolverService($container)
    {
        return $container->privates['serializer.mapping.class_discriminator_resolver'] = new \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata(($container->privates['api_platform.serializer.mapping.cache_class_metadata_factory'] ?? self::getApiPlatform_Serializer_Mapping_CacheClassMetadataFactoryService($container)));
    }

    /*
     * Gets the private 'serializer.name_converter.metadata_aware' shared service.
     *
     * @return \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter
     */
    protected static function getSerializer_NameConverter_MetadataAwareService($container)
    {
        return $container->privates['serializer.name_converter.metadata_aware'] = new \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter(($container->privates['api_platform.serializer.mapping.cache_class_metadata_factory'] ?? self::getApiPlatform_Serializer_Mapping_CacheClassMetadataFactoryService($container)));
    }

    /*
     * Gets the private 'serializer.normalizer.backed_enum' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer
     */
    protected static function getSerializer_Normalizer_BackedEnumService($container)
    {
        return $container->privates['serializer.normalizer.backed_enum'] = new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer();
    }

    /*
     * Gets the private 'serializer.normalizer.constraint_violation_list' shared autowired service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer
     */
    protected static function getSerializer_Normalizer_ConstraintViolationListService($container)
    {
        return $container->privates['serializer.normalizer.constraint_violation_list'] = new \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer($container->parameters['api_platform.serializer.default_context'], ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)));
    }

    /*
     * Gets the private 'serializer.normalizer.data_uri' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DataUriNormalizer
     */
    protected static function getSerializer_Normalizer_DataUriService($container)
    {
        return $container->privates['serializer.normalizer.data_uri'] = new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(NULL);
    }

    /*
     * Gets the private 'serializer.normalizer.dateinterval' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer
     */
    protected static function getSerializer_Normalizer_DateintervalService($container)
    {
        return $container->privates['serializer.normalizer.dateinterval'] = new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer($container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'serializer.normalizer.datetime' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer
     */
    protected static function getSerializer_Normalizer_DatetimeService($container)
    {
        return $container->privates['serializer.normalizer.datetime'] = new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer($container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'serializer.normalizer.datetimezone' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer
     */
    protected static function getSerializer_Normalizer_DatetimezoneService($container)
    {
        return $container->privates['serializer.normalizer.datetimezone'] = new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer();
    }

    /*
     * Gets the private 'serializer.normalizer.form_error' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer
     */
    protected static function getSerializer_Normalizer_FormErrorService($container)
    {
        return $container->privates['serializer.normalizer.form_error'] = new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer();
    }

    /*
     * Gets the private 'serializer.normalizer.json_serializable' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer
     */
    protected static function getSerializer_Normalizer_JsonSerializableService($container)
    {
        return $container->privates['serializer.normalizer.json_serializable'] = new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL, $container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'serializer.normalizer.number' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\NumberNormalizer
     */
    protected static function getSerializer_Normalizer_NumberService($container)
    {
        return $container->privates['serializer.normalizer.number'] = new \Symfony\Component\Serializer\Normalizer\NumberNormalizer();
    }

    /*
     * Gets the private 'serializer.normalizer.object' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ObjectNormalizer
     */
    protected static function getSerializer_Normalizer_ObjectService($container)
    {
        $a = ($container->privates['property_info.cache'] ?? self::getPropertyInfo_CacheService($container));

        return $container->privates['serializer.normalizer.object'] = new \Symfony\Component\Serializer\Normalizer\ObjectNormalizer(($container->privates['api_platform.serializer.mapping.cache_class_metadata_factory'] ?? self::getApiPlatform_Serializer_Mapping_CacheClassMetadataFactoryService($container)), ($container->privates['serializer.name_converter.metadata_aware'] ?? self::getSerializer_NameConverter_MetadataAwareService($container)), ($container->privates['property_accessor'] ?? self::getPropertyAccessorService($container)), $a, ($container->privates['serializer.mapping.class_discriminator_resolver'] ?? self::getSerializer_Mapping_ClassDiscriminatorResolverService($container)), NULL, $container->parameters['api_platform.serializer.default_context'], $a);
    }

    /*
     * Gets the private 'serializer.normalizer.problem' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\ProblemNormalizer
     */
    protected static function getSerializer_Normalizer_ProblemService($container)
    {
        return $container->privates['serializer.normalizer.problem'] = new \Symfony\Component\Serializer\Normalizer\ProblemNormalizer(false, $container->parameters['api_platform.serializer.default_context'], NULL);
    }

    /*
     * Gets the private 'serializer.normalizer.uid' shared service.
     *
     * @return \Symfony\Component\Serializer\Normalizer\UidNormalizer
     */
    protected static function getSerializer_Normalizer_UidService($container)
    {
        return $container->privates['serializer.normalizer.uid'] = new \Symfony\Component\Serializer\Normalizer\UidNormalizer($container->parameters['api_platform.serializer.default_context']);
    }

    /*
     * Gets the private 'test.session.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected static function getTest_Session_ListenerService($container)
    {
        return $container->privates['test.session.listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'session_factory' => ['privates', 'session.factory', 'getSession_FactoryService', true],
        ], [
            'session_factory' => '?',
        ]), false, $container->parameters['session.storage.options']);
    }

    /*
     * Gets the private 'validate_request_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener
     */
    protected static function getValidateRequestListenerService($container)
    {
        return $container->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /*
     * Gets the private 'validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected static function getValidatorService($container)
    {
        $a = ($container->privates['validator.builder'] ?? self::getValidator_BuilderService($container));

        if (isset($container->privates['validator'])) {
            return $container->privates['validator'];
        }

        return $container->privates['validator'] = $a->getValidator();
    }

    /*
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected static function getValidator_BuilderService($container)
    {
        $container->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(($container->privates['validator.validator_factory'] ?? self::getValidator_ValidatorFactoryService($container)));
        $instance->setGroupProviderLocator(($container->privates['.service_locator.GIuJv7e'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], [])));
        $instance->setTranslationDomain('validators');
        $instance->enableAttributeMapping();
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->setMappingCache(($container->privates['validator.mapping.cache.adapter'] ?? self::getValidator_Mapping_Cache_AdapterService($container)));
        $instance->addObjectInitializers([($container->privates['doctrine.orm.validator_initializer'] ?? self::getDoctrine_Orm_ValidatorInitializerService($container))]);
        $instance->addLoader(($container->privates['validator.property_info_loader'] ?? self::getValidator_PropertyInfoLoaderService($container)));
        $instance->addLoader(($container->privates['doctrine.orm.default_entity_manager.validator_loader'] ?? self::getDoctrine_Orm_DefaultEntityManager_ValidatorLoaderService($container)));

        return $instance;
    }

    /*
     * Gets the private 'validator.mapping.cache.adapter' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\PhpArrayAdapter
     */
    protected static function getValidator_Mapping_Cache_AdapterService($container)
    {
        return $container->privates['validator.mapping.cache.adapter'] = \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($container->targetDir.''.'/validation.php'), ($container->privates['cache.validator'] ?? self::getCache_ValidatorService($container)));
    }

    /*
     * Gets the private 'validator.property_info_loader' shared service.
     *
     * @return \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader
     */
    protected static function getValidator_PropertyInfoLoaderService($container)
    {
        $a = ($container->privates['property_info.cache'] ?? self::getPropertyInfo_CacheService($container));

        return $container->privates['validator.property_info_loader'] = new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL);
    }

    /*
     * Gets the private 'validator.validator_factory' shared service.
     *
     * @return \Symfony\Component\Validator\ContainerConstraintValidatorFactory
     */
    protected static function getValidator_ValidatorFactoryService($container)
    {
        return $container->privates['validator.validator_factory'] = new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', true],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', true],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', true],
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => ['privates', 'validator.when', 'getValidator_WhenService', true],
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => ['privates', 'validator.no_suspicious_characters', 'getValidator_NoSuspiciousCharactersService', true],
            'Symfony\\Bridge\\Twig\\Validator\\Constraints\\TwigValidator' => ['privates', 'twig.validator', 'getTwig_ValidatorService', true],
            'security.validator.user_password' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => ['privates', 'security.validator.user_password', 'getSecurity_Validator_UserPasswordService', true],
            'doctrine.orm.validator.unique' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => ['privates', 'doctrine.orm.validator.unique', 'getDoctrine_Orm_Validator_UniqueService', true],
        ], [
            'validator.expression' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => '?',
            'Symfony\\Bridge\\Twig\\Validator\\Constraints\\TwigValidator' => '?',
            'security.validator.user_password' => '?',
            'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => '?',
            'doctrine.orm.validator.unique' => '?',
            'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => '?',
        ]));
    }

    /*
     * Gets the private 'web_link.add_link_header_listener' shared service.
     *
     * @return \Symfony\Component\WebLink\EventListener\AddLinkHeaderListener
     */
    protected static function getWebLink_AddLinkHeaderListenerService($container)
    {
        return $container->privates['web_link.add_link_header_listener'] = new \Symfony\Component\WebLink\EventListener\AddLinkHeaderListener(($container->privates['web_link.http_header_serializer'] ??= new \Symfony\Component\WebLink\HttpHeaderSerializer()));
    }

    /*
     * Gets the private 'web_link.http_header_serializer' shared service.
     *
     * @return \Symfony\Component\WebLink\HttpHeaderSerializer
     */
    protected static function getWebLink_HttpHeaderSerializerService($container)
    {
        return $container->privates['web_link.http_header_serializer'] = new \Symfony\Component\WebLink\HttpHeaderSerializer();
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name, extraMessage: self::NONEMPTY_PARAMETERS[$name] ?? null);
        }

        if (isset($this->loadedDynamicParameters[$name])) {
            $value = $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        } else {
            $value = $this->parameters[$name];
        }

        if (isset(self::NONEMPTY_PARAMETERS[$name]) && (null === $value || '' === $value || [] === $value)) {
            throw new \Symfony\Component\DependencyInjection\Exception\EmptyParameterValueException(self::NONEMPTY_PARAMETERS[$name]);
        }

        return $value;
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters, [], self::NONEMPTY_PARAMETERS);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.runtime_mode' => false,
        'kernel.runtime_mode.web' => false,
        'kernel.runtime_mode.cli' => false,
        'kernel.runtime_mode.worker' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'google_oauth_client_id' => false,
        'google_oauth_client_secret' => false,
        'google_oauth_redirect_uri' => false,
        'microsoft_oauth_client_id' => false,
        'microsoft_oauth_client_secret' => false,
        'microsoft_oauth_redirect_uri' => false,
        'app_frontend_url' => false,
        'kernel.secret' => false,
        'kernel.trust_x_sendfile_type_header' => false,
        'kernel.trusted_hosts' => false,
        'kernel.trusted_proxies' => false,
        'kernel.trusted_headers' => false,
        'router.cache_dir' => false,
        'serializer.mapping.cache.file' => false,
        'validator.mapping.cache.file' => false,
        'doctrine.orm.proxy_dir' => false,
        'nelmio_cors.defaults' => false,
        'lexik_jwt_authentication.pass_phrase' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        $container = $this;
        $value = match ($name) {
            'kernel.runtime_environment' => $container->getEnv('default:kernel.environment:APP_RUNTIME_ENV'),
            'kernel.runtime_mode' => $container->getEnv('query_string:default:container.runtime_mode:APP_RUNTIME_MODE'),
            'kernel.runtime_mode.web' => $container->getEnv('bool:default::key:web:default:kernel.runtime_mode:'),
            'kernel.runtime_mode.cli' => $container->getEnv('not:default:kernel.runtime_mode.web:'),
            'kernel.runtime_mode.worker' => $container->getEnv('bool:default::key:worker:default:kernel.runtime_mode:'),
            'kernel.build_dir' => $container->targetDir.'',
            'kernel.cache_dir' => $container->targetDir.'',
            'google_oauth_client_id' => $container->getEnv('GOOGLE_OAUTH_CLIENT_ID'),
            'google_oauth_client_secret' => $container->getEnv('GOOGLE_OAUTH_CLIENT_SECRET'),
            'google_oauth_redirect_uri' => $container->getEnv('GOOGLE_OAUTH_REDIRECT_URI'),
            'microsoft_oauth_client_id' => $container->getEnv('MICROSOFT_OAUTH_CLIENT_ID'),
            'microsoft_oauth_client_secret' => $container->getEnv('MICROSOFT_OAUTH_CLIENT_SECRET'),
            'microsoft_oauth_redirect_uri' => $container->getEnv('MICROSOFT_OAUTH_REDIRECT_URI'),
            'app_frontend_url' => $container->getEnv('APP_FRONTEND_URL'),
            'kernel.secret' => $container->getEnv('APP_SECRET'),
            'kernel.trust_x_sendfile_type_header' => $container->getEnv('bool:default::SYMFONY_TRUST_X_SENDFILE_TYPE_HEADER'),
            'kernel.trusted_hosts' => $container->getEnv('default::SYMFONY_TRUSTED_HOSTS'),
            'kernel.trusted_proxies' => $container->getEnv('default::SYMFONY_TRUSTED_PROXIES'),
            'kernel.trusted_headers' => $container->getEnv('default::SYMFONY_TRUSTED_HEADERS'),
            'router.cache_dir' => $container->targetDir.'',
            'serializer.mapping.cache.file' => ($container->targetDir.''.'/serialization.php'),
            'validator.mapping.cache.file' => ($container->targetDir.''.'/validation.php'),
            'doctrine.orm.proxy_dir' => ($container->targetDir.''.'/doctrine/orm/Proxies'),
            'nelmio_cors.defaults' => [
                'allow_origin' => [
                    0 => $container->getEnv('CORS_ALLOW_ORIGIN'),
                ],
                'allow_credentials' => false,
                'allow_headers' => [
                    0 => 'content-type',
                    1 => 'authorization',
                ],
                'allow_private_network' => false,
                'expose_headers' => [
                    0 => 'Link',
                ],
                'allow_methods' => [
                    0 => 'GET',
                    1 => 'OPTIONS',
                    2 => 'POST',
                    3 => 'PUT',
                    4 => 'PATCH',
                    5 => 'DELETE',
                ],
                'max_age' => 3600,
                'hosts' => [

                ],
                'origin_regex' => true,
                'forced_allow_origin_value' => NULL,
                'skip_same_as_origin' => true,
            ],
            'lexik_jwt_authentication.pass_phrase' => $container->getEnv('JWT_PASSPHRASE'),
            default => throw new ParameterNotFoundException($name),
        };
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'test',
            'kernel.debug' => false,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).'/log'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'NelmioCorsBundle' => 'Nelmio\\CorsBundle\\NelmioCorsBundle',
                'ApiPlatformBundle' => 'ApiPlatform\\Symfony\\Bundle\\ApiPlatformBundle',
                'LexikJWTAuthenticationBundle' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\LexikJWTAuthenticationBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'SecurityBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/security-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ],
                'DoctrineBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ],
                'DoctrineMigrationsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/doctrine/doctrine-migrations-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\MigrationsBundle',
                ],
                'NelmioCorsBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/nelmio/cors-bundle'),
                    'namespace' => 'Nelmio\\CorsBundle',
                ],
                'ApiPlatformBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/api-platform/symfony/Bundle'),
                    'namespace' => 'ApiPlatform\\Symfony\\Bundle',
                ],
                'LexikJWTAuthenticationBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/lexik/jwt-authentication-bundle'),
                    'namespace' => 'Lexik\\Bundle\\JWTAuthenticationBundle',
                ],
                'MonologBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'App_KernelTestContainer',
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
                'Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent' => 'security.authentication.success',
                'Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent' => 'security.interactive_login',
                'Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent' => 'security.switch_user',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => false,
            'kernel.default_locale' => 'en',
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'debug.file_link_format' => NULL,
            'test.client.parameters' => [

            ],
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'debug.error_handler.throw_at' => 0,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'kernel::loadRoutes',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => [
                'cache_limiter' => '0',
                'cookie_secure' => 'auto',
                'cookie_httponly' => true,
                'cookie_samesite' => 'lax',
            ],
            'session.save_path' => NULL,
            'session.metadata.update_threshold' => 0,
            'validator.translation_domain' => 'validators',
            'data_collector.templates' => [

            ],
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 4).'/templates'),
            'security.role_hierarchy.roles' => [

            ],
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.authentication.hide_user_not_found' => true,
            'security.firewalls' => [
                0 => 'dev',
                1 => 'login',
                2 => 'public_api',
                3 => 'google_oauth',
                4 => 'microsoft_oauth',
                5 => 'api',
            ],
            'security.logout_uris' => [

            ],
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => [
                'default' => 'doctrine.orm.default_entity_manager',
            ],
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => [
                'jsonb' => [
                    'class' => 'App\\Doctrine\\DBAL\\Types\\JsonbType',
                ],
                'uuid' => [
                    'class' => 'Symfony\\Bridge\\Doctrine\\Types\\UuidType',
                ],
                'ulid' => [
                    'class' => 'Symfony\\Bridge\\Doctrine\\Types\\UlidType',
                ],
                'date_point' => [
                    'class' => 'Symfony\\Bridge\\Doctrine\\Types\\DatePointType',
                ],
            ],
            'doctrine.connections' => [
                'default' => 'doctrine.dbal.default_connection',
            ],
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.metadata.attribute.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AttributeDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.typed_field_mapper.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultTypedFieldMapper',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.enable_lazy_ghost_objects' => true,
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'doctrine.migrations.preferred_em' => NULL,
            'doctrine.migrations.preferred_connection' => NULL,
            'nelmio_cors.map' => [
                '^/' => [

                ],
            ],
            'nelmio_cors.cors_listener.class' => 'Nelmio\\CorsBundle\\EventListener\\CorsListener',
            'nelmio_cors.options_resolver.class' => 'Nelmio\\CorsBundle\\Options\\Resolver',
            'nelmio_cors.options_provider.config.class' => 'Nelmio\\CorsBundle\\Options\\ConfigProvider',
            'api_platform.use_symfony_listeners' => false,
            'api_platform.serializer.default_context' => [
                'hydra_prefix' => false,
            ],
            'api_platform.enable_entrypoint' => true,
            'api_platform.enable_docs' => true,
            'api_platform.title' => 'Hello API Platform',
            'api_platform.description' => '',
            'api_platform.version' => '1.0.0',
            'api_platform.show_webby' => true,
            'api_platform.url_generation_strategy' => 1,
            'api_platform.exception_to_status' => [
                'Symfony\\Component\\Serializer\\Exception\\ExceptionInterface' => 400,
                'ApiPlatform\\Metadata\\Exception\\InvalidArgumentException' => 400,
                'Doctrine\\ORM\\OptimisticLockException' => 409,
            ],
            'api_platform.formats' => [
                'jsonld' => [
                    0 => 'application/ld+json',
                ],
            ],
            'api_platform.patch_formats' => [
                'json' => [
                    0 => 'application/merge-patch+json',
                ],
            ],
            'api_platform.error_formats' => [
                'jsonld' => [
                    0 => 'application/ld+json',
                ],
                'jsonproblem' => [
                    0 => 'application/problem+json',
                ],
                'json' => [
                    0 => 'application/problem+json',
                    1 => 'application/json',
                ],
            ],
            'api_platform.docs_formats' => [
                'jsonld' => [
                    0 => 'application/ld+json',
                ],
                'jsonopenapi' => [
                    0 => 'application/vnd.openapi+json',
                ],
                'html' => [
                    0 => 'text/html',
                ],
                'yamlopenapi' => [
                    0 => 'application/vnd.openapi+yaml',
                ],
            ],
            'api_platform.jsonschema_formats' => [
                'jsonld' => true,
                'jsonproblem' => true,
                'json' => true,
            ],
            'api_platform.eager_loading.enabled' => true,
            'api_platform.eager_loading.max_joins' => 30,
            'api_platform.eager_loading.fetch_partial' => false,
            'api_platform.eager_loading.force_eager' => true,
            'api_platform.collection.exists_parameter_name' => 'exists',
            'api_platform.collection.order' => 'ASC',
            'api_platform.collection.order_parameter_name' => 'order',
            'api_platform.collection.order_nulls_comparison' => NULL,
            'api_platform.collection.pagination.enabled' => true,
            'api_platform.collection.pagination.partial' => false,
            'api_platform.collection.pagination.client_enabled' => false,
            'api_platform.collection.pagination.client_items_per_page' => false,
            'api_platform.collection.pagination.client_partial' => false,
            'api_platform.collection.pagination.items_per_page' => 30,
            'api_platform.collection.pagination.maximum_items_per_page' => NULL,
            'api_platform.collection.pagination.page_parameter_name' => 'page',
            'api_platform.collection.pagination.enabled_parameter_name' => 'pagination',
            'api_platform.collection.pagination.items_per_page_parameter_name' => 'itemsPerPage',
            'api_platform.collection.pagination.partial_parameter_name' => 'partial',
            'api_platform.collection.pagination' => [
                'enabled' => true,
                'page_parameter_name' => 'page',
                'enabled_parameter_name' => 'pagination',
                'items_per_page_parameter_name' => 'itemsPerPage',
                'partial_parameter_name' => 'partial',
            ],
            'api_platform.handle_symfony_errors' => false,
            'api_platform.http_cache.etag' => true,
            'api_platform.http_cache.max_age' => NULL,
            'api_platform.http_cache.shared_max_age' => NULL,
            'api_platform.http_cache.vary' => [
                0 => 'Content-Type',
                1 => 'Authorization',
                2 => 'Origin',
            ],
            'api_platform.http_cache.public' => NULL,
            'api_platform.http_cache.invalidation.max_header_length' => 7500,
            'api_platform.http_cache.invalidation.xkey.glue' => ' ',
            'api_platform.asset_package' => NULL,
            'api_platform.defaults' => [
                'extra_properties' => [

                ],
                'stateless' => true,
                'cache_headers' => [
                    'vary' => [
                        0 => 'Content-Type',
                        1 => 'Authorization',
                        2 => 'Origin',
                    ],
                ],
            ],
            'api_platform.resource_class_directories' => [
                0 => (\dirname(__DIR__, 4).'/src/ApiResource'),
                1 => (\dirname(__DIR__, 4).'/src/Entity'),
            ],
            'api_platform.class_name_resources' => [
                0 => 'ApiPlatform\\State\\ApiResource\\Error',
                1 => 'ApiPlatform\\Validator\\Exception\\ValidationException',
            ],
            'api_platform.oauth.enabled' => false,
            'api_platform.oauth.clientId' => '',
            'api_platform.oauth.clientSecret' => '',
            'api_platform.oauth.type' => 'oauth2',
            'api_platform.oauth.flow' => 'application',
            'api_platform.oauth.tokenUrl' => '',
            'api_platform.oauth.authorizationUrl' => '',
            'api_platform.oauth.refreshUrl' => '',
            'api_platform.oauth.scopes' => [

            ],
            'api_platform.oauth.pkce' => false,
            'api_platform.openapi.termsOfService' => NULL,
            'api_platform.openapi.contact.name' => NULL,
            'api_platform.openapi.contact.url' => NULL,
            'api_platform.openapi.contact.email' => NULL,
            'api_platform.openapi.license.name' => NULL,
            'api_platform.openapi.license.url' => NULL,
            'api_platform.openapi.overrideResponses' => true,
            'api_platform.openapi.tags' => [

            ],
            'api_platform.swagger.versions' => [
                0 => 3,
            ],
            'api_platform.enable_swagger_ui' => true,
            'api_platform.enable_re_doc' => true,
            'api_platform.swagger.api_keys' => [

            ],
            'api_platform.swagger.persist_authorization' => false,
            'api_platform.swagger.http_auth' => [

            ],
            'api_platform.swagger_ui.extra_configuration' => [

            ],
            'api_platform.graphql.enabled' => false,
            'api_platform.graphql.max_query_depth' => 20,
            'api_platform.graphql.max_query_complexity' => 500,
            'api_platform.graphql.introspection.enabled' => false,
            'api_platform.graphql.graphiql.enabled' => false,
            'api_platform.graphql.collection.pagination' => [
                'enabled' => true,
            ],
            'api_platform.validator.serialize_payload_fields' => [

            ],
            'api_platform.validator.query_parameter_validation' => true,
            'api_platform.elasticsearch.enabled' => false,
            'lexik_jwt_authentication.token_ttl' => 86400,
            'lexik_jwt_authentication.clock_skew' => 0,
            'lexik_jwt_authentication.allow_no_expiration' => false,
            'lexik_jwt_authentication.user_id_claim' => 'username',
            'lexik_jwt_authentication.encoder.signature_algorithm' => 'RS256',
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => [

            ],
            'monolog.handlers_to_channels' => [
                'monolog.handler.deprecation' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'deprecation',
                    ],
                ],
                'monolog.handler.main' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'event',
                        1 => 'deprecation',
                    ],
                ],
            ],
            'console.command.ids' => [

            ],
        ];
    }
}
