<?php

namespace ContainerWMXPbih;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getApiPlatform_Openapi_FactoryService extends App_KernelProdContainer
{
    /*
     * Gets the private 'api_platform.openapi.factory' shared service.
     *
     * @return \ApiPlatform\OpenApi\Factory\OpenApiFactory
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->privates['api_platform.metadata.resource.metadata_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_MetadataCollectionFactory_CachedService($container));

        if (isset($container->privates['api_platform.openapi.factory'])) {
            return $container->privates['api_platform.openapi.factory'];
        }
        $b = ($container->privates['api_platform.metadata.property.metadata_factory.cached'] ?? self::getApiPlatform_Metadata_Property_MetadataFactory_CachedService($container));

        if (isset($container->privates['api_platform.openapi.factory'])) {
            return $container->privates['api_platform.openapi.factory'];
        }
        $c = ($container->privates['api_platform.json_schema.backward_compatible_schema_factory'] ?? $container->load('getApiPlatform_JsonSchema_BackwardCompatibleSchemaFactoryService'));

        if (isset($container->privates['api_platform.openapi.factory'])) {
            return $container->privates['api_platform.openapi.factory'];
        }
        $d = ($container->privates['api_platform.filter_locator'] ?? self::getApiPlatform_FilterLocatorService($container));

        if (isset($container->privates['api_platform.openapi.factory'])) {
            return $container->privates['api_platform.openapi.factory'];
        }
        $e = ($container->privates['api_platform.router'] ?? self::getApiPlatform_RouterService($container));

        if (isset($container->privates['api_platform.openapi.factory'])) {
            return $container->privates['api_platform.openapi.factory'];
        }

        return $container->privates['api_platform.openapi.factory'] = new \ApiPlatform\OpenApi\Factory\OpenApiFactory(($container->privates['api_platform.metadata.resource.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Resource_NameCollectionFactory_CachedService($container)), $a, ($container->privates['api_platform.metadata.property.name_collection_factory.cached'] ?? self::getApiPlatform_Metadata_Property_NameCollectionFactory_CachedService($container)), $b, $c, $d, $container->parameters['api_platform.formats'], ($container->privates['api_platform.openapi.options'] ?? $container->load('getApiPlatform_Openapi_OptionsService')), new \ApiPlatform\State\Pagination\PaginationOptions(true, 'page', false, 'itemsPerPage', false, 'pagination', 30, NULL, false, false, 'partial'), $e, $container->parameters['api_platform.error_formats']);
    }
}
