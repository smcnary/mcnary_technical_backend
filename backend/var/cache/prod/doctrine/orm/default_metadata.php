<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Recommendation__CLASSMETADATA__' => 0,
'App__Entity__OAuthConnection__CLASSMETADATA__' => 1,
'App__Entity__Subscription__CLASSMETADATA__' => 2,
'App__Entity__Keyword__CLASSMETADATA__' => 3,
'App__Entity__Category__CLASSMETADATA__' => 4,
'App__Entity__Document__CLASSMETADATA__' => 5,
'App__Entity__Ranking__CLASSMETADATA__' => 6,
'App__Entity__ContentItem__CLASSMETADATA__' => 7,
'App__Entity__AuditCompetitor__CLASSMETADATA__' => 8,
'App__Entity__ClientLocation__CLASSMETADATA__' => 9,
'App__Entity__RankingDaily__CLASSMETADATA__' => 10,
'App__Entity__Campaign__CLASSMETADATA__' => 11,
'App__Entity__ContentBrief__CLASSMETADATA__' => 12,
'App__Entity__Package__CLASSMETADATA__' => 13,
'App__Entity__Post__CLASSMETADATA__' => 14,
'App__Entity__SystemUser__CLASSMETADATA__' => 15,
'App__Entity__Review__CLASSMETADATA__' => 16,
'App__Entity__MediaAsset__CLASSMETADATA__' => 17,
'App__Entity__Tag__CLASSMETADATA__' => 18,
'App__Entity__Citation__CLASSMETADATA__' => 19,
'App__Entity__User__CLASSMETADATA__' => 20,
'App__Entity__AuditConversionGoal__CLASSMETADATA__' => 21,
'App__Entity__CaseStudy__CLASSMETADATA__' => 22,
'App__Entity__Agency__CLASSMETADATA__' => 23,
'App__Entity__NewsletterSubscription__CLASSMETADATA__' => 24,
'App__Entity__OpenPhoneMessageLog__CLASSMETADATA__' => 25,
'App__Entity__Tenant__CLASSMETADATA__' => 26,
'App__Entity__LeadEvent__CLASSMETADATA__' => 27,
'App__Entity__DocumentSignature__CLASSMETADATA__' => 28,
'App__Entity__OpenPhoneCallLog__CLASSMETADATA__' => 29,
'App__Entity__Invoice__CLASSMETADATA__' => 30,
'App__Entity__AuditRun__CLASSMETADATA__' => 31,
'App__Entity__AuditKeyword__CLASSMETADATA__' => 32,
'App__Entity__OpenPhoneIntegration__CLASSMETADATA__' => 33,
'App__Entity__DocumentVersion__CLASSMETADATA__' => 34,
'App__Entity__SeoMeta__CLASSMETADATA__' => 35,
'App__Entity__UserClientAccess__CLASSMETADATA__' => 36,
'App__Entity__Faq__CLASSMETADATA__' => 37,
'App__Entity__Page__CLASSMETADATA__' => 38,
'App__Entity__Lead__CLASSMETADATA__' => 39,
'App__Entity__AuditIntake__CLASSMETADATA__' => 40,
'App__Entity__Form__CLASSMETADATA__' => 41,
'App__Entity__Backlink__CLASSMETADATA__' => 42,
'App__Entity__Notification__CLASSMETADATA__' => 43,
'App__Entity__AuditFinding__CLASSMETADATA__' => 44,
'App__Entity__Organization__CLASSMETADATA__' => 45,
'App__Entity__DocumentTemplate__CLASSMETADATA__' => 46,
'App__Entity__OAuthToken__CLASSMETADATA__' => 47,
'App__Entity__LeadSource__CLASSMETADATA__' => 48,
'App__Entity__Client__CLASSMETADATA__' => 49,
'App__Entity__FormSubmission__CLASSMETADATA__' => 50,
'App__Entity__Site__CLASSMETADATA__' => 51,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Recommendation',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'title' => $o[4],
                        'description' => $o[5],
                        'category' => $o[6],
                        'priority' => $o[7],
                        'status' => $o[8],
                        'rationale' => $o[9],
                        'implementation' => $o[10],
                        'expectedOutcome' => $o[11],
                        'dueDate' => $o[12],
                        'completedAt' => $o[13],
                        'assignedTo' => $o[14],
                        'estimatedEffort' => $o[15],
                        'estimatedCost' => $o[16],
                        'tags' => $o[17],
                        'metadata' => $o[18],
                        'createdAt' => $o[19],
                        'updatedAt' => $o[20],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'title' => 'title',
                        'description' => 'description',
                        'category' => 'category',
                        'priority' => 'priority',
                        'status' => 'status',
                        'rationale' => 'rationale',
                        'implementation' => 'implementation',
                        'expected_outcome' => 'expectedOutcome',
                        'due_date' => 'dueDate',
                        'completed_at' => 'completedAt',
                        'assigned_to' => 'assignedTo',
                        'estimated_effort' => 'estimatedEffort',
                        'estimated_cost' => 'estimatedCost',
                        'tags' => 'tags',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'title' => 'title',
                        'description' => 'description',
                        'category' => 'category',
                        'priority' => 'priority',
                        'status' => 'status',
                        'rationale' => 'rationale',
                        'implementation' => 'implementation',
                        'expectedOutcome' => 'expected_outcome',
                        'dueDate' => 'due_date',
                        'completedAt' => 'completed_at',
                        'assignedTo' => 'assigned_to',
                        'estimatedEffort' => 'estimated_effort',
                        'estimatedCost' => 'estimated_cost',
                        'tags' => 'tags',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'recommendations',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[21],
                ],
                'name' => [
                    'App\\Entity\\Recommendation',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'text',
                    'string',
                    'string',
                    'string',
                    'text',
                    'text',
                    'text',
                    'datetime_immutable',
                    'datetime_immutable',
                    'uuid',
                    'decimal',
                    'decimal',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'title',
                    'description',
                    'category',
                    'priority',
                    'status',
                    'rationale',
                    'implementation',
                    'expectedOutcome',
                    'dueDate',
                    'completedAt',
                    'assignedTo',
                    'estimatedEffort',
                    'estimatedCost',
                    'tags',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'title',
                    'description',
                    'category',
                    'priority',
                    'status',
                    'rationale',
                    'implementation',
                    'expected_outcome',
                    'due_date',
                    'completed_at',
                    'assigned_to',
                    'estimated_effort',
                    'estimated_cost',
                    'tags',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    9 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                ],
                'length' => [
                    4 => 255,
                    6 => 50,
                    20,
                    50,
                ],
                'precision' => [
                    15 => 5,
                    5,
                ],
                'scale' => [
                    15 => 2,
                    2,
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\OAuthConnection',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'provider' => $o[2],
                        'externalAccountId' => $o[3],
                        'scopes' => $o[4],
                        'status' => $o[5],
                        'metadata' => $o[6],
                        'createdAt' => $o[7],
                        'updatedAt' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'provider' => 'provider',
                        'external_account_id' => 'externalAccountId',
                        'scopes' => 'scopes',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'provider' => 'provider',
                        'externalAccountId' => 'external_account_id',
                        'scopes' => 'scopes',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'oauth_connections',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[9],
                        'user' => $o[11],
                        'tokens' => $o[13],
                    ],
                ],
                'idGenerator' => [
                    $o[14],
                ],
                'name' => [
                    'App\\Entity\\OAuthConnection',
                    10 => 'client_id',
                    12 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    10 => false,
                    12 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'jsonb',
                    'string',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'provider',
                    'externalAccountId',
                    'scopes',
                    'status',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'provider',
                    'external_account_id',
                    'scopes',
                    'status',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    6 => true,
                    10 => false,
                    12 => true,
                ],
                'options' => [
                    5 => [
                        'default' => 'active',
                    ],
                ],
                'fetch' => [
                    9 => 2,
                    11 => 2,
                    13 => 2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\OAuthConnection',
                    11 => 'App\\Entity\\OAuthConnection',
                    13 => 'App\\Entity\\OAuthConnection',
                ],
                'inversedBy' => [
                    9 => 'oauthConnections',
                    11 => 'oauthConnections',
                ],
                'sourceToTargetKeyColumns' => [
                    9 => [
                        'client_id' => 'id',
                    ],
                    11 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    9 => [
                        'id' => 'client_id',
                    ],
                    11 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                ],
                'joinColumnFieldNames' => [
                    9 => [
                        'client_id' => 'client_id',
                    ],
                    11 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'deferrable' => [
                    10 => false,
                    12 => false,
                ],
                'onDelete' => [
                    10 => 'CASCADE',
                    12 => 'SET NULL',
                ],
                'referencedColumnName' => [
                    10 => 'id',
                    12 => 'id',
                ],
                'cascade' => [
                    13 => [
                        'persist',
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    13 => true,
                ],
                'mappedBy' => [
                    13 => 'connection',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'client',
                    11 => 'user',
                    13 => 'tokens',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\Client',
                    11 => 'App\\Entity\\User',
                    13 => 'App\\Entity\\OAuthToken',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    14 => $o[15],
                ],
                'factory' => [
                    14 => $o[15],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    15 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    15 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    15 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    15 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    15 => null,
                ],
                'nameBasedNamespace' => [
                    15 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Subscription',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'packageId' => $o[4],
                        'name' => $o[5],
                        'description' => $o[6],
                        'status' => $o[7],
                        'amount' => $o[8],
                        'currency' => $o[9],
                        'billingCycle' => $o[10],
                        'startDate' => $o[11],
                        'nextBillingDate' => $o[12],
                        'cancelledAt' => $o[13],
                        'stripeSubscriptionId' => $o[14],
                        'stripeCustomerId' => $o[15],
                        'quantity' => $o[16],
                        'autoRenew' => $o[17],
                        'notes' => $o[18],
                        'features' => $o[19],
                        'metadata' => $o[20],
                        'createdAt' => $o[21],
                        'updatedAt' => $o[22],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'package_id' => 'packageId',
                        'name' => 'name',
                        'description' => 'description',
                        'status' => 'status',
                        'amount' => 'amount',
                        'currency' => 'currency',
                        'billing_cycle' => 'billingCycle',
                        'start_date' => 'startDate',
                        'next_billing_date' => 'nextBillingDate',
                        'cancelled_at' => 'cancelledAt',
                        'stripe_subscription_id' => 'stripeSubscriptionId',
                        'stripe_customer_id' => 'stripeCustomerId',
                        'quantity' => 'quantity',
                        'auto_renew' => 'autoRenew',
                        'notes' => 'notes',
                        'features' => 'features',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'packageId' => 'package_id',
                        'name' => 'name',
                        'description' => 'description',
                        'status' => 'status',
                        'amount' => 'amount',
                        'currency' => 'currency',
                        'billingCycle' => 'billing_cycle',
                        'startDate' => 'start_date',
                        'nextBillingDate' => 'next_billing_date',
                        'cancelledAt' => 'cancelled_at',
                        'stripeSubscriptionId' => 'stripe_subscription_id',
                        'stripeCustomerId' => 'stripe_customer_id',
                        'quantity' => 'quantity',
                        'autoRenew' => 'auto_renew',
                        'notes' => 'notes',
                        'features' => 'features',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'subscriptions',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[23],
                ],
                'name' => [
                    'App\\Entity\\Subscription',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'text',
                    'string',
                    'decimal',
                    'string',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                    'string',
                    'string',
                    'integer',
                    'boolean',
                    'text',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'packageId',
                    'name',
                    'description',
                    'status',
                    'amount',
                    'currency',
                    'billingCycle',
                    'startDate',
                    'nextBillingDate',
                    'cancelledAt',
                    'stripeSubscriptionId',
                    'stripeCustomerId',
                    'quantity',
                    'autoRenew',
                    'notes',
                    'features',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'package_id',
                    'name',
                    'description',
                    'status',
                    'amount',
                    'currency',
                    'billing_cycle',
                    'start_date',
                    'next_billing_date',
                    'cancelled_at',
                    'stripe_subscription_id',
                    'stripe_customer_id',
                    'quantity',
                    'auto_renew',
                    'notes',
                    'features',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    6 => true,
                    12 => true,
                    true,
                    true,
                    true,
                    18 => true,
                    true,
                    true,
                ],
                'length' => [
                    5 => 255,
                    7 => 50,
                    9 => 3,
                    20,
                    14 => 255,
                    255,
                ],
                'precision' => [
                    8 => 10,
                ],
                'scale' => [
                    8 => 2,
                ],
                'options' => [
                    16 => [
                        'default' => 1,
                    ],
                    [
                        'default' => false,
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Keyword',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'phrase' => $o[2],
                        'description' => $o[3],
                        'status' => $o[4],
                        'difficulty' => $o[5],
                        'searchVolume' => $o[6],
                        'cpc' => $o[7],
                        'intent' => $o[8],
                        'relatedKeywords' => $o[9],
                        'metadata' => $o[10],
                        'locale' => $o[11],
                        'location' => $o[12],
                        'targetUrl' => $o[13],
                        'createdAt' => $o[14],
                        'updatedAt' => $o[15],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'phrase' => 'phrase',
                        'description' => 'description',
                        'status' => 'status',
                        'difficulty' => 'difficulty',
                        'search_volume' => 'searchVolume',
                        'cpc' => 'cpc',
                        'intent' => 'intent',
                        'related_keywords' => 'relatedKeywords',
                        'metadata' => 'metadata',
                        'locale' => 'locale',
                        'location' => 'location',
                        'target_url' => 'targetUrl',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'phrase' => 'phrase',
                        'description' => 'description',
                        'status' => 'status',
                        'difficulty' => 'difficulty',
                        'searchVolume' => 'search_volume',
                        'cpc' => 'cpc',
                        'intent' => 'intent',
                        'relatedKeywords' => 'related_keywords',
                        'metadata' => 'metadata',
                        'locale' => 'locale',
                        'location' => 'location',
                        'targetUrl' => 'target_url',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'keywords',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[16],
                        'rankings' => $o[18],
                    ],
                ],
                'idGenerator' => [
                    $o[19],
                ],
                'name' => [
                    'App\\Entity\\Keyword',
                    17 => 'client_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    17 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'text',
                    'string',
                    'string',
                    'integer',
                    'decimal',
                    'string',
                    'jsonb',
                    'jsonb',
                    'string',
                    'string',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'phrase',
                    'description',
                    'status',
                    'difficulty',
                    'searchVolume',
                    'cpc',
                    'intent',
                    'relatedKeywords',
                    'metadata',
                    'locale',
                    'location',
                    'targetUrl',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'phrase',
                    'description',
                    'status',
                    'difficulty',
                    'search_volume',
                    'cpc',
                    'intent',
                    'related_keywords',
                    'metadata',
                    'locale',
                    'location',
                    'target_url',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    4 => 50,
                    20,
                    8 => 50,
                ],
                'nullable' => [
                    3 => true,
                    6 => true,
                    true,
                    true,
                    true,
                    true,
                    12 => true,
                    true,
                    17 => false,
                ],
                'precision' => [
                    7 => 5,
                ],
                'scale' => [
                    7 => 2,
                ],
                'options' => [
                    11 => [
                        'default' => 'en-US',
                    ],
                ],
                'fetch' => [
                    16 => 2,
                    18 => 2,
                ],
                'sourceEntity' => [
                    16 => 'App\\Entity\\Keyword',
                    18 => 'App\\Entity\\Keyword',
                ],
                'inversedBy' => [
                    16 => 'keywords',
                ],
                'sourceToTargetKeyColumns' => [
                    16 => [
                        'client_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    16 => [
                        'id' => 'client_id',
                    ],
                ],
                'joinColumns' => [
                    16 => [
                        $o[17],
                    ],
                ],
                'joinColumnFieldNames' => [
                    16 => [
                        'client_id' => 'client_id',
                    ],
                ],
                'deferrable' => [
                    17 => false,
                ],
                'onDelete' => [
                    17 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    17 => 'id',
                ],
                'cascade' => [
                    18 => [
                        'persist',
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    18 => true,
                ],
                'mappedBy' => [
                    18 => 'keyword',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    16 => 'client',
                    18 => 'rankings',
                ],
                'targetEntity' => [
                    16 => 'App\\Entity\\Client',
                    18 => 'App\\Entity\\RankingDaily',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    19 => $o[20],
                ],
                'factory' => [
                    19 => $o[20],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    20 => null,
                ],
                'nameBasedNamespace' => [
                    20 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Category',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'slug' => $o[3],
                        'description' => $o[4],
                        'status' => $o[5],
                        'sortOrder' => $o[6],
                        'createdAt' => $o[7],
                        'updatedAt' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'description' => 'description',
                        'status' => 'status',
                        'sort_order' => 'sortOrder',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'description' => 'description',
                        'status' => 'status',
                        'sortOrder' => 'sort_order',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'categories',
                        'uniqueConstraints' => [
                            [
                                'columns' => [
                                    'tenant_id',
                                    'slug',
                                ],
                            ],
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'tenant' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Category',
                    10 => 'tenant_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'text',
                    'string',
                    'integer',
                    'datetimetz_immutable',
                    'datetimetz_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'slug',
                    'description',
                    'status',
                    'sortOrder',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'slug',
                    'description',
                    'status',
                    'sort_order',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    255,
                    5 => 50,
                ],
                'nullable' => [
                    4 => true,
                    10 => true,
                ],
                'options' => [
                    5 => [
                        'default' => 'active',
                    ],
                    [
                        'default' => 0,
                    ],
                ],
                'fetch' => [
                    9 => 2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\Category',
                ],
                'sourceToTargetKeyColumns' => [
                    9 => [
                        'tenant_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    9 => [
                        'id' => 'tenant_id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                ],
                'joinColumnFieldNames' => [
                    9 => [
                        'tenant_id' => 'tenant_id',
                    ],
                ],
                'deferrable' => [
                    10 => false,
                ],
                'unique' => [
                    10 => false,
                ],
                'onDelete' => [
                    10 => 'SET NULL',
                ],
                'referencedColumnName' => [
                    10 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'tenant',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\Tenant',
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Document',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'description' => $o[3],
                        'content' => $o[4],
                        'status' => $o[5],
                        'type' => $o[6],
                        'metadata' => $o[7],
                        'signatureFields' => $o[8],
                        'sentForSignatureAt' => $o[9],
                        'signedAt' => $o[10],
                        'expiresAt' => $o[11],
                        'requiresSignature' => $o[12],
                        'isTemplate' => $o[13],
                        'createdAt' => $o[14],
                        'updatedAt' => $o[15],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'content' => 'content',
                        'status' => 'status',
                        'type' => 'type',
                        'metadata' => 'metadata',
                        'signature_fields' => 'signatureFields',
                        'sent_for_signature_at' => 'sentForSignatureAt',
                        'signed_at' => 'signedAt',
                        'expires_at' => 'expiresAt',
                        'requires_signature' => 'requiresSignature',
                        'is_template' => 'isTemplate',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'content' => 'content',
                        'status' => 'status',
                        'type' => 'type',
                        'metadata' => 'metadata',
                        'signatureFields' => 'signature_fields',
                        'sentForSignatureAt' => 'sent_for_signature_at',
                        'signedAt' => 'signed_at',
                        'expiresAt' => 'expires_at',
                        'requiresSignature' => 'requires_signature',
                        'isTemplate' => 'is_template',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'documents',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[16],
                        'createdBy' => $o[18],
                        'file' => $o[20],
                        'template' => $o[22],
                        'signatures' => $o[24],
                        'versions' => $o[25],
                    ],
                ],
                'idGenerator' => [
                    $o[26],
                ],
                'name' => [
                    'App\\Entity\\Document',
                    17 => 'client_id',
                    19 => 'created_by_id',
                    21 => 'file_id',
                    23 => 'template_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    17 => false,
                    19 => false,
                    21 => false,
                    23 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'text',
                    'text',
                    'string',
                    'string',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                    'boolean',
                    'boolean',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'content',
                    'status',
                    'type',
                    'metadata',
                    'signatureFields',
                    'sentForSignatureAt',
                    'signedAt',
                    'expiresAt',
                    'requiresSignature',
                    'isTemplate',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'content',
                    'status',
                    'type',
                    'metadata',
                    'signature_fields',
                    'sent_for_signature_at',
                    'signed_at',
                    'expires_at',
                    'requires_signature',
                    'is_template',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    5 => 50,
                    50,
                ],
                'nullable' => [
                    3 => true,
                    true,
                    7 => true,
                    true,
                    true,
                    true,
                    true,
                    17 => false,
                    19 => false,
                    21 => true,
                    23 => true,
                ],
                'options' => [
                    5 => [
                        'default' => 'draft',
                    ],
                    12 => [
                        'default' => false,
                    ],
                    [
                        'default' => false,
                    ],
                ],
                'fetch' => [
                    16 => 2,
                    18 => 2,
                    20 => 2,
                    22 => 2,
                    24 => 2,
                    2,
                ],
                'sourceEntity' => [
                    16 => 'App\\Entity\\Document',
                    18 => 'App\\Entity\\Document',
                    20 => 'App\\Entity\\Document',
                    22 => 'App\\Entity\\Document',
                    24 => 'App\\Entity\\Document',
                    'App\\Entity\\Document',
                ],
                'sourceToTargetKeyColumns' => [
                    16 => [
                        'client_id' => 'id',
                    ],
                    18 => [
                        'created_by_id' => 'id',
                    ],
                    20 => [
                        'file_id' => 'id',
                    ],
                    22 => [
                        'template_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    16 => [
                        'id' => 'client_id',
                    ],
                    18 => [
                        'id' => 'created_by_id',
                    ],
                    20 => [
                        'id' => 'file_id',
                    ],
                    22 => [
                        'id' => 'template_id',
                    ],
                ],
                'joinColumns' => [
                    16 => [
                        $o[17],
                    ],
                    18 => [
                        $o[19],
                    ],
                    20 => [
                        $o[21],
                    ],
                    22 => [
                        $o[23],
                    ],
                ],
                'joinColumnFieldNames' => [
                    16 => [
                        'client_id' => 'client_id',
                    ],
                    18 => [
                        'created_by_id' => 'created_by_id',
                    ],
                    20 => [
                        'file_id' => 'file_id',
                    ],
                    22 => [
                        'template_id' => 'template_id',
                    ],
                ],
                'deferrable' => [
                    17 => false,
                    19 => false,
                    21 => false,
                    23 => false,
                ],
                'referencedColumnName' => [
                    17 => 'id',
                    19 => 'id',
                    21 => 'id',
                    23 => 'id',
                ],
                'cascade' => [
                    24 => [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    24 => true,
                    true,
                ],
                'mappedBy' => [
                    24 => 'document',
                    'document',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    16 => 'client',
                    18 => 'createdBy',
                    20 => 'file',
                    22 => 'template',
                    24 => 'signatures',
                    'versions',
                ],
                'targetEntity' => [
                    16 => 'App\\Entity\\Client',
                    18 => 'App\\Entity\\User',
                    20 => 'App\\Entity\\MediaAsset',
                    22 => 'App\\Entity\\DocumentTemplate',
                    24 => 'App\\Entity\\DocumentSignature',
                    'App\\Entity\\DocumentVersion',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    26 => $o[27],
                ],
                'factory' => [
                    26 => $o[27],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    27 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    27 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    27 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    27 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    27 => null,
                ],
                'nameBasedNamespace' => [
                    27 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Ranking',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'keywordId' => $o[4],
                        'date' => $o[5],
                        'searchEngine' => $o[6],
                        'location' => $o[7],
                        'device' => $o[8],
                        'position' => $o[9],
                        'url' => $o[10],
                        'title' => $o[11],
                        'snippet' => $o[12],
                        'features' => $o[13],
                        'metadata' => $o[14],
                        'createdAt' => $o[15],
                        'updatedAt' => $o[16],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'keyword_id' => 'keywordId',
                        'date' => 'date',
                        'search_engine' => 'searchEngine',
                        'location' => 'location',
                        'device' => 'device',
                        'position' => 'position',
                        'url' => 'url',
                        'title' => 'title',
                        'snippet' => 'snippet',
                        'features' => 'features',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'keywordId' => 'keyword_id',
                        'date' => 'date',
                        'searchEngine' => 'search_engine',
                        'location' => 'location',
                        'device' => 'device',
                        'position' => 'position',
                        'url' => 'url',
                        'title' => 'title',
                        'snippet' => 'snippet',
                        'features' => 'features',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'rankings',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\Ranking',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'uuid',
                    'date',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'string',
                    'string',
                    'text',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'keywordId',
                    'date',
                    'searchEngine',
                    'location',
                    'device',
                    'position',
                    'url',
                    'title',
                    'snippet',
                    'features',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'keyword_id',
                    'date',
                    'search_engine',
                    'location',
                    'device',
                    'position',
                    'url',
                    'title',
                    'snippet',
                    'features',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    7 => true,
                    true,
                    10 => true,
                    true,
                    true,
                    true,
                    true,
                ],
                'length' => [
                    6 => 50,
                    100,
                    50,
                    10 => 255,
                    255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\ContentItem',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'authorId' => $o[4],
                        'title' => $o[5],
                        'slug' => $o[6],
                        'excerpt' => $o[7],
                        'content' => $o[8],
                        'type' => $o[9],
                        'status' => $o[10],
                        'metaTitle' => $o[11],
                        'metaDescription' => $o[12],
                        'metaKeywords' => $o[13],
                        'featuredImage' => $o[14],
                        'tags' => $o[15],
                        'categories' => $o[16],
                        'wordCount' => $o[17],
                        'readTime' => $o[18],
                        'publishedAt' => $o[19],
                        'seoSettings' => $o[20],
                        'metadata' => $o[21],
                        'createdAt' => $o[22],
                        'updatedAt' => $o[23],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'author_id' => 'authorId',
                        'title' => 'title',
                        'slug' => 'slug',
                        'excerpt' => 'excerpt',
                        'content' => 'content',
                        'type' => 'type',
                        'status' => 'status',
                        'meta_title' => 'metaTitle',
                        'meta_description' => 'metaDescription',
                        'meta_keywords' => 'metaKeywords',
                        'featured_image' => 'featuredImage',
                        'tags' => 'tags',
                        'categories' => 'categories',
                        'word_count' => 'wordCount',
                        'read_time' => 'readTime',
                        'published_at' => 'publishedAt',
                        'seo_settings' => 'seoSettings',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'authorId' => 'author_id',
                        'title' => 'title',
                        'slug' => 'slug',
                        'excerpt' => 'excerpt',
                        'content' => 'content',
                        'type' => 'type',
                        'status' => 'status',
                        'metaTitle' => 'meta_title',
                        'metaDescription' => 'meta_description',
                        'metaKeywords' => 'meta_keywords',
                        'featuredImage' => 'featured_image',
                        'tags' => 'tags',
                        'categories' => 'categories',
                        'wordCount' => 'word_count',
                        'readTime' => 'read_time',
                        'publishedAt' => 'published_at',
                        'seoSettings' => 'seo_settings',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'content_items',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                            'calculateWordCount',
                        ],
                        'prePersist' => [
                            'calculateWordCount',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[24],
                ],
                'name' => [
                    'App\\Entity\\ContentItem',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'string',
                    'text',
                    'text',
                    'string',
                    'string',
                    'string',
                    'text',
                    'jsonb',
                    'string',
                    'jsonb',
                    'jsonb',
                    'integer',
                    'integer',
                    'datetime_immutable',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'authorId',
                    'title',
                    'slug',
                    'excerpt',
                    'content',
                    'type',
                    'status',
                    'metaTitle',
                    'metaDescription',
                    'metaKeywords',
                    'featuredImage',
                    'tags',
                    'categories',
                    'wordCount',
                    'readTime',
                    'publishedAt',
                    'seoSettings',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'author_id',
                    'title',
                    'slug',
                    'excerpt',
                    'content',
                    'type',
                    'status',
                    'meta_title',
                    'meta_description',
                    'meta_keywords',
                    'featured_image',
                    'tags',
                    'categories',
                    'word_count',
                    'read_time',
                    'published_at',
                    'seo_settings',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    4 => true,
                    7 => true,
                    11 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    19 => true,
                    true,
                    true,
                ],
                'length' => [
                    5 => 255,
                    255,
                    9 => 50,
                    50,
                    255,
                    14 => 255,
                ],
                'unique' => [
                    6 => true,
                ],
                'options' => [
                    17 => [
                        'default' => 0,
                    ],
                    [
                        'default' => 0,
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
8 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AuditCompetitor',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AuditCompetitorRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'websiteUrl' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'website_url' => 'websiteUrl',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'websiteUrl' => 'website_url',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'audit_competitor',
                    ],
                ],
                'associationMappings' => [
                    [
                        'intake' => $o[4],
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\AuditCompetitor',
                    5 => 'intake_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    5 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'websiteUrl',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'website_url',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
                'nullable' => [
                    3 => true,
                    5 => false,
                ],
                'fetch' => [
                    4 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\AuditCompetitor',
                ],
                'inversedBy' => [
                    4 => 'competitors',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'intake_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'intake_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'intake_id' => 'intake_id',
                    ],
                ],
                'deferrable' => [
                    5 => false,
                ],
                'onDelete' => [
                    5 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    5 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'intake',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\AuditIntake',
                ],
            ],
        ],
        $o[0],
        []
    );
},
9 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\ClientLocation',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'label' => $o[2],
                        'street' => $o[3],
                        'city' => $o[4],
                        'region' => $o[5],
                        'postalCode' => $o[6],
                        'country' => $o[7],
                        'phone' => $o[8],
                        'email' => $o[9],
                        'isPrimary' => $o[10],
                        'metadata' => $o[11],
                        'status' => $o[12],
                        'createdAt' => $o[13],
                        'updatedAt' => $o[14],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'label' => 'label',
                        'street' => 'street',
                        'city' => 'city',
                        'region' => 'region',
                        'postal_code' => 'postalCode',
                        'country' => 'country',
                        'phone' => 'phone',
                        'email' => 'email',
                        'is_primary' => 'isPrimary',
                        'metadata' => 'metadata',
                        'status' => 'status',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'label' => 'label',
                        'street' => 'street',
                        'city' => 'city',
                        'region' => 'region',
                        'postalCode' => 'postal_code',
                        'country' => 'country',
                        'phone' => 'phone',
                        'email' => 'email',
                        'isPrimary' => 'is_primary',
                        'metadata' => 'metadata',
                        'status' => 'status',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'client_locations',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[15],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\ClientLocation',
                    16 => 'client_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    16 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'boolean',
                    'jsonb',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'label',
                    'street',
                    'city',
                    'region',
                    'postalCode',
                    'country',
                    'phone',
                    'email',
                    'isPrimary',
                    'metadata',
                    'status',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'label',
                    'street',
                    'city',
                    'region',
                    'postal_code',
                    'country',
                    'phone',
                    'email',
                    'is_primary',
                    'metadata',
                    'status',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    11 => true,
                    16 => false,
                ],
                'options' => [
                    10 => [
                        'default' => false,
                    ],
                    12 => [
                        'default' => 'active',
                    ],
                ],
                'fetch' => [
                    15 => 2,
                ],
                'sourceEntity' => [
                    15 => 'App\\Entity\\ClientLocation',
                ],
                'inversedBy' => [
                    15 => 'locations',
                ],
                'sourceToTargetKeyColumns' => [
                    15 => [
                        'client_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    15 => [
                        'id' => 'client_id',
                    ],
                ],
                'joinColumns' => [
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    15 => [
                        'client_id' => 'client_id',
                    ],
                ],
                'deferrable' => [
                    16 => false,
                ],
                'onDelete' => [
                    16 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    16 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    15 => 'client',
                ],
                'targetEntity' => [
                    15 => 'App\\Entity\\Client',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    17 => $o[18],
                ],
                'factory' => [
                    17 => $o[18],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    18 => null,
                ],
                'nameBasedNamespace' => [
                    18 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
10 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\RankingDaily',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'date' => $o[2],
                        'serpPosition' => $o[3],
                        'url' => $o[4],
                        'impressions' => $o[5],
                        'clicks' => $o[6],
                        'ctr' => $o[7],
                        'avgPosition' => $o[8],
                        'serpFeatures' => $o[9],
                        'metadata' => $o[10],
                        'createdAt' => $o[11],
                        'updatedAt' => $o[12],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'serp_position' => 'serpPosition',
                        'url' => 'url',
                        'impressions' => 'impressions',
                        'clicks' => 'clicks',
                        'ctr' => 'ctr',
                        'avg_position' => 'avgPosition',
                        'serp_features' => 'serpFeatures',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'date' => 'date',
                        'serpPosition' => 'serp_position',
                        'url' => 'url',
                        'impressions' => 'impressions',
                        'clicks' => 'clicks',
                        'ctr' => 'ctr',
                        'avgPosition' => 'avg_position',
                        'serpFeatures' => 'serp_features',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'rankings_daily',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'keyword' => $o[13],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\RankingDaily',
                    14 => 'keyword_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    14 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'date',
                    'integer',
                    'string',
                    'integer',
                    'integer',
                    'float',
                    'float',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'date',
                    'serpPosition',
                    'url',
                    'impressions',
                    'clicks',
                    'ctr',
                    'avgPosition',
                    'serpFeatures',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'date',
                    'serp_position',
                    'url',
                    'impressions',
                    'clicks',
                    'ctr',
                    'avg_position',
                    'serp_features',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    14 => false,
                ],
                'fetch' => [
                    13 => 2,
                ],
                'sourceEntity' => [
                    13 => 'App\\Entity\\RankingDaily',
                ],
                'inversedBy' => [
                    13 => 'rankings',
                ],
                'sourceToTargetKeyColumns' => [
                    13 => [
                        'keyword_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    13 => [
                        'id' => 'keyword_id',
                    ],
                ],
                'joinColumns' => [
                    13 => [
                        $o[14],
                    ],
                ],
                'joinColumnFieldNames' => [
                    13 => [
                        'keyword_id' => 'keyword_id',
                    ],
                ],
                'deferrable' => [
                    14 => false,
                ],
                'onDelete' => [
                    14 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    14 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    13 => 'keyword',
                ],
                'targetEntity' => [
                    13 => 'App\\Entity\\Keyword',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    15 => $o[16],
                ],
                'factory' => [
                    15 => $o[16],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    16 => null,
                ],
                'nameBasedNamespace' => [
                    16 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
11 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Campaign',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'description' => $o[3],
                        'type' => $o[4],
                        'status' => $o[5],
                        'startDate' => $o[6],
                        'endDate' => $o[7],
                        'budget' => $o[8],
                        'goals' => $o[9],
                        'metrics' => $o[10],
                        'metadata' => $o[11],
                        'createdAt' => $o[12],
                        'updatedAt' => $o[13],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'type' => 'type',
                        'status' => 'status',
                        'start_date' => 'startDate',
                        'end_date' => 'endDate',
                        'budget' => 'budget',
                        'goals' => 'goals',
                        'metrics' => 'metrics',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'type' => 'type',
                        'status' => 'status',
                        'startDate' => 'start_date',
                        'endDate' => 'end_date',
                        'budget' => 'budget',
                        'goals' => 'goals',
                        'metrics' => 'metrics',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'campaigns',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[16],
                ],
                'name' => [
                    'App\\Entity\\Campaign',
                    15 => 'client_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    15 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'text',
                    'string',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                    'decimal',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'type',
                    'status',
                    'startDate',
                    'endDate',
                    'budget',
                    'goals',
                    'metrics',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'type',
                    'status',
                    'start_date',
                    'end_date',
                    'budget',
                    'goals',
                    'metrics',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    4 => 50,
                    50,
                ],
                'nullable' => [
                    3 => true,
                    6 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    15 => false,
                ],
                'precision' => [
                    8 => 10,
                ],
                'scale' => [
                    8 => 2,
                ],
                'fetch' => [
                    14 => 2,
                ],
                'sourceEntity' => [
                    14 => 'App\\Entity\\Campaign',
                ],
                'inversedBy' => [
                    14 => 'campaigns',
                ],
                'sourceToTargetKeyColumns' => [
                    14 => [
                        'client_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    14 => [
                        'id' => 'client_id',
                    ],
                ],
                'joinColumns' => [
                    14 => [
                        $o[15],
                    ],
                ],
                'joinColumnFieldNames' => [
                    14 => [
                        'client_id' => 'client_id',
                    ],
                ],
                'deferrable' => [
                    15 => false,
                ],
                'onDelete' => [
                    15 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    15 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    14 => 'client',
                ],
                'targetEntity' => [
                    14 => 'App\\Entity\\Client',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    16 => $o[17],
                ],
                'factory' => [
                    16 => $o[17],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    17 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    17 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    17 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    17 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    17 => null,
                ],
                'nameBasedNamespace' => [
                    17 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
12 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\ContentBrief',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'contentItemId' => $o[4],
                        'assignedTo' => $o[5],
                        'title' => $o[6],
                        'description' => $o[7],
                        'targetAudience' => $o[8],
                        'keyMessages' => $o[9],
                        'callToAction' => $o[10],
                        'status' => $o[11],
                        'priority' => $o[12],
                        'dueDate' => $o[13],
                        'estimatedWordCount' => $o[14],
                        'keywords' => $o[15],
                        'references' => $o[16],
                        'requirements' => $o[17],
                        'metadata' => $o[18],
                        'createdAt' => $o[19],
                        'updatedAt' => $o[20],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'content_item_id' => 'contentItemId',
                        'assigned_to' => 'assignedTo',
                        'title' => 'title',
                        'description' => 'description',
                        'target_audience' => 'targetAudience',
                        'key_messages' => 'keyMessages',
                        'call_to_action' => 'callToAction',
                        'status' => 'status',
                        'priority' => 'priority',
                        'due_date' => 'dueDate',
                        'estimated_word_count' => 'estimatedWordCount',
                        'keywords' => 'keywords',
                        'references' => 'references',
                        'requirements' => 'requirements',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'contentItemId' => 'content_item_id',
                        'assignedTo' => 'assigned_to',
                        'title' => 'title',
                        'description' => 'description',
                        'targetAudience' => 'target_audience',
                        'keyMessages' => 'key_messages',
                        'callToAction' => 'call_to_action',
                        'status' => 'status',
                        'priority' => 'priority',
                        'dueDate' => 'due_date',
                        'estimatedWordCount' => 'estimated_word_count',
                        'keywords' => 'keywords',
                        'references' => 'references',
                        'requirements' => 'requirements',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'content_briefs',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[21],
                ],
                'name' => [
                    'App\\Entity\\ContentBrief',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'text',
                    'text',
                    'text',
                    'text',
                    'string',
                    'string',
                    'datetime_immutable',
                    'integer',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'contentItemId',
                    'assignedTo',
                    'title',
                    'description',
                    'targetAudience',
                    'keyMessages',
                    'callToAction',
                    'status',
                    'priority',
                    'dueDate',
                    'estimatedWordCount',
                    'keywords',
                    'references',
                    'requirements',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'content_item_id',
                    'assigned_to',
                    'title',
                    'description',
                    'target_audience',
                    'key_messages',
                    'call_to_action',
                    'status',
                    'priority',
                    'due_date',
                    'estimated_word_count',
                    'keywords',
                    'references',
                    'requirements',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    4 => true,
                    true,
                    8 => true,
                    true,
                    true,
                    13 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                ],
                'length' => [
                    6 => 255,
                    11 => 50,
                    20,
                ],
            ],
        ],
        $o[0],
        []
    );
},
13 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Package',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'clientId' => $o[2],
                        'name' => $o[3],
                        'slug' => $o[4],
                        'description' => $o[5],
                        'price' => $o[6],
                        'billingCycle' => $o[7],
                        'features' => $o[8],
                        'includedServices' => $o[9],
                        'isPopular' => $o[10],
                        'isActive' => $o[11],
                        'sortOrder' => $o[12],
                        'metadata' => $o[13],
                        'createdAt' => $o[14],
                        'updatedAt' => $o[15],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'client_id' => 'clientId',
                        'name' => 'name',
                        'slug' => 'slug',
                        'description' => 'description',
                        'price' => 'price',
                        'billing_cycle' => 'billingCycle',
                        'features' => 'features',
                        'included_services' => 'includedServices',
                        'is_popular' => 'isPopular',
                        'is_active' => 'isActive',
                        'sort_order' => 'sortOrder',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'clientId' => 'client_id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'description' => 'description',
                        'price' => 'price',
                        'billingCycle' => 'billing_cycle',
                        'features' => 'features',
                        'includedServices' => 'included_services',
                        'isPopular' => 'is_popular',
                        'isActive' => 'is_active',
                        'sortOrder' => 'sort_order',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'packages',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[16],
                ],
                'name' => [
                    'App\\Entity\\Package',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'string',
                    'string',
                    'text',
                    'decimal',
                    'string',
                    'jsonb',
                    'jsonb',
                    'boolean',
                    'boolean',
                    'integer',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'clientId',
                    'name',
                    'slug',
                    'description',
                    'price',
                    'billingCycle',
                    'features',
                    'includedServices',
                    'isPopular',
                    'isActive',
                    'sortOrder',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'client_id',
                    'name',
                    'slug',
                    'description',
                    'price',
                    'billing_cycle',
                    'features',
                    'included_services',
                    'is_popular',
                    'is_active',
                    'sort_order',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    4 => true,
                    true,
                    true,
                    true,
                    13 => true,
                ],
                'length' => [
                    3 => 255,
                    255,
                    7 => 50,
                ],
                'precision' => [
                    6 => 10,
                ],
                'scale' => [
                    6 => 2,
                ],
                'options' => [
                    10 => [
                        'default' => false,
                    ],
                    [
                        'default' => true,
                    ],
                    [
                        'default' => 0,
                    ],
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    16 => $o[17],
                ],
                'factory' => [
                    16 => $o[17],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    17 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    17 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    17 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    17 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    17 => null,
                ],
                'nameBasedNamespace' => [
                    17 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
14 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Post',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'siteId' => $o[2],
                        'authorId' => $o[3],
                        'title' => $o[4],
                        'slug' => $o[5],
                        'status' => $o[6],
                        'excerpt' => $o[7],
                        'publishedAt' => $o[8],
                        'createdAt' => $o[9],
                        'updatedAt' => $o[10],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'site_id' => 'siteId',
                        'author_id' => 'authorId',
                        'title' => 'title',
                        'slug' => 'slug',
                        'status' => 'status',
                        'excerpt' => 'excerpt',
                        'published_at' => 'publishedAt',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'siteId' => 'site_id',
                        'authorId' => 'author_id',
                        'title' => 'title',
                        'slug' => 'slug',
                        'status' => 'status',
                        'excerpt' => 'excerpt',
                        'publishedAt' => 'published_at',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'posts',
                        'indexes' => [
                            'idx_posts_tenant_status_pub' => [
                                'columns' => [
                                    'tenant_id',
                                    'status',
                                    'published_at',
                                ],
                            ],
                        ],
                        'uniqueConstraints' => [
                            [
                                'columns' => [
                                    'tenant_id',
                                    'site_id',
                                    'slug',
                                ],
                            ],
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'tenant' => $o[11],
                    ],
                ],
                'idGenerator' => [
                    $o[13],
                ],
                'name' => [
                    'App\\Entity\\Post',
                    12 => 'tenant_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'text',
                    'datetimetz_immutable',
                    'datetimetz_immutable',
                    'datetimetz_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'siteId',
                    'authorId',
                    'title',
                    'slug',
                    'status',
                    'excerpt',
                    'publishedAt',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'site_id',
                    'author_id',
                    'title',
                    'slug',
                    'status',
                    'excerpt',
                    'published_at',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    7 => true,
                    true,
                    12 => false,
                ],
                'options' => [
                    6 => [
                        'default' => 'draft',
                    ],
                ],
                'fetch' => [
                    11 => 2,
                ],
                'sourceEntity' => [
                    11 => 'App\\Entity\\Post',
                ],
                'sourceToTargetKeyColumns' => [
                    11 => [
                        'tenant_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    11 => [
                        'id' => 'tenant_id',
                    ],
                ],
                'joinColumns' => [
                    11 => [
                        $o[12],
                    ],
                ],
                'joinColumnFieldNames' => [
                    11 => [
                        'tenant_id' => 'tenant_id',
                    ],
                ],
                'deferrable' => [
                    12 => false,
                ],
                'unique' => [
                    12 => false,
                ],
                'onDelete' => [
                    12 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    12 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    11 => 'tenant',
                ],
                'targetEntity' => [
                    11 => 'App\\Entity\\Tenant',
                ],
            ],
        ],
        $o[0],
        []
    );
},
15 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\SystemUser',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'username' => $o[2],
                        'displayName' => $o[3],
                        'description' => $o[4],
                        'permissions' => $o[5],
                        'isActive' => $o[6],
                        'createdAt' => $o[7],
                        'updatedAt' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'username' => 'username',
                        'display_name' => 'displayName',
                        'description' => 'description',
                        'permissions' => 'permissions',
                        'is_active' => 'isActive',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'username' => 'username',
                        'displayName' => 'display_name',
                        'description' => 'description',
                        'permissions' => 'permissions',
                        'isActive' => 'is_active',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'system_users',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\SystemUser',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    true,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'text',
                    'json',
                    'boolean',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'username',
                    'displayName',
                    'description',
                    'permissions',
                    'isActive',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'username',
                    'display_name',
                    'description',
                    'permissions',
                    'is_active',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
                'nullable' => [
                    4 => true,
                ],
                'options' => [
                    6 => [
                        'default' => true,
                    ],
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    9 => $o[10],
                ],
                'factory' => [
                    9 => $o[10],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    10 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    10 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    10 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    10 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    10 => null,
                ],
                'nameBasedNamespace' => [
                    10 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
16 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Review',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'platform' => $o[4],
                        'reviewId' => $o[5],
                        'reviewerName' => $o[6],
                        'rating' => $o[7],
                        'title' => $o[8],
                        'content' => $o[9],
                        'status' => $o[10],
                        'reviewDate' => $o[11],
                        'reviewerImage' => $o[12],
                        'isVerified' => $o[13],
                        'isResponse' => $o[14],
                        'response' => $o[15],
                        'responseDate' => $o[16],
                        'metadata' => $o[17],
                        'createdAt' => $o[18],
                        'updatedAt' => $o[19],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'platform' => 'platform',
                        'review_id' => 'reviewId',
                        'reviewer_name' => 'reviewerName',
                        'rating' => 'rating',
                        'title' => 'title',
                        'content' => 'content',
                        'status' => 'status',
                        'review_date' => 'reviewDate',
                        'reviewer_image' => 'reviewerImage',
                        'is_verified' => 'isVerified',
                        'is_response' => 'isResponse',
                        'response' => 'response',
                        'response_date' => 'responseDate',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'platform' => 'platform',
                        'reviewId' => 'review_id',
                        'reviewerName' => 'reviewer_name',
                        'rating' => 'rating',
                        'title' => 'title',
                        'content' => 'content',
                        'status' => 'status',
                        'reviewDate' => 'review_date',
                        'reviewerImage' => 'reviewer_image',
                        'isVerified' => 'is_verified',
                        'isResponse' => 'is_response',
                        'response' => 'response',
                        'responseDate' => 'response_date',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'reviews',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[20],
                ],
                'name' => [
                    'App\\Entity\\Review',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'text',
                    'text',
                    'string',
                    'datetime_immutable',
                    'string',
                    'boolean',
                    'boolean',
                    'text',
                    'datetime_immutable',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'platform',
                    'reviewId',
                    'reviewerName',
                    'rating',
                    'title',
                    'content',
                    'status',
                    'reviewDate',
                    'reviewerImage',
                    'isVerified',
                    'isResponse',
                    'response',
                    'responseDate',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'platform',
                    'review_id',
                    'reviewer_name',
                    'rating',
                    'title',
                    'content',
                    'status',
                    'review_date',
                    'reviewer_image',
                    'is_verified',
                    'is_response',
                    'response',
                    'response_date',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    5 => true,
                    8 => true,
                    11 => true,
                    true,
                    15 => true,
                    true,
                    true,
                ],
                'length' => [
                    4 => 100,
                    255,
                    255,
                    10 => 50,
                    12 => 255,
                ],
                'options' => [
                    13 => [
                        'default' => false,
                    ],
                    [
                        'default' => false,
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
17 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\MediaAsset',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'filename' => $o[2],
                        'originalFilename' => $o[3],
                        'mimeType' => $o[4],
                        'fileSize' => $o[5],
                        'storageKey' => $o[6],
                        'storageProvider' => $o[7],
                        'title' => $o[8],
                        'description' => $o[9],
                        'altText' => $o[10],
                        'type' => $o[11],
                        'dimensions' => $o[12],
                        'metadata' => $o[13],
                        'processingStatus' => $o[14],
                        'status' => $o[15],
                        'uploadedAt' => $o[16],
                        'createdAt' => $o[17],
                        'updatedAt' => $o[18],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'filename' => 'filename',
                        'original_filename' => 'originalFilename',
                        'mime_type' => 'mimeType',
                        'file_size' => 'fileSize',
                        'storage_key' => 'storageKey',
                        'storage_provider' => 'storageProvider',
                        'title' => 'title',
                        'description' => 'description',
                        'alt_text' => 'altText',
                        'type' => 'type',
                        'dimensions' => 'dimensions',
                        'metadata' => 'metadata',
                        'processing_status' => 'processingStatus',
                        'status' => 'status',
                        'uploaded_at' => 'uploadedAt',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'filename' => 'filename',
                        'originalFilename' => 'original_filename',
                        'mimeType' => 'mime_type',
                        'fileSize' => 'file_size',
                        'storageKey' => 'storage_key',
                        'storageProvider' => 'storage_provider',
                        'title' => 'title',
                        'description' => 'description',
                        'altText' => 'alt_text',
                        'type' => 'type',
                        'dimensions' => 'dimensions',
                        'metadata' => 'metadata',
                        'processingStatus' => 'processing_status',
                        'status' => 'status',
                        'uploadedAt' => 'uploaded_at',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'media_assets',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'ownerClient' => $o[19],
                    ],
                ],
                'idGenerator' => [
                    $o[21],
                ],
                'name' => [
                    'App\\Entity\\MediaAsset',
                    20 => 'owner_client_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    20 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'string',
                    'bigint',
                    'string',
                    'string',
                    'string',
                    'text',
                    'string',
                    'string',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'filename',
                    'originalFilename',
                    'mimeType',
                    'fileSize',
                    'storageKey',
                    'storageProvider',
                    'title',
                    'description',
                    'altText',
                    'type',
                    'dimensions',
                    'metadata',
                    'processingStatus',
                    'status',
                    'uploadedAt',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'filename',
                    'original_filename',
                    'mime_type',
                    'file_size',
                    'storage_key',
                    'storage_provider',
                    'title',
                    'description',
                    'alt_text',
                    'type',
                    'dimensions',
                    'metadata',
                    'processing_status',
                    'status',
                    'uploaded_at',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    255,
                    100,
                    6 => 255,
                    50,
                    255,
                    10 => 255,
                    50,
                ],
                'nullable' => [
                    8 => true,
                    true,
                    true,
                    12 => true,
                    true,
                    true,
                    20 => true,
                ],
                'options' => [
                    15 => [
                        'default' => 'active',
                    ],
                ],
                'fetch' => [
                    19 => 2,
                ],
                'sourceEntity' => [
                    19 => 'App\\Entity\\MediaAsset',
                ],
                'sourceToTargetKeyColumns' => [
                    19 => [
                        'owner_client_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    19 => [
                        'id' => 'owner_client_id',
                    ],
                ],
                'joinColumns' => [
                    19 => [
                        $o[20],
                    ],
                ],
                'joinColumnFieldNames' => [
                    19 => [
                        'owner_client_id' => 'owner_client_id',
                    ],
                ],
                'deferrable' => [
                    20 => false,
                ],
                'onDelete' => [
                    20 => 'SET NULL',
                ],
                'referencedColumnName' => [
                    20 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    19 => 'ownerClient',
                ],
                'targetEntity' => [
                    19 => 'App\\Entity\\Client',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    21 => $o[22],
                ],
                'factory' => [
                    21 => $o[22],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    22 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    22 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    22 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    22 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    22 => null,
                ],
                'nameBasedNamespace' => [
                    22 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
18 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Tag',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'slug' => $o[3],
                        'color' => $o[4],
                        'status' => $o[5],
                        'createdAt' => $o[6],
                        'updatedAt' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'color' => 'color',
                        'status' => 'status',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'color' => 'color',
                        'status' => 'status',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'tags',
                        'uniqueConstraints' => [
                            [
                                'columns' => [
                                    'tenant_id',
                                    'name',
                                ],
                            ],
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'tenant' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\Tag',
                    9 => 'tenant_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'datetimetz_immutable',
                    'datetimetz_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'slug',
                    'color',
                    'status',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'slug',
                    'color',
                    'status',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 100,
                    100,
                    7,
                    50,
                ],
                'nullable' => [
                    4 => true,
                    9 => true,
                ],
                'options' => [
                    5 => [
                        'default' => 'active',
                    ],
                ],
                'fetch' => [
                    8 => 2,
                ],
                'sourceEntity' => [
                    8 => 'App\\Entity\\Tag',
                ],
                'sourceToTargetKeyColumns' => [
                    8 => [
                        'tenant_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    8 => [
                        'id' => 'tenant_id',
                    ],
                ],
                'joinColumns' => [
                    8 => [
                        $o[9],
                    ],
                ],
                'joinColumnFieldNames' => [
                    8 => [
                        'tenant_id' => 'tenant_id',
                    ],
                ],
                'deferrable' => [
                    9 => false,
                ],
                'unique' => [
                    9 => false,
                ],
                'onDelete' => [
                    9 => 'SET NULL',
                ],
                'referencedColumnName' => [
                    9 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    8 => 'tenant',
                ],
                'targetEntity' => [
                    8 => 'App\\Entity\\Tenant',
                ],
            ],
        ],
        $o[0],
        []
    );
},
19 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Citation',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'platform' => $o[4],
                        'businessName' => $o[5],
                        'url' => $o[6],
                        'phone' => $o[7],
                        'address' => $o[8],
                        'city' => $o[9],
                        'state' => $o[10],
                        'zipCode' => $o[11],
                        'website' => $o[12],
                        'description' => $o[13],
                        'status' => $o[14],
                        'claimStatus' => $o[15],
                        'claimDate' => $o[16],
                        'businessHours' => $o[17],
                        'categories' => $o[18],
                        'metadata' => $o[19],
                        'createdAt' => $o[20],
                        'updatedAt' => $o[21],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'platform' => 'platform',
                        'business_name' => 'businessName',
                        'url' => 'url',
                        'phone' => 'phone',
                        'address' => 'address',
                        'city' => 'city',
                        'state' => 'state',
                        'zip_code' => 'zipCode',
                        'website' => 'website',
                        'description' => 'description',
                        'status' => 'status',
                        'claim_status' => 'claimStatus',
                        'claim_date' => 'claimDate',
                        'business_hours' => 'businessHours',
                        'categories' => 'categories',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'platform' => 'platform',
                        'businessName' => 'business_name',
                        'url' => 'url',
                        'phone' => 'phone',
                        'address' => 'address',
                        'city' => 'city',
                        'state' => 'state',
                        'zipCode' => 'zip_code',
                        'website' => 'website',
                        'description' => 'description',
                        'status' => 'status',
                        'claimStatus' => 'claim_status',
                        'claimDate' => 'claim_date',
                        'businessHours' => 'business_hours',
                        'categories' => 'categories',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'citations',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[22],
                ],
                'name' => [
                    'App\\Entity\\Citation',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'text',
                    'string',
                    'string',
                    'datetime_immutable',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'platform',
                    'businessName',
                    'url',
                    'phone',
                    'address',
                    'city',
                    'state',
                    'zipCode',
                    'website',
                    'description',
                    'status',
                    'claimStatus',
                    'claimDate',
                    'businessHours',
                    'categories',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'platform',
                    'business_name',
                    'url',
                    'phone',
                    'address',
                    'city',
                    'state',
                    'zip_code',
                    'website',
                    'description',
                    'status',
                    'claim_status',
                    'claim_date',
                    'business_hours',
                    'categories',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    6 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    15 => true,
                    true,
                    true,
                    true,
                    true,
                ],
                'length' => [
                    4 => 100,
                    255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    20,
                    255,
                    14 => 50,
                    50,
                ],
            ],
        ],
        $o[0],
        []
    );
},
20 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'clientId' => $o[2],
                        'email' => $o[3],
                        'passwordHash' => $o[4],
                        'firstName' => $o[5],
                        'lastName' => $o[6],
                        'status' => $o[7],
                        'lastLoginAt' => $o[8],
                        'role' => $o[9],
                        'metadata' => $o[10],
                        'createdAt' => $o[11],
                        'updatedAt' => $o[12],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'client_id' => 'clientId',
                        'email' => 'email',
                        'password_hash' => 'passwordHash',
                        'first_name' => 'firstName',
                        'last_name' => 'lastName',
                        'status' => 'status',
                        'last_login_at' => 'lastLoginAt',
                        'role' => 'role',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'clientId' => 'client_id',
                        'email' => 'email',
                        'passwordHash' => 'password_hash',
                        'firstName' => 'first_name',
                        'lastName' => 'last_name',
                        'status' => 'status',
                        'lastLoginAt' => 'last_login_at',
                        'role' => 'role',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'users',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'organization' => $o[13],
                        'agency' => $o[15],
                        'tenant' => $o[17],
                        'requestedAuditIntakes' => $o[19],
                        'initiatedAuditRuns' => $o[20],
                        'oauthConnections' => $o[21],
                        'tokens' => $o[22],
                        'userAccess' => $o[23],
                    ],
                ],
                'idGenerator' => [
                    $o[24],
                ],
                'name' => [
                    'App\\Entity\\User',
                    14 => 'organization_id',
                    16 => 'agency_id',
                    18 => 'tenant_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    14 => false,
                    16 => false,
                    18 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'datetimetz_immutable',
                    'string',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'clientId',
                    'email',
                    'passwordHash',
                    'firstName',
                    'lastName',
                    'status',
                    'lastLoginAt',
                    'role',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'client_id',
                    'email',
                    'password_hash',
                    'first_name',
                    'last_name',
                    'status',
                    'last_login_at',
                    'role',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    4 => true,
                    true,
                    true,
                    8 => true,
                    10 => true,
                    14 => false,
                    16 => true,
                    18 => true,
                ],
                'options' => [
                    7 => [
                        'default' => 'invited',
                    ],
                ],
                'length' => [
                    9 => 32,
                ],
                'fetch' => [
                    13 => 2,
                    15 => 2,
                    17 => 2,
                    19 => 2,
                    2,
                    2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    13 => 'App\\Entity\\User',
                    15 => 'App\\Entity\\User',
                    17 => 'App\\Entity\\User',
                    19 => 'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                    'App\\Entity\\User',
                ],
                'sourceToTargetKeyColumns' => [
                    13 => [
                        'organization_id' => 'id',
                    ],
                    15 => [
                        'agency_id' => 'id',
                    ],
                    17 => [
                        'tenant_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    13 => [
                        'id' => 'organization_id',
                    ],
                    15 => [
                        'id' => 'agency_id',
                    ],
                    17 => [
                        'id' => 'tenant_id',
                    ],
                ],
                'joinColumns' => [
                    13 => [
                        $o[14],
                    ],
                    15 => [
                        $o[16],
                    ],
                    17 => [
                        $o[18],
                    ],
                ],
                'joinColumnFieldNames' => [
                    13 => [
                        'organization_id' => 'organization_id',
                    ],
                    15 => [
                        'agency_id' => 'agency_id',
                    ],
                    17 => [
                        'tenant_id' => 'tenant_id',
                    ],
                ],
                'deferrable' => [
                    14 => false,
                    16 => false,
                    18 => false,
                ],
                'referencedColumnName' => [
                    14 => 'id',
                    16 => 'id',
                    18 => 'id',
                ],
                'inversedBy' => [
                    15 => 'users',
                ],
                'mappedBy' => [
                    19 => 'requestedBy',
                    'initiatedBy',
                    'user',
                    'user',
                    'user',
                ],
                'cascade' => [
                    21 => [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    21 => true,
                    true,
                    true,
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    13 => 'organization',
                    15 => 'agency',
                    17 => 'tenant',
                    19 => 'requestedAuditIntakes',
                    'initiatedAuditRuns',
                    'oauthConnections',
                    'tokens',
                    'userAccess',
                ],
                'targetEntity' => [
                    13 => 'App\\Entity\\Organization',
                    15 => 'App\\Entity\\Agency',
                    17 => 'App\\Entity\\Tenant',
                    19 => 'App\\Entity\\AuditIntake',
                    'App\\Entity\\AuditRun',
                    'App\\Entity\\OAuthConnection',
                    'App\\Entity\\OAuthToken',
                    'App\\Entity\\UserClientAccess',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    24 => $o[25],
                ],
                'factory' => [
                    24 => $o[25],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    25 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    25 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    25 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    25 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    25 => null,
                ],
                'nameBasedNamespace' => [
                    25 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
21 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AuditConversionGoal',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AuditConversionGoalRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'type' => $o[2],
                        'kpi' => $o[3],
                        'baseline' => $o[4],
                        'valuePerConversion' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'type' => 'type',
                        'kpi' => 'kpi',
                        'baseline' => 'baseline',
                        'value_per_conversion' => 'valuePerConversion',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'type' => 'type',
                        'kpi' => 'kpi',
                        'baseline' => 'baseline',
                        'valuePerConversion' => 'value_per_conversion',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'audit_conversion_goal',
                    ],
                ],
                'associationMappings' => [
                    [
                        'intake' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\AuditConversionGoal',
                    7 => 'intake_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    7 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'float',
                    'decimal',
                ],
                'fieldName' => [
                    1 => 'id',
                    'type',
                    'kpi',
                    'baseline',
                    'valuePerConversion',
                ],
                'columnName' => [
                    1 => 'id',
                    'type',
                    'kpi',
                    'baseline',
                    'value_per_conversion',
                ],
                'length' => [
                    2 => 32,
                    128,
                ],
                'nullable' => [
                    4 => true,
                    true,
                    7 => false,
                ],
                'precision' => [
                    5 => 10,
                ],
                'scale' => [
                    5 => 2,
                ],
                'fetch' => [
                    6 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\AuditConversionGoal',
                ],
                'inversedBy' => [
                    6 => 'goals',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'intake_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'intake_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'intake_id' => 'intake_id',
                    ],
                ],
                'deferrable' => [
                    7 => false,
                ],
                'onDelete' => [
                    7 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'intake',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\AuditIntake',
                ],
            ],
        ],
        $o[0],
        []
    );
},
22 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\CaseStudy',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CaseStudyRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'slug' => $o[3],
                        'summary' => $o[4],
                        'metricsJson' => $o[5],
                        'heroImage' => $o[6],
                        'practiceArea' => $o[7],
                        'isActive' => $o[8],
                        'sort' => $o[9],
                        'createdAt' => $o[10],
                        'updatedAt' => $o[11],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'slug' => 'slug',
                        'summary' => 'summary',
                        'metrics_json' => 'metricsJson',
                        'hero_image' => 'heroImage',
                        'practice_area' => 'practiceArea',
                        'is_active' => 'isActive',
                        'sort' => 'sort',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'slug' => 'slug',
                        'summary' => 'summary',
                        'metricsJson' => 'metrics_json',
                        'heroImage' => 'hero_image',
                        'practiceArea' => 'practice_area',
                        'isActive' => 'is_active',
                        'sort' => 'sort',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'case_studies',
                        'uniqueConstraints' => [
                            'uq_case_studies_tenant_slug' => [
                                'columns' => [
                                    'tenant_id',
                                    'slug',
                                ],
                            ],
                        ],
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'onPreUpdate',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'tenant' => $o[12],
                    ],
                ],
                'idGenerator' => [
                    $o[14],
                ],
                'name' => [
                    'App\\Entity\\CaseStudy',
                    13 => 'tenant_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    13 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'text',
                    'json',
                    'string',
                    'string',
                    'boolean',
                    'integer',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'slug',
                    'summary',
                    'metricsJson',
                    'heroImage',
                    'practiceArea',
                    'isActive',
                    'sort',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'slug',
                    'summary',
                    'metrics_json',
                    'hero_image',
                    'practice_area',
                    'is_active',
                    'sort',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    4 => true,
                    6 => true,
                    true,
                    13 => false,
                ],
                'options' => [
                    5 => [
                        'jsonb' => true,
                    ],
                    8 => [
                        'default' => true,
                    ],
                    [
                        'default' => 0,
                    ],
                ],
                'fetch' => [
                    12 => 2,
                ],
                'sourceEntity' => [
                    12 => 'App\\Entity\\CaseStudy',
                ],
                'sourceToTargetKeyColumns' => [
                    12 => [
                        'tenant_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    12 => [
                        'id' => 'tenant_id',
                    ],
                ],
                'joinColumns' => [
                    12 => [
                        $o[13],
                    ],
                ],
                'joinColumnFieldNames' => [
                    12 => [
                        'tenant_id' => 'tenant_id',
                    ],
                ],
                'deferrable' => [
                    13 => false,
                ],
                'onDelete' => [
                    13 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    13 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    12 => 'tenant',
                ],
                'targetEntity' => [
                    12 => 'App\\Entity\\Tenant',
                ],
            ],
        ],
        $o[0],
        []
    );
},
23 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Agency',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'domain' => $o[3],
                        'description' => $o[4],
                        'websiteUrl' => $o[5],
                        'phone' => $o[6],
                        'email' => $o[7],
                        'address' => $o[8],
                        'city' => $o[9],
                        'state' => $o[10],
                        'postalCode' => $o[11],
                        'country' => $o[12],
                        'status' => $o[13],
                        'metadata' => $o[14],
                        'createdAt' => $o[15],
                        'updatedAt' => $o[16],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'domain' => 'domain',
                        'description' => 'description',
                        'website_url' => 'websiteUrl',
                        'phone' => 'phone',
                        'email' => 'email',
                        'address' => 'address',
                        'city' => 'city',
                        'state' => 'state',
                        'postal_code' => 'postalCode',
                        'country' => 'country',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'domain' => 'domain',
                        'description' => 'description',
                        'websiteUrl' => 'website_url',
                        'phone' => 'phone',
                        'email' => 'email',
                        'address' => 'address',
                        'city' => 'city',
                        'state' => 'state',
                        'postalCode' => 'postal_code',
                        'country' => 'country',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'agencies',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'users' => $o[17],
                        'clients' => $o[18],
                    ],
                ],
                'idGenerator' => [
                    $o[19],
                ],
                'name' => [
                    'App\\Entity\\Agency',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'text',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'domain',
                    'description',
                    'websiteUrl',
                    'phone',
                    'email',
                    'address',
                    'city',
                    'state',
                    'postalCode',
                    'country',
                    'status',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'domain',
                    'description',
                    'website_url',
                    'phone',
                    'email',
                    'address',
                    'city',
                    'state',
                    'postal_code',
                    'country',
                    'status',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    14 => true,
                ],
                'length' => [
                    5 => 255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    10,
                    255,
                ],
                'options' => [
                    13 => [
                        'default' => 'active',
                    ],
                ],
                'cascade' => [
                    17 => [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                ],
                'fetch' => [
                    17 => 2,
                    2,
                ],
                'orphanRemoval' => [
                    17 => true,
                    true,
                ],
                'sourceEntity' => [
                    17 => 'App\\Entity\\Agency',
                    'App\\Entity\\Agency',
                ],
                'mappedBy' => [
                    17 => 'agency',
                    'agency',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    17 => 'users',
                    'clients',
                ],
                'targetEntity' => [
                    17 => 'App\\Entity\\User',
                    'App\\Entity\\Client',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    19 => $o[20],
                ],
                'factory' => [
                    19 => $o[20],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    20 => null,
                ],
                'nameBasedNamespace' => [
                    20 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
24 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\NewsletterSubscription',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'email' => $o[3],
                        'firstName' => $o[4],
                        'lastName' => $o[5],
                        'company' => $o[6],
                        'phone' => $o[7],
                        'interests' => $o[8],
                        'status' => $o[9],
                        'source' => $o[10],
                        'metadata' => $o[11],
                        'subscribedAt' => $o[12],
                        'unsubscribedAt' => $o[13],
                        'createdAt' => $o[14],
                        'updatedAt' => $o[15],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'email' => 'email',
                        'first_name' => 'firstName',
                        'last_name' => 'lastName',
                        'company' => 'company',
                        'phone' => 'phone',
                        'interests' => 'interests',
                        'status' => 'status',
                        'source' => 'source',
                        'metadata' => 'metadata',
                        'subscribed_at' => 'subscribedAt',
                        'unsubscribed_at' => 'unsubscribedAt',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'email' => 'email',
                        'firstName' => 'first_name',
                        'lastName' => 'last_name',
                        'company' => 'company',
                        'phone' => 'phone',
                        'interests' => 'interests',
                        'status' => 'status',
                        'source' => 'source',
                        'metadata' => 'metadata',
                        'subscribedAt' => 'subscribed_at',
                        'unsubscribedAt' => 'unsubscribed_at',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'newsletter_subscriptions',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[16],
                ],
                'name' => [
                    'App\\Entity\\NewsletterSubscription',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'jsonb',
                    'string',
                    'string',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'email',
                    'firstName',
                    'lastName',
                    'company',
                    'phone',
                    'interests',
                    'status',
                    'source',
                    'metadata',
                    'subscribedAt',
                    'unsubscribedAt',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'email',
                    'first_name',
                    'last_name',
                    'company',
                    'phone',
                    'interests',
                    'status',
                    'source',
                    'metadata',
                    'subscribed_at',
                    'unsubscribed_at',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    4 => true,
                    true,
                    true,
                    true,
                    true,
                    10 => true,
                    true,
                    13 => true,
                ],
                'length' => [
                    3 => 255,
                    255,
                    255,
                    255,
                    255,
                    10 => 255,
                ],
                'options' => [
                    9 => [
                        'default' => 'subscribed',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
25 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\OpenPhoneMessageLog',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'openPhoneMessageId' => $o[2],
                        'direction' => $o[3],
                        'status' => $o[4],
                        'fromNumber' => $o[5],
                        'toNumber' => $o[6],
                        'content' => $o[7],
                        'attachments' => $o[8],
                        'sentAt' => $o[9],
                        'metadata' => $o[10],
                        'isFollowUpRequired' => $o[11],
                        'notes' => $o[12],
                        'createdAt' => $o[13],
                        'updatedAt' => $o[14],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'open_phone_message_id' => 'openPhoneMessageId',
                        'direction' => 'direction',
                        'status' => 'status',
                        'from_number' => 'fromNumber',
                        'to_number' => 'toNumber',
                        'content' => 'content',
                        'attachments' => 'attachments',
                        'sent_at' => 'sentAt',
                        'metadata' => 'metadata',
                        'is_follow_up_required' => 'isFollowUpRequired',
                        'notes' => 'notes',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'openPhoneMessageId' => 'open_phone_message_id',
                        'direction' => 'direction',
                        'status' => 'status',
                        'fromNumber' => 'from_number',
                        'toNumber' => 'to_number',
                        'content' => 'content',
                        'attachments' => 'attachments',
                        'sentAt' => 'sent_at',
                        'metadata' => 'metadata',
                        'isFollowUpRequired' => 'is_follow_up_required',
                        'notes' => 'notes',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'openphone_message_logs',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[15],
                        'integration' => $o[17],
                    ],
                ],
                'idGenerator' => [
                    $o[19],
                ],
                'name' => [
                    'App\\Entity\\OpenPhoneMessageLog',
                    16 => 'client_id',
                    18 => 'integration_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    16 => false,
                    18 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'text',
                    'jsonb',
                    'datetime_immutable',
                    'jsonb',
                    'boolean',
                    'text',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'openPhoneMessageId',
                    'direction',
                    'status',
                    'fromNumber',
                    'toNumber',
                    'content',
                    'attachments',
                    'sentAt',
                    'metadata',
                    'isFollowUpRequired',
                    'notes',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'open_phone_message_id',
                    'direction',
                    'status',
                    'from_number',
                    'to_number',
                    'content',
                    'attachments',
                    'sent_at',
                    'metadata',
                    'is_follow_up_required',
                    'notes',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    32,
                    32,
                    255,
                    255,
                ],
                'nullable' => [
                    5 => true,
                    true,
                    8 => true,
                    10 => true,
                    12 => true,
                    16 => false,
                    18 => false,
                ],
                'options' => [
                    11 => [
                        'default' => false,
                    ],
                ],
                'fetch' => [
                    15 => 2,
                    17 => 2,
                ],
                'sourceEntity' => [
                    15 => 'App\\Entity\\OpenPhoneMessageLog',
                    17 => 'App\\Entity\\OpenPhoneMessageLog',
                ],
                'sourceToTargetKeyColumns' => [
                    15 => [
                        'client_id' => 'id',
                    ],
                    17 => [
                        'integration_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    15 => [
                        'id' => 'client_id',
                    ],
                    17 => [
                        'id' => 'integration_id',
                    ],
                ],
                'joinColumns' => [
                    15 => [
                        $o[16],
                    ],
                    17 => [
                        $o[18],
                    ],
                ],
                'joinColumnFieldNames' => [
                    15 => [
                        'client_id' => 'client_id',
                    ],
                    17 => [
                        'integration_id' => 'integration_id',
                    ],
                ],
                'deferrable' => [
                    16 => false,
                    18 => false,
                ],
                'onDelete' => [
                    16 => 'CASCADE',
                    18 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    16 => 'id',
                    18 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    15 => 'client',
                    17 => 'integration',
                ],
                'targetEntity' => [
                    15 => 'App\\Entity\\Client',
                    17 => 'App\\Entity\\OpenPhoneIntegration',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    19 => $o[20],
                ],
                'factory' => [
                    19 => $o[20],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    20 => null,
                ],
                'nameBasedNamespace' => [
                    20 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
26 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Tenant',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'slug' => $o[3],
                        'status' => $o[4],
                        'timezone' => $o[5],
                        'createdAt' => $o[6],
                        'updatedAt' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'status' => 'status',
                        'timezone' => 'timezone',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'status' => 'status',
                        'timezone' => 'timezone',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'tenants',
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Tenant',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'datetimetz_immutable',
                    'datetimetz_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'slug',
                    'status',
                    'timezone',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'slug',
                    'status',
                    'timezone',
                    'created_at',
                    'updated_at',
                ],
                'unique' => [
                    3 => true,
                ],
                'options' => [
                    4 => [
                        'default' => 'trial',
                    ],
                    [
                        'default' => 'UTC',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
27 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\LeadEvent',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\LeadEventRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'type' => $o[2],
                        'direction' => $o[3],
                        'duration' => $o[4],
                        'notes' => $o[5],
                        'outcome' => $o[6],
                        'nextAction' => $o[7],
                        'createdAt' => $o[8],
                        'updatedAt' => $o[9],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'type' => 'type',
                        'direction' => 'direction',
                        'duration' => 'duration',
                        'notes' => 'notes',
                        'outcome' => 'outcome',
                        'next_action' => 'nextAction',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'type' => 'type',
                        'direction' => 'direction',
                        'duration' => 'duration',
                        'notes' => 'notes',
                        'outcome' => 'outcome',
                        'nextAction' => 'next_action',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'lead_events',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'lead' => $o[10],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\LeadEvent',
                    11 => 'lead_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    11 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'integer',
                    'text',
                    'string',
                    'text',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'type',
                    'direction',
                    'duration',
                    'notes',
                    'outcome',
                    'nextAction',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'type',
                    'direction',
                    'duration',
                    'notes',
                    'outcome',
                    'next_action',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 50,
                    20,
                    6 => 20,
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    true,
                    true,
                    11 => false,
                ],
                'fetch' => [
                    10 => 2,
                ],
                'sourceEntity' => [
                    10 => 'App\\Entity\\LeadEvent',
                ],
                'inversedBy' => [
                    10 => 'events',
                ],
                'sourceToTargetKeyColumns' => [
                    10 => [
                        'lead_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    10 => [
                        'id' => 'lead_id',
                    ],
                ],
                'joinColumns' => [
                    10 => [
                        $o[11],
                    ],
                ],
                'joinColumnFieldNames' => [
                    10 => [
                        'lead_id' => 'lead_id',
                    ],
                ],
                'deferrable' => [
                    11 => false,
                ],
                'onDelete' => [
                    11 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    11 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    10 => 'lead',
                ],
                'targetEntity' => [
                    10 => 'App\\Entity\\Lead',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    12 => $o[13],
                ],
                'factory' => [
                    12 => $o[13],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    13 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    13 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    13 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    13 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    13 => null,
                ],
                'nameBasedNamespace' => [
                    13 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
28 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\DocumentSignature',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'signatureImage' => $o[2],
                        'signatureData' => $o[3],
                        'ipAddress' => $o[4],
                        'userAgent' => $o[5],
                        'signedAt' => $o[6],
                        'metadata' => $o[7],
                        'status' => $o[8],
                        'comments' => $o[9],
                        'isDigitalSignature' => $o[10],
                        'createdAt' => $o[11],
                        'updatedAt' => $o[12],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'signature_image' => 'signatureImage',
                        'signature_data' => 'signatureData',
                        'ip_address' => 'ipAddress',
                        'user_agent' => 'userAgent',
                        'signed_at' => 'signedAt',
                        'metadata' => 'metadata',
                        'status' => 'status',
                        'comments' => 'comments',
                        'is_digital_signature' => 'isDigitalSignature',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'signatureImage' => 'signature_image',
                        'signatureData' => 'signature_data',
                        'ipAddress' => 'ip_address',
                        'userAgent' => 'user_agent',
                        'signedAt' => 'signed_at',
                        'metadata' => 'metadata',
                        'status' => 'status',
                        'comments' => 'comments',
                        'isDigitalSignature' => 'is_digital_signature',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'document_signatures',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'document' => $o[13],
                        'signedBy' => $o[15],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\DocumentSignature',
                    14 => 'document_id',
                    16 => 'signed_by_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    14 => false,
                    16 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'text',
                    'string',
                    'string',
                    'datetime_immutable',
                    'jsonb',
                    'string',
                    'text',
                    'boolean',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'signatureImage',
                    'signatureData',
                    'ipAddress',
                    'userAgent',
                    'signedAt',
                    'metadata',
                    'status',
                    'comments',
                    'isDigitalSignature',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'signature_image',
                    'signature_data',
                    'ip_address',
                    'user_agent',
                    'signed_at',
                    'metadata',
                    'status',
                    'comments',
                    'is_digital_signature',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    4 => 255,
                    500,
                    8 => 50,
                ],
                'nullable' => [
                    2 => true,
                    true,
                    true,
                    true,
                    7 => true,
                    9 => true,
                    14 => false,
                    16 => false,
                ],
                'options' => [
                    8 => [
                        'default' => 'pending',
                    ],
                    10 => [
                        'default' => false,
                    ],
                ],
                'fetch' => [
                    13 => 2,
                    15 => 2,
                ],
                'sourceEntity' => [
                    13 => 'App\\Entity\\DocumentSignature',
                    15 => 'App\\Entity\\DocumentSignature',
                ],
                'inversedBy' => [
                    13 => 'signatures',
                ],
                'sourceToTargetKeyColumns' => [
                    13 => [
                        'document_id' => 'id',
                    ],
                    15 => [
                        'signed_by_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    13 => [
                        'id' => 'document_id',
                    ],
                    15 => [
                        'id' => 'signed_by_id',
                    ],
                ],
                'joinColumns' => [
                    13 => [
                        $o[14],
                    ],
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    13 => [
                        'document_id' => 'document_id',
                    ],
                    15 => [
                        'signed_by_id' => 'signed_by_id',
                    ],
                ],
                'deferrable' => [
                    14 => false,
                    16 => false,
                ],
                'referencedColumnName' => [
                    14 => 'id',
                    16 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    13 => 'document',
                    15 => 'signedBy',
                ],
                'targetEntity' => [
                    13 => 'App\\Entity\\Document',
                    15 => 'App\\Entity\\User',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    17 => $o[18],
                ],
                'factory' => [
                    17 => $o[18],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    18 => null,
                ],
                'nameBasedNamespace' => [
                    18 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
29 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\OpenPhoneCallLog',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'openPhoneCallId' => $o[2],
                        'direction' => $o[3],
                        'status' => $o[4],
                        'fromNumber' => $o[5],
                        'toNumber' => $o[6],
                        'duration' => $o[7],
                        'startedAt' => $o[8],
                        'endedAt' => $o[9],
                        'recordingUrl' => $o[10],
                        'transcript' => $o[11],
                        'metadata' => $o[12],
                        'isFollowUpRequired' => $o[13],
                        'notes' => $o[14],
                        'createdAt' => $o[15],
                        'updatedAt' => $o[16],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'open_phone_call_id' => 'openPhoneCallId',
                        'direction' => 'direction',
                        'status' => 'status',
                        'from_number' => 'fromNumber',
                        'to_number' => 'toNumber',
                        'duration' => 'duration',
                        'started_at' => 'startedAt',
                        'ended_at' => 'endedAt',
                        'recording_url' => 'recordingUrl',
                        'transcript' => 'transcript',
                        'metadata' => 'metadata',
                        'is_follow_up_required' => 'isFollowUpRequired',
                        'notes' => 'notes',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'openPhoneCallId' => 'open_phone_call_id',
                        'direction' => 'direction',
                        'status' => 'status',
                        'fromNumber' => 'from_number',
                        'toNumber' => 'to_number',
                        'duration' => 'duration',
                        'startedAt' => 'started_at',
                        'endedAt' => 'ended_at',
                        'recordingUrl' => 'recording_url',
                        'transcript' => 'transcript',
                        'metadata' => 'metadata',
                        'isFollowUpRequired' => 'is_follow_up_required',
                        'notes' => 'notes',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'openphone_call_logs',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[17],
                        'integration' => $o[19],
                    ],
                ],
                'idGenerator' => [
                    $o[21],
                ],
                'name' => [
                    'App\\Entity\\OpenPhoneCallLog',
                    18 => 'client_id',
                    20 => 'integration_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    18 => false,
                    20 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'datetime_immutable',
                    'datetime_immutable',
                    'text',
                    'text',
                    'jsonb',
                    'boolean',
                    'text',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'openPhoneCallId',
                    'direction',
                    'status',
                    'fromNumber',
                    'toNumber',
                    'duration',
                    'startedAt',
                    'endedAt',
                    'recordingUrl',
                    'transcript',
                    'metadata',
                    'isFollowUpRequired',
                    'notes',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'open_phone_call_id',
                    'direction',
                    'status',
                    'from_number',
                    'to_number',
                    'duration',
                    'started_at',
                    'ended_at',
                    'recording_url',
                    'transcript',
                    'metadata',
                    'is_follow_up_required',
                    'notes',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    32,
                    32,
                    255,
                    255,
                ],
                'nullable' => [
                    5 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    14 => true,
                    18 => false,
                    20 => false,
                ],
                'options' => [
                    13 => [
                        'default' => false,
                    ],
                ],
                'fetch' => [
                    17 => 2,
                    19 => 2,
                ],
                'sourceEntity' => [
                    17 => 'App\\Entity\\OpenPhoneCallLog',
                    19 => 'App\\Entity\\OpenPhoneCallLog',
                ],
                'sourceToTargetKeyColumns' => [
                    17 => [
                        'client_id' => 'id',
                    ],
                    19 => [
                        'integration_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    17 => [
                        'id' => 'client_id',
                    ],
                    19 => [
                        'id' => 'integration_id',
                    ],
                ],
                'joinColumns' => [
                    17 => [
                        $o[18],
                    ],
                    19 => [
                        $o[20],
                    ],
                ],
                'joinColumnFieldNames' => [
                    17 => [
                        'client_id' => 'client_id',
                    ],
                    19 => [
                        'integration_id' => 'integration_id',
                    ],
                ],
                'deferrable' => [
                    18 => false,
                    20 => false,
                ],
                'onDelete' => [
                    18 => 'CASCADE',
                    20 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    18 => 'id',
                    20 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    17 => 'client',
                    19 => 'integration',
                ],
                'targetEntity' => [
                    17 => 'App\\Entity\\Client',
                    19 => 'App\\Entity\\OpenPhoneIntegration',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    21 => $o[22],
                ],
                'factory' => [
                    21 => $o[22],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    22 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    22 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    22 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    22 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    22 => null,
                ],
                'nameBasedNamespace' => [
                    22 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
30 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Invoice',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'subscriptionId' => $o[4],
                        'invoiceNumber' => $o[5],
                        'description' => $o[6],
                        'status' => $o[7],
                        'amount' => $o[8],
                        'taxAmount' => $o[9],
                        'totalAmount' => $o[10],
                        'currency' => $o[11],
                        'issuedAt' => $o[12],
                        'dueDate' => $o[13],
                        'paidAt' => $o[14],
                        'stripeInvoiceId' => $o[15],
                        'stripePaymentIntentId' => $o[16],
                        'notes' => $o[17],
                        'lineItems' => $o[18],
                        'taxDetails' => $o[19],
                        'metadata' => $o[20],
                        'createdAt' => $o[21],
                        'updatedAt' => $o[22],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'subscription_id' => 'subscriptionId',
                        'invoice_number' => 'invoiceNumber',
                        'description' => 'description',
                        'status' => 'status',
                        'amount' => 'amount',
                        'tax_amount' => 'taxAmount',
                        'total_amount' => 'totalAmount',
                        'currency' => 'currency',
                        'issued_at' => 'issuedAt',
                        'due_date' => 'dueDate',
                        'paid_at' => 'paidAt',
                        'stripe_invoice_id' => 'stripeInvoiceId',
                        'stripe_payment_intent_id' => 'stripePaymentIntentId',
                        'notes' => 'notes',
                        'line_items' => 'lineItems',
                        'tax_details' => 'taxDetails',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'subscriptionId' => 'subscription_id',
                        'invoiceNumber' => 'invoice_number',
                        'description' => 'description',
                        'status' => 'status',
                        'amount' => 'amount',
                        'taxAmount' => 'tax_amount',
                        'totalAmount' => 'total_amount',
                        'currency' => 'currency',
                        'issuedAt' => 'issued_at',
                        'dueDate' => 'due_date',
                        'paidAt' => 'paid_at',
                        'stripeInvoiceId' => 'stripe_invoice_id',
                        'stripePaymentIntentId' => 'stripe_payment_intent_id',
                        'notes' => 'notes',
                        'lineItems' => 'line_items',
                        'taxDetails' => 'tax_details',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'invoices',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                            'calculateTotalAmount',
                        ],
                        'prePersist' => [
                            'calculateTotalAmount',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[23],
                ],
                'name' => [
                    'App\\Entity\\Invoice',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'decimal',
                    'decimal',
                    'decimal',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                    'string',
                    'string',
                    'text',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'subscriptionId',
                    'invoiceNumber',
                    'description',
                    'status',
                    'amount',
                    'taxAmount',
                    'totalAmount',
                    'currency',
                    'issuedAt',
                    'dueDate',
                    'paidAt',
                    'stripeInvoiceId',
                    'stripePaymentIntentId',
                    'notes',
                    'lineItems',
                    'taxDetails',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'subscription_id',
                    'invoice_number',
                    'description',
                    'status',
                    'amount',
                    'tax_amount',
                    'total_amount',
                    'currency',
                    'issued_at',
                    'due_date',
                    'paid_at',
                    'stripe_invoice_id',
                    'stripe_payment_intent_id',
                    'notes',
                    'line_items',
                    'tax_details',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    4 => true,
                    14 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                ],
                'length' => [
                    5 => 255,
                    255,
                    50,
                    11 => 3,
                    15 => 255,
                    255,
                ],
                'precision' => [
                    8 => 10,
                    10,
                    10,
                ],
                'scale' => [
                    8 => 2,
                    2,
                    2,
                ],
                'options' => [
                    9 => [
                        'default' => 0,
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
31 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AuditRun',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AuditRunRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'status' => $o[2],
                        'scope' => $o[3],
                        'startedAt' => $o[4],
                        'completedAt' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'status' => 'status',
                        'scope' => 'scope',
                        'started_at' => 'startedAt',
                        'completed_at' => 'completedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'status' => 'status',
                        'scope' => 'scope',
                        'startedAt' => 'started_at',
                        'completedAt' => 'completed_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'audit_run',
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[6],
                        'intake' => $o[8],
                        'initiatedBy' => $o[10],
                    ],
                ],
                'idGenerator' => [
                    $o[12],
                ],
                'name' => [
                    'App\\Entity\\AuditRun',
                    7 => 'client_id',
                    9 => 'intake_id',
                    11 => 'initiated_by_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    7 => false,
                    9 => false,
                    11 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'json',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'status',
                    'scope',
                    'startedAt',
                    'completedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'status',
                    'scope',
                    'started_at',
                    'completed_at',
                ],
                'length' => [
                    2 => 16,
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    7 => false,
                    9 => false,
                    11 => true,
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                    10 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\AuditRun',
                    8 => 'App\\Entity\\AuditRun',
                    10 => 'App\\Entity\\AuditRun',
                ],
                'inversedBy' => [
                    6 => 'auditRuns',
                    10 => 'initiatedAuditRuns',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'client_id' => 'id',
                    ],
                    8 => [
                        'intake_id' => 'id',
                    ],
                    10 => [
                        'initiated_by_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'client_id',
                    ],
                    8 => [
                        'id' => 'intake_id',
                    ],
                    10 => [
                        'id' => 'initiated_by_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                    10 => [
                        $o[11],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'client_id' => 'client_id',
                    ],
                    8 => [
                        'intake_id' => 'intake_id',
                    ],
                    10 => [
                        'initiated_by_id' => 'initiated_by_id',
                    ],
                ],
                'deferrable' => [
                    7 => false,
                    9 => false,
                    11 => false,
                ],
                'onDelete' => [
                    7 => 'CASCADE',
                    9 => 'CASCADE',
                    11 => 'SET NULL',
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                    11 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'client',
                    8 => 'intake',
                    10 => 'initiatedBy',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Client',
                    8 => 'App\\Entity\\AuditIntake',
                    10 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
32 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AuditKeyword',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AuditKeywordRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'phrase' => $o[2],
                        'intent' => $o[3],
                        'priority' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'phrase' => 'phrase',
                        'intent' => 'intent',
                        'priority' => 'priority',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'phrase' => 'phrase',
                        'intent' => 'intent',
                        'priority' => 'priority',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'audit_keyword',
                    ],
                ],
                'associationMappings' => [
                    [
                        'intake' => $o[5],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\AuditKeyword',
                    6 => 'intake_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    6 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'smallint',
                ],
                'fieldName' => [
                    1 => 'id',
                    'phrase',
                    'intent',
                    'priority',
                ],
                'columnName' => [
                    1 => 'id',
                    'phrase',
                    'intent',
                    'priority',
                ],
                'length' => [
                    2 => 255,
                    16,
                ],
                'options' => [
                    4 => [
                        'default' => 3,
                    ],
                ],
                'fetch' => [
                    5 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\AuditKeyword',
                ],
                'inversedBy' => [
                    5 => 'keywords',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'intake_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'intake_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'intake_id' => 'intake_id',
                    ],
                ],
                'deferrable' => [
                    6 => false,
                ],
                'onDelete' => [
                    6 => 'CASCADE',
                ],
                'nullable' => [
                    6 => false,
                ],
                'referencedColumnName' => [
                    6 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'intake',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\AuditIntake',
                ],
            ],
        ],
        $o[0],
        []
    );
},
33 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\OpenPhoneIntegration',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'phoneNumber' => $o[2],
                        'displayName' => $o[3],
                        'settings' => $o[4],
                        'status' => $o[5],
                        'metadata' => $o[6],
                        'isDefault' => $o[7],
                        'autoLogCalls' => $o[8],
                        'autoLogMessages' => $o[9],
                        'syncContacts' => $o[10],
                        'createdAt' => $o[11],
                        'updatedAt' => $o[12],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'phone_number' => 'phoneNumber',
                        'display_name' => 'displayName',
                        'settings' => 'settings',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'is_default' => 'isDefault',
                        'auto_log_calls' => 'autoLogCalls',
                        'auto_log_messages' => 'autoLogMessages',
                        'sync_contacts' => 'syncContacts',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'phoneNumber' => 'phone_number',
                        'displayName' => 'display_name',
                        'settings' => 'settings',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'isDefault' => 'is_default',
                        'autoLogCalls' => 'auto_log_calls',
                        'autoLogMessages' => 'auto_log_messages',
                        'syncContacts' => 'sync_contacts',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'openphone_integrations',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[13],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\OpenPhoneIntegration',
                    14 => 'client_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    14 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'jsonb',
                    'string',
                    'jsonb',
                    'boolean',
                    'boolean',
                    'boolean',
                    'boolean',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'phoneNumber',
                    'displayName',
                    'settings',
                    'status',
                    'metadata',
                    'isDefault',
                    'autoLogCalls',
                    'autoLogMessages',
                    'syncContacts',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'phone_number',
                    'display_name',
                    'settings',
                    'status',
                    'metadata',
                    'is_default',
                    'auto_log_calls',
                    'auto_log_messages',
                    'sync_contacts',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    255,
                    5 => 24,
                ],
                'nullable' => [
                    3 => true,
                    true,
                    6 => true,
                    14 => false,
                ],
                'options' => [
                    5 => [
                        'default' => 'active',
                    ],
                    7 => [
                        'default' => false,
                    ],
                    [
                        'default' => true,
                    ],
                    [
                        'default' => true,
                    ],
                    [
                        'default' => false,
                    ],
                ],
                'fetch' => [
                    13 => 2,
                ],
                'sourceEntity' => [
                    13 => 'App\\Entity\\OpenPhoneIntegration',
                ],
                'inversedBy' => [
                    13 => 'openPhoneIntegrations',
                ],
                'sourceToTargetKeyColumns' => [
                    13 => [
                        'client_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    13 => [
                        'id' => 'client_id',
                    ],
                ],
                'joinColumns' => [
                    13 => [
                        $o[14],
                    ],
                ],
                'joinColumnFieldNames' => [
                    13 => [
                        'client_id' => 'client_id',
                    ],
                ],
                'deferrable' => [
                    14 => false,
                ],
                'onDelete' => [
                    14 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    14 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    13 => 'client',
                ],
                'targetEntity' => [
                    13 => 'App\\Entity\\Client',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    15 => $o[16],
                ],
                'factory' => [
                    15 => $o[16],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    16 => null,
                ],
                'nameBasedNamespace' => [
                    16 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
34 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\DocumentVersion',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'versionNumber' => $o[2],
                        'content' => $o[3],
                        'title' => $o[4],
                        'description' => $o[5],
                        'metadata' => $o[6],
                        'changes' => $o[7],
                        'isCurrent' => $o[8],
                        'createdAt' => $o[9],
                        'updatedAt' => $o[10],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'version_number' => 'versionNumber',
                        'content' => 'content',
                        'title' => 'title',
                        'description' => 'description',
                        'metadata' => 'metadata',
                        'changes' => 'changes',
                        'is_current' => 'isCurrent',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'versionNumber' => 'version_number',
                        'content' => 'content',
                        'title' => 'title',
                        'description' => 'description',
                        'metadata' => 'metadata',
                        'changes' => 'changes',
                        'isCurrent' => 'is_current',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'document_versions',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'document' => $o[11],
                        'createdBy' => $o[13],
                        'file' => $o[15],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\DocumentVersion',
                    12 => 'document_id',
                    14 => 'created_by_id',
                    16 => 'file_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    12 => false,
                    14 => false,
                    16 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'integer',
                    'text',
                    'string',
                    'text',
                    'jsonb',
                    'jsonb',
                    'boolean',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'versionNumber',
                    'content',
                    'title',
                    'description',
                    'metadata',
                    'changes',
                    'isCurrent',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'version_number',
                    'content',
                    'title',
                    'description',
                    'metadata',
                    'changes',
                    'is_current',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    true,
                    true,
                    12 => false,
                    14 => false,
                    16 => true,
                ],
                'length' => [
                    4 => 255,
                ],
                'options' => [
                    8 => [
                        'default' => false,
                    ],
                ],
                'fetch' => [
                    11 => 2,
                    13 => 2,
                    15 => 2,
                ],
                'sourceEntity' => [
                    11 => 'App\\Entity\\DocumentVersion',
                    13 => 'App\\Entity\\DocumentVersion',
                    15 => 'App\\Entity\\DocumentVersion',
                ],
                'inversedBy' => [
                    11 => 'versions',
                ],
                'sourceToTargetKeyColumns' => [
                    11 => [
                        'document_id' => 'id',
                    ],
                    13 => [
                        'created_by_id' => 'id',
                    ],
                    15 => [
                        'file_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    11 => [
                        'id' => 'document_id',
                    ],
                    13 => [
                        'id' => 'created_by_id',
                    ],
                    15 => [
                        'id' => 'file_id',
                    ],
                ],
                'joinColumns' => [
                    11 => [
                        $o[12],
                    ],
                    13 => [
                        $o[14],
                    ],
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    11 => [
                        'document_id' => 'document_id',
                    ],
                    13 => [
                        'created_by_id' => 'created_by_id',
                    ],
                    15 => [
                        'file_id' => 'file_id',
                    ],
                ],
                'deferrable' => [
                    12 => false,
                    14 => false,
                    16 => false,
                ],
                'referencedColumnName' => [
                    12 => 'id',
                    14 => 'id',
                    16 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    11 => 'document',
                    13 => 'createdBy',
                    15 => 'file',
                ],
                'targetEntity' => [
                    11 => 'App\\Entity\\Document',
                    13 => 'App\\Entity\\User',
                    15 => 'App\\Entity\\MediaAsset',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    17 => $o[18],
                ],
                'factory' => [
                    17 => $o[18],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    18 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    18 => null,
                ],
                'nameBasedNamespace' => [
                    18 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
35 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\SeoMeta',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'entityType' => $o[3],
                        'entityId' => $o[4],
                        'title' => $o[5],
                        'metaDescription' => $o[6],
                        'canonicalUrl' => $o[7],
                        'robots' => $o[8],
                        'openGraph' => $o[9],
                        'twitterCard' => $o[10],
                        'createdAt' => $o[11],
                        'updatedAt' => $o[12],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'entity_type' => 'entityType',
                        'entity_id' => 'entityId',
                        'title' => 'title',
                        'meta_description' => 'metaDescription',
                        'canonical_url' => 'canonicalUrl',
                        'robots' => 'robots',
                        'open_graph' => 'openGraph',
                        'twitter_card' => 'twitterCard',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'entityType' => 'entity_type',
                        'entityId' => 'entity_id',
                        'title' => 'title',
                        'metaDescription' => 'meta_description',
                        'canonicalUrl' => 'canonical_url',
                        'robots' => 'robots',
                        'openGraph' => 'open_graph',
                        'twitterCard' => 'twitter_card',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'seo_meta',
                        'uniqueConstraints' => [
                            [
                                'columns' => [
                                    'tenant_id',
                                    'entity_type',
                                    'entity_id',
                                ],
                            ],
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[13],
                ],
                'name' => [
                    'App\\Entity\\SeoMeta',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'string',
                    'uuid',
                    'string',
                    'text',
                    'string',
                    'string',
                    'json',
                    'json',
                    'datetimetz_immutable',
                    'datetimetz_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'entityType',
                    'entityId',
                    'title',
                    'metaDescription',
                    'canonicalUrl',
                    'robots',
                    'openGraph',
                    'twitterCard',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'entity_type',
                    'entity_id',
                    'title',
                    'meta_description',
                    'canonical_url',
                    'robots',
                    'open_graph',
                    'twitter_card',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    5 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                ],
            ],
        ],
        $o[0],
        []
    );
},
36 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\UserClientAccess',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'permissions' => $o[2],
                        'status' => $o[3],
                        'createdAt' => $o[4],
                        'updatedAt' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'permissions' => 'permissions',
                        'status' => 'status',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'permissions' => 'permissions',
                        'status' => 'status',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'user_client_access',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[6],
                        'client' => $o[8],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\UserClientAccess',
                    7 => 'user_id',
                    9 => 'client_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    7 => false,
                    9 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'jsonb',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'permissions',
                    'status',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'permissions',
                    'status',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    7 => false,
                    9 => false,
                ],
                'options' => [
                    3 => [
                        'default' => 'active',
                    ],
                ],
                'fetch' => [
                    6 => 2,
                    8 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\UserClientAccess',
                    8 => 'App\\Entity\\UserClientAccess',
                ],
                'inversedBy' => [
                    6 => 'userAccess',
                    8 => 'userAccess',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'user_id' => 'id',
                    ],
                    8 => [
                        'client_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'user_id',
                    ],
                    8 => [
                        'id' => 'client_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                    8 => [
                        $o[9],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'user_id' => 'user_id',
                    ],
                    8 => [
                        'client_id' => 'client_id',
                    ],
                ],
                'deferrable' => [
                    7 => false,
                    9 => false,
                ],
                'onDelete' => [
                    7 => 'CASCADE',
                    9 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    7 => 'id',
                    9 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'user',
                    8 => 'client',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\User',
                    8 => 'App\\Entity\\Client',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    10 => $o[11],
                ],
                'factory' => [
                    10 => $o[11],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    11 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    11 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    11 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    11 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    11 => null,
                ],
                'nameBasedNamespace' => [
                    11 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
37 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Faq',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\FaqRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'question' => $o[2],
                        'answerMd' => $o[3],
                        'isActive' => $o[4],
                        'orderIndex' => $o[5],
                        'createdAt' => $o[6],
                        'updatedAt' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'question' => 'question',
                        'answer_md' => 'answerMd',
                        'is_active' => 'isActive',
                        'order_index' => 'orderIndex',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'question' => 'question',
                        'answerMd' => 'answer_md',
                        'isActive' => 'is_active',
                        'orderIndex' => 'order_index',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'faqs',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Faq',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'text',
                    'text',
                    'boolean',
                    'integer',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'question',
                    'answerMd',
                    'isActive',
                    'orderIndex',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'question',
                    'answer_md',
                    'is_active',
                    'order_index',
                    'created_at',
                    'updated_at',
                ],
                'options' => [
                    4 => [
                        'default' => true,
                    ],
                    [
                        'default' => 0,
                    ],
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    8 => $o[9],
                ],
                'factory' => [
                    8 => $o[9],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    9 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    9 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    9 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    9 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    9 => null,
                ],
                'nameBasedNamespace' => [
                    9 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
38 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Page',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'clientId' => $o[2],
                        'title' => $o[3],
                        'slug' => $o[4],
                        'excerpt' => $o[5],
                        'content' => $o[6],
                        'metaTitle' => $o[7],
                        'metaDescription' => $o[8],
                        'metaKeywords' => $o[9],
                        'featuredImage' => $o[10],
                        'type' => $o[11],
                        'status' => $o[12],
                        'sortOrder' => $o[13],
                        'metadata' => $o[14],
                        'seoSettings' => $o[15],
                        'publishedAt' => $o[16],
                        'createdAt' => $o[17],
                        'updatedAt' => $o[18],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'client_id' => 'clientId',
                        'title' => 'title',
                        'slug' => 'slug',
                        'excerpt' => 'excerpt',
                        'content' => 'content',
                        'meta_title' => 'metaTitle',
                        'meta_description' => 'metaDescription',
                        'meta_keywords' => 'metaKeywords',
                        'featured_image' => 'featuredImage',
                        'type' => 'type',
                        'status' => 'status',
                        'sort_order' => 'sortOrder',
                        'metadata' => 'metadata',
                        'seo_settings' => 'seoSettings',
                        'published_at' => 'publishedAt',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'clientId' => 'client_id',
                        'title' => 'title',
                        'slug' => 'slug',
                        'excerpt' => 'excerpt',
                        'content' => 'content',
                        'metaTitle' => 'meta_title',
                        'metaDescription' => 'meta_description',
                        'metaKeywords' => 'meta_keywords',
                        'featuredImage' => 'featured_image',
                        'type' => 'type',
                        'status' => 'status',
                        'sortOrder' => 'sort_order',
                        'metadata' => 'metadata',
                        'seoSettings' => 'seo_settings',
                        'publishedAt' => 'published_at',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'pages',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[19],
                ],
                'name' => [
                    'App\\Entity\\Page',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    4 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'string',
                    'string',
                    'text',
                    'text',
                    'string',
                    'text',
                    'jsonb',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'clientId',
                    'title',
                    'slug',
                    'excerpt',
                    'content',
                    'metaTitle',
                    'metaDescription',
                    'metaKeywords',
                    'featuredImage',
                    'type',
                    'status',
                    'sortOrder',
                    'metadata',
                    'seoSettings',
                    'publishedAt',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'client_id',
                    'title',
                    'slug',
                    'excerpt',
                    'content',
                    'meta_title',
                    'meta_description',
                    'meta_keywords',
                    'featured_image',
                    'type',
                    'status',
                    'sort_order',
                    'metadata',
                    'seo_settings',
                    'published_at',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    5 => true,
                    7 => true,
                    true,
                    true,
                    true,
                    14 => true,
                    true,
                    true,
                ],
                'length' => [
                    3 => 255,
                    255,
                    7 => 255,
                    10 => 255,
                    50,
                ],
                'options' => [
                    11 => [
                        'default' => 'page',
                    ],
                    [
                        'default' => 'published',
                    ],
                    [
                        'default' => 0,
                    ],
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    19 => $o[20],
                ],
                'factory' => [
                    19 => $o[20],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    20 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    20 => null,
                ],
                'nameBasedNamespace' => [
                    20 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
39 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Lead',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\LeadRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'createdAt' => $o[1],
                        'updatedAt' => $o[2],
                        'id' => $o[3],
                        'fullName' => $o[4],
                        'email' => $o[5],
                        'phone' => $o[6],
                        'firm' => $o[7],
                        'website' => $o[8],
                        'practiceAreas' => $o[9],
                        'city' => $o[10],
                        'state' => $o[11],
                        'zipCode' => $o[12],
                        'message' => $o[13],
                        'status' => $o[14],
                        'utmJson' => $o[15],
                        'isTest' => $o[16],
                    ],
                ],
                'fieldNames' => [
                    [
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                        'id' => 'id',
                        'full_name' => 'fullName',
                        'email' => 'email',
                        'phone' => 'phone',
                        'firm' => 'firm',
                        'website' => 'website',
                        'practice_areas' => 'practiceAreas',
                        'city' => 'city',
                        'state' => 'state',
                        'zip_code' => 'zipCode',
                        'message' => 'message',
                        'status' => 'status',
                        'utm_json' => 'utmJson',
                        'is_test' => 'isTest',
                    ],
                ],
                'columnNames' => [
                    [
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                        'id' => 'id',
                        'fullName' => 'full_name',
                        'email' => 'email',
                        'phone' => 'phone',
                        'firm' => 'firm',
                        'website' => 'website',
                        'practiceAreas' => 'practice_areas',
                        'city' => 'city',
                        'state' => 'state',
                        'zipCode' => 'zip_code',
                        'message' => 'message',
                        'status' => 'status',
                        'utmJson' => 'utm_json',
                        'isTest' => 'is_test',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'leads',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[17],
                        'source' => $o[19],
                        'events' => $o[21],
                    ],
                ],
                'idGenerator' => [
                    $o[22],
                ],
                'name' => [
                    'App\\Entity\\Lead',
                    18 => 'client_id',
                    20 => 'source_id',
                ],
                'type' => [
                    1 => 'datetime_immutable',
                    'datetime_immutable',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'array',
                    'string',
                    'string',
                    'string',
                    'text',
                    'string',
                    'json',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'createdAt',
                    'updatedAt',
                    'id',
                    'fullName',
                    'email',
                    'phone',
                    'firm',
                    'website',
                    'practiceAreas',
                    'city',
                    'state',
                    'zipCode',
                    'message',
                    'status',
                    'utmJson',
                    'isTest',
                ],
                'columnName' => [
                    1 => 'created_at',
                    'updated_at',
                    'id',
                    'full_name',
                    'email',
                    'phone',
                    'firm',
                    'website',
                    'practice_areas',
                    'city',
                    'state',
                    'zip_code',
                    'message',
                    'status',
                    'utm_json',
                    'is_test',
                ],
                'id' => [
                    3 => true,
                ],
                'unique' => [
                    3 => true,
                    18 => false,
                    20 => false,
                ],
                'nullable' => [
                    6 => true,
                    true,
                    true,
                    10 => true,
                    true,
                    true,
                    true,
                    18 => true,
                    20 => true,
                ],
                'options' => [
                    9 => [
                        'default' => '{}',
                    ],
                    14 => [
                        'default' => 'new_lead',
                    ],
                    [
                        'default' => '{}',
                    ],
                    [
                        'default' => false,
                    ],
                ],
                'length' => [
                    14 => 32,
                ],
                'enumType' => [
                    14 => 'App\\ValueObject\\LeadStatus',
                ],
                'fetch' => [
                    17 => 2,
                    19 => 2,
                    21 => 2,
                ],
                'sourceEntity' => [
                    17 => 'App\\Entity\\Lead',
                    19 => 'App\\Entity\\Lead',
                    21 => 'App\\Entity\\Lead',
                ],
                'inversedBy' => [
                    17 => 'leads',
                    19 => 'leads',
                ],
                'sourceToTargetKeyColumns' => [
                    17 => [
                        'client_id' => 'id',
                    ],
                    19 => [
                        'source_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    17 => [
                        'id' => 'client_id',
                    ],
                    19 => [
                        'id' => 'source_id',
                    ],
                ],
                'joinColumns' => [
                    17 => [
                        $o[18],
                    ],
                    19 => [
                        $o[20],
                    ],
                ],
                'joinColumnFieldNames' => [
                    17 => [
                        'client_id' => 'client_id',
                    ],
                    19 => [
                        'source_id' => 'source_id',
                    ],
                ],
                'deferrable' => [
                    18 => false,
                    20 => false,
                ],
                'onDelete' => [
                    18 => 'SET NULL',
                ],
                'referencedColumnName' => [
                    18 => 'id',
                    20 => 'id',
                ],
                'cascade' => [
                    21 => [
                        'persist',
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    21 => true,
                ],
                'mappedBy' => [
                    21 => 'lead',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    17 => 'client',
                    19 => 'source',
                    21 => 'events',
                ],
                'targetEntity' => [
                    17 => 'App\\Entity\\Client',
                    19 => 'App\\Entity\\LeadSource',
                    21 => 'App\\Entity\\LeadEvent',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    22 => $o[23],
                ],
                'factory' => [
                    22 => $o[23],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    23 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    23 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    23 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    23 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    23 => null,
                ],
                'nameBasedNamespace' => [
                    23 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
40 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AuditIntake',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AuditIntakeRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'contactName' => $o[2],
                        'contactEmail' => $o[3],
                        'contactPhone' => $o[4],
                        'websiteUrl' => $o[5],
                        'subdomains' => $o[6],
                        'stagingUrl' => $o[7],
                        'cms' => $o[8],
                        'cmsVersion' => $o[9],
                        'hostingProvider' => $o[10],
                        'techStack' => $o[11],
                        'hasGoogleAnalytics' => $o[12],
                        'hasSearchConsole' => $o[13],
                        'hasGoogleBusinessProfile' => $o[14],
                        'hasTagManager' => $o[15],
                        'gaPropertyId' => $o[16],
                        'gscProperty' => $o[17],
                        'gbpLocationIds' => $o[18],
                        'gtmContainerId' => $o[19],
                        'markets' => $o[20],
                        'primaryServices' => $o[21],
                        'targetAudience' => $o[22],
                        'paidChannels' => $o[23],
                        'notes' => $o[24],
                        'status' => $o[25],
                        'robotsTxtUrl' => $o[26],
                        'sitemapXmlUrl' => $o[27],
                        'createdAt' => $o[28],
                        'updatedAt' => $o[29],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'contact_name' => 'contactName',
                        'contact_email' => 'contactEmail',
                        'contact_phone' => 'contactPhone',
                        'website_url' => 'websiteUrl',
                        'subdomains' => 'subdomains',
                        'staging_url' => 'stagingUrl',
                        'cms' => 'cms',
                        'cms_version' => 'cmsVersion',
                        'hosting_provider' => 'hostingProvider',
                        'tech_stack' => 'techStack',
                        'has_google_analytics' => 'hasGoogleAnalytics',
                        'has_search_console' => 'hasSearchConsole',
                        'has_google_business_profile' => 'hasGoogleBusinessProfile',
                        'has_tag_manager' => 'hasTagManager',
                        'ga_property_id' => 'gaPropertyId',
                        'gsc_property' => 'gscProperty',
                        'gbp_location_ids' => 'gbpLocationIds',
                        'gtm_container_id' => 'gtmContainerId',
                        'markets' => 'markets',
                        'primary_services' => 'primaryServices',
                        'target_audience' => 'targetAudience',
                        'paid_channels' => 'paidChannels',
                        'notes' => 'notes',
                        'status' => 'status',
                        'robots_txt_url' => 'robotsTxtUrl',
                        'sitemap_xml_url' => 'sitemapXmlUrl',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'contactName' => 'contact_name',
                        'contactEmail' => 'contact_email',
                        'contactPhone' => 'contact_phone',
                        'websiteUrl' => 'website_url',
                        'subdomains' => 'subdomains',
                        'stagingUrl' => 'staging_url',
                        'cms' => 'cms',
                        'cmsVersion' => 'cms_version',
                        'hostingProvider' => 'hosting_provider',
                        'techStack' => 'tech_stack',
                        'hasGoogleAnalytics' => 'has_google_analytics',
                        'hasSearchConsole' => 'has_search_console',
                        'hasGoogleBusinessProfile' => 'has_google_business_profile',
                        'hasTagManager' => 'has_tag_manager',
                        'gaPropertyId' => 'ga_property_id',
                        'gscProperty' => 'gsc_property',
                        'gbpLocationIds' => 'gbp_location_ids',
                        'gtmContainerId' => 'gtm_container_id',
                        'markets' => 'markets',
                        'primaryServices' => 'primary_services',
                        'targetAudience' => 'target_audience',
                        'paidChannels' => 'paid_channels',
                        'notes' => 'notes',
                        'status' => 'status',
                        'robotsTxtUrl' => 'robots_txt_url',
                        'sitemapXmlUrl' => 'sitemap_xml_url',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'audit_intake',
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[30],
                        'requestedBy' => $o[32],
                        'goals' => $o[34],
                        'competitors' => $o[35],
                        'keywords' => $o[36],
                    ],
                ],
                'idGenerator' => [
                    $o[37],
                ],
                'name' => [
                    'App\\Entity\\AuditIntake',
                    31 => 'client_id',
                    33 => 'requested_by_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    31 => false,
                    33 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'json',
                    'string',
                    'string',
                    'string',
                    'string',
                    'json',
                    'boolean',
                    'boolean',
                    'boolean',
                    'boolean',
                    'string',
                    'string',
                    'json',
                    'string',
                    'json',
                    'json',
                    'json',
                    'json',
                    'text',
                    'string',
                    'string',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'contactName',
                    'contactEmail',
                    'contactPhone',
                    'websiteUrl',
                    'subdomains',
                    'stagingUrl',
                    'cms',
                    'cmsVersion',
                    'hostingProvider',
                    'techStack',
                    'hasGoogleAnalytics',
                    'hasSearchConsole',
                    'hasGoogleBusinessProfile',
                    'hasTagManager',
                    'gaPropertyId',
                    'gscProperty',
                    'gbpLocationIds',
                    'gtmContainerId',
                    'markets',
                    'primaryServices',
                    'targetAudience',
                    'paidChannels',
                    'notes',
                    'status',
                    'robotsTxtUrl',
                    'sitemapXmlUrl',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'contact_name',
                    'contact_email',
                    'contact_phone',
                    'website_url',
                    'subdomains',
                    'staging_url',
                    'cms',
                    'cms_version',
                    'hosting_provider',
                    'tech_stack',
                    'has_google_analytics',
                    'has_search_console',
                    'has_google_business_profile',
                    'has_tag_manager',
                    'ga_property_id',
                    'gsc_property',
                    'gbp_location_ids',
                    'gtm_container_id',
                    'markets',
                    'primary_services',
                    'target_audience',
                    'paid_channels',
                    'notes',
                    'status',
                    'robots_txt_url',
                    'sitemap_xml_url',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    255,
                    32,
                    255,
                    7 => 255,
                    64,
                    64,
                    128,
                    16 => 255,
                    255,
                    19 => 255,
                    25 => 24,
                    255,
                    255,
                ],
                'nullable' => [
                    2 => true,
                    true,
                    true,
                    6 => true,
                    true,
                    9 => true,
                    true,
                    true,
                    16 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    26 => true,
                    true,
                    31 => false,
                    33 => true,
                ],
                'options' => [
                    8 => [
                        'comment' => 'wordpress|shopify|webflow|custom|other',
                    ],
                    12 => [
                        'default' => false,
                    ],
                    [
                        'default' => false,
                    ],
                    [
                        'default' => false,
                    ],
                    [
                        'default' => false,
                    ],
                    25 => [
                        'comment' => 'draft|submitted|approved',
                    ],
                ],
                'fetch' => [
                    30 => 2,
                    32 => 2,
                    34 => 2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    30 => 'App\\Entity\\AuditIntake',
                    32 => 'App\\Entity\\AuditIntake',
                    34 => 'App\\Entity\\AuditIntake',
                    'App\\Entity\\AuditIntake',
                    'App\\Entity\\AuditIntake',
                ],
                'inversedBy' => [
                    30 => 'auditIntakes',
                    32 => 'requestedAuditIntakes',
                ],
                'sourceToTargetKeyColumns' => [
                    30 => [
                        'client_id' => 'id',
                    ],
                    32 => [
                        'requested_by_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    30 => [
                        'id' => 'client_id',
                    ],
                    32 => [
                        'id' => 'requested_by_id',
                    ],
                ],
                'joinColumns' => [
                    30 => [
                        $o[31],
                    ],
                    32 => [
                        $o[33],
                    ],
                ],
                'joinColumnFieldNames' => [
                    30 => [
                        'client_id' => 'client_id',
                    ],
                    32 => [
                        'requested_by_id' => 'requested_by_id',
                    ],
                ],
                'deferrable' => [
                    31 => false,
                    33 => false,
                ],
                'onDelete' => [
                    31 => 'CASCADE',
                    33 => 'SET NULL',
                ],
                'referencedColumnName' => [
                    31 => 'id',
                    33 => 'id',
                ],
                'cascade' => [
                    34 => [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    34 => true,
                    true,
                    true,
                ],
                'mappedBy' => [
                    34 => 'intake',
                    'intake',
                    'intake',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    30 => 'client',
                    32 => 'requestedBy',
                    34 => 'goals',
                    'competitors',
                    'keywords',
                ],
                'targetEntity' => [
                    30 => 'App\\Entity\\Client',
                    32 => 'App\\Entity\\User',
                    34 => 'App\\Entity\\AuditConversionGoal',
                    'App\\Entity\\AuditCompetitor',
                    'App\\Entity\\AuditKeyword',
                ],
            ],
        ],
        $o[0],
        []
    );
},
41 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Form',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'siteId' => $o[3],
                        'name' => $o[4],
                        'fields' => $o[5],
                        'status' => $o[6],
                        'createdAt' => $o[7],
                        'updatedAt' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'site_id' => 'siteId',
                        'name' => 'name',
                        'fields' => 'fields',
                        'status' => 'status',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'siteId' => 'site_id',
                        'name' => 'name',
                        'fields' => 'fields',
                        'status' => 'status',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'forms',
                        'uniqueConstraints' => [
                            [
                                'columns' => [
                                    'tenant_id',
                                    'site_id',
                                    'name',
                                ],
                            ],
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Form',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'json',
                    'string',
                    'datetimetz_immutable',
                    'datetimetz_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'siteId',
                    'name',
                    'fields',
                    'status',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'site_id',
                    'name',
                    'fields',
                    'status',
                    'created_at',
                    'updated_at',
                ],
                'options' => [
                    6 => [
                        'default' => 'active',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
42 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Backlink',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'clientId' => $o[3],
                        'sourceUrl' => $o[4],
                        'targetUrl' => $o[5],
                        'anchorText' => $o[6],
                        'sourceDomain' => $o[7],
                        'targetDomain' => $o[8],
                        'status' => $o[9],
                        'linkType' => $o[10],
                        'domainAuthority' => $o[11],
                        'spamScore' => $o[12],
                        'pageAuthority' => $o[13],
                        'country' => $o[14],
                        'language' => $o[15],
                        'firstSeen' => $o[16],
                        'lastSeen' => $o[17],
                        'isSocial' => $o[18],
                        'isNews' => $o[19],
                        'isBlog' => $o[20],
                        'context' => $o[21],
                        'metadata' => $o[22],
                        'createdAt' => $o[23],
                        'updatedAt' => $o[24],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'client_id' => 'clientId',
                        'source_url' => 'sourceUrl',
                        'target_url' => 'targetUrl',
                        'anchor_text' => 'anchorText',
                        'source_domain' => 'sourceDomain',
                        'target_domain' => 'targetDomain',
                        'status' => 'status',
                        'link_type' => 'linkType',
                        'domain_authority' => 'domainAuthority',
                        'spam_score' => 'spamScore',
                        'page_authority' => 'pageAuthority',
                        'country' => 'country',
                        'language' => 'language',
                        'first_seen' => 'firstSeen',
                        'last_seen' => 'lastSeen',
                        'is_social' => 'isSocial',
                        'is_news' => 'isNews',
                        'is_blog' => 'isBlog',
                        'context' => 'context',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'clientId' => 'client_id',
                        'sourceUrl' => 'source_url',
                        'targetUrl' => 'target_url',
                        'anchorText' => 'anchor_text',
                        'sourceDomain' => 'source_domain',
                        'targetDomain' => 'target_domain',
                        'status' => 'status',
                        'linkType' => 'link_type',
                        'domainAuthority' => 'domain_authority',
                        'spamScore' => 'spam_score',
                        'pageAuthority' => 'page_authority',
                        'country' => 'country',
                        'language' => 'language',
                        'firstSeen' => 'first_seen',
                        'lastSeen' => 'last_seen',
                        'isSocial' => 'is_social',
                        'isNews' => 'is_news',
                        'isBlog' => 'is_blog',
                        'context' => 'context',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'backlinks',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'preUpdate' => [
                            'setUpdatedAt',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[25],
                ],
                'name' => [
                    'App\\Entity\\Backlink',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'integer',
                    'integer',
                    'integer',
                    'string',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                    'boolean',
                    'boolean',
                    'boolean',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'clientId',
                    'sourceUrl',
                    'targetUrl',
                    'anchorText',
                    'sourceDomain',
                    'targetDomain',
                    'status',
                    'linkType',
                    'domainAuthority',
                    'spamScore',
                    'pageAuthority',
                    'country',
                    'language',
                    'firstSeen',
                    'lastSeen',
                    'isSocial',
                    'isNews',
                    'isBlog',
                    'context',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'client_id',
                    'source_url',
                    'target_url',
                    'anchor_text',
                    'source_domain',
                    'target_domain',
                    'status',
                    'link_type',
                    'domain_authority',
                    'spam_score',
                    'page_authority',
                    'country',
                    'language',
                    'first_seen',
                    'last_seen',
                    'is_social',
                    'is_news',
                    'is_blog',
                    'context',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    2 => true,
                    6 => true,
                    true,
                    true,
                    11 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    21 => true,
                    true,
                ],
                'length' => [
                    4 => 500,
                    500,
                    255,
                    255,
                    255,
                    50,
                    20,
                    14 => 50,
                    50,
                ],
                'options' => [
                    18 => [
                        'default' => false,
                    ],
                    [
                        'default' => false,
                    ],
                    [
                        'default' => false,
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
43 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Notification',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'message' => $o[3],
                        'type' => $o[4],
                        'isRead' => $o[5],
                        'actionUrl' => $o[6],
                        'actionLabel' => $o[7],
                        'createdAt' => $o[8],
                        'readAt' => $o[9],
                        'metadata' => $o[10],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'message' => 'message',
                        'type' => 'type',
                        'is_read' => 'isRead',
                        'action_url' => 'actionUrl',
                        'action_label' => 'actionLabel',
                        'created_at' => 'createdAt',
                        'read_at' => 'readAt',
                        'metadata' => 'metadata',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'message' => 'message',
                        'type' => 'type',
                        'isRead' => 'is_read',
                        'actionUrl' => 'action_url',
                        'actionLabel' => 'action_label',
                        'createdAt' => 'created_at',
                        'readAt' => 'read_at',
                        'metadata' => 'metadata',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'notifications',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[11],
                    ],
                ],
                'idGenerator' => [
                    $o[13],
                ],
                'name' => [
                    'App\\Entity\\Notification',
                    12 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'string',
                    'boolean',
                    'string',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'message',
                    'type',
                    'isRead',
                    'actionUrl',
                    'actionLabel',
                    'createdAt',
                    'readAt',
                    'metadata',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'message',
                    'type',
                    'is_read',
                    'action_url',
                    'action_label',
                    'created_at',
                    'read_at',
                    'metadata',
                ],
                'length' => [
                    2 => 255,
                    4 => 50,
                    6 => 100,
                    100,
                ],
                'nullable' => [
                    3 => true,
                    6 => true,
                    true,
                    9 => true,
                    true,
                    12 => false,
                ],
                'fetch' => [
                    11 => 2,
                ],
                'sourceEntity' => [
                    11 => 'App\\Entity\\Notification',
                ],
                'sourceToTargetKeyColumns' => [
                    11 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    11 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    11 => [
                        $o[12],
                    ],
                ],
                'joinColumnFieldNames' => [
                    11 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'deferrable' => [
                    12 => false,
                ],
                'unique' => [
                    12 => false,
                ],
                'referencedColumnName' => [
                    12 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    11 => 'user',
                ],
                'targetEntity' => [
                    11 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
44 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\AuditFinding',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AuditFindingRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'description' => $o[3],
                        'severity' => $o[4],
                        'status' => $o[5],
                        'category' => $o[6],
                        'location' => $o[7],
                        'impact' => $o[8],
                        'recommendation' => $o[9],
                        'impactScore' => $o[10],
                        'effortScore' => $o[11],
                        'priorityScore' => $o[12],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'severity' => 'severity',
                        'status' => 'status',
                        'category' => 'category',
                        'location' => 'location',
                        'impact' => 'impact',
                        'recommendation' => 'recommendation',
                        'impact_score' => 'impactScore',
                        'effort_score' => 'effortScore',
                        'priority_score' => 'priorityScore',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'severity' => 'severity',
                        'status' => 'status',
                        'category' => 'category',
                        'location' => 'location',
                        'impact' => 'impact',
                        'recommendation' => 'recommendation',
                        'impactScore' => 'impact_score',
                        'effortScore' => 'effort_score',
                        'priorityScore' => 'priority_score',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'audit_finding',
                    ],
                ],
                'associationMappings' => [
                    [
                        'client' => $o[13],
                        'auditRun' => $o[15],
                    ],
                ],
                'idGenerator' => [
                    $o[17],
                ],
                'name' => [
                    'App\\Entity\\AuditFinding',
                    14 => 'client_id',
                    16 => 'audit_run_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    14 => false,
                    16 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'text',
                    'string',
                    'string',
                    'string',
                    'string',
                    'text',
                    'text',
                    'smallint',
                    'smallint',
                    'smallint',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'severity',
                    'status',
                    'category',
                    'location',
                    'impact',
                    'recommendation',
                    'impactScore',
                    'effortScore',
                    'priorityScore',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'severity',
                    'status',
                    'category',
                    'location',
                    'impact',
                    'recommendation',
                    'impact_score',
                    'effort_score',
                    'priority_score',
                ],
                'length' => [
                    2 => 255,
                    4 => 16,
                    16,
                    64,
                    255,
                ],
                'nullable' => [
                    6 => true,
                    true,
                    true,
                    true,
                    14 => false,
                    16 => false,
                ],
                'options' => [
                    10 => [
                        'default' => 3,
                    ],
                    [
                        'default' => 3,
                    ],
                    [
                        'default' => 3,
                    ],
                ],
                'fetch' => [
                    13 => 2,
                    15 => 2,
                ],
                'sourceEntity' => [
                    13 => 'App\\Entity\\AuditFinding',
                    15 => 'App\\Entity\\AuditFinding',
                ],
                'inversedBy' => [
                    13 => 'auditFindings',
                ],
                'sourceToTargetKeyColumns' => [
                    13 => [
                        'client_id' => 'id',
                    ],
                    15 => [
                        'audit_run_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    13 => [
                        'id' => 'client_id',
                    ],
                    15 => [
                        'id' => 'audit_run_id',
                    ],
                ],
                'joinColumns' => [
                    13 => [
                        $o[14],
                    ],
                    15 => [
                        $o[16],
                    ],
                ],
                'joinColumnFieldNames' => [
                    13 => [
                        'client_id' => 'client_id',
                    ],
                    15 => [
                        'audit_run_id' => 'audit_run_id',
                    ],
                ],
                'deferrable' => [
                    14 => false,
                    16 => false,
                ],
                'onDelete' => [
                    14 => 'CASCADE',
                    16 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    14 => 'id',
                    16 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    13 => 'client',
                    15 => 'auditRun',
                ],
                'targetEntity' => [
                    13 => 'App\\Entity\\Client',
                    15 => 'App\\Entity\\AuditRun',
                ],
            ],
        ],
        $o[0],
        []
    );
},
45 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Organization',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'domain' => $o[3],
                        'metadata' => $o[4],
                        'status' => $o[5],
                        'createdAt' => $o[6],
                        'updatedAt' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'domain' => 'domain',
                        'metadata' => 'metadata',
                        'status' => 'status',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'domain' => 'domain',
                        'metadata' => 'metadata',
                        'status' => 'status',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'organizations',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Organization',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'jsonb',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'domain',
                    'metadata',
                    'status',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'domain',
                    'metadata',
                    'status',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    true,
                ],
                'options' => [
                    5 => [
                        'default' => 'active',
                    ],
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    8 => $o[9],
                ],
                'factory' => [
                    8 => $o[9],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    9 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    9 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    9 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    9 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    9 => null,
                ],
                'nameBasedNamespace' => [
                    9 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
46 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\DocumentTemplate',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'description' => $o[3],
                        'content' => $o[4],
                        'type' => $o[5],
                        'variables' => $o[6],
                        'signatureFields' => $o[7],
                        'metadata' => $o[8],
                        'isActive' => $o[9],
                        'requiresSignature' => $o[10],
                        'usageCount' => $o[11],
                        'createdAt' => $o[12],
                        'updatedAt' => $o[13],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'content' => 'content',
                        'type' => 'type',
                        'variables' => 'variables',
                        'signature_fields' => 'signatureFields',
                        'metadata' => 'metadata',
                        'is_active' => 'isActive',
                        'requires_signature' => 'requiresSignature',
                        'usage_count' => 'usageCount',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'content' => 'content',
                        'type' => 'type',
                        'variables' => 'variables',
                        'signatureFields' => 'signature_fields',
                        'metadata' => 'metadata',
                        'isActive' => 'is_active',
                        'requiresSignature' => 'requires_signature',
                        'usageCount' => 'usage_count',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'document_templates',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'documents' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\DocumentTemplate',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'text',
                    'text',
                    'string',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'boolean',
                    'boolean',
                    'integer',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'content',
                    'type',
                    'variables',
                    'signatureFields',
                    'metadata',
                    'isActive',
                    'requiresSignature',
                    'usageCount',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'content',
                    'type',
                    'variables',
                    'signature_fields',
                    'metadata',
                    'is_active',
                    'requires_signature',
                    'usage_count',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    5 => 50,
                ],
                'nullable' => [
                    3 => true,
                    6 => true,
                    true,
                    true,
                ],
                'options' => [
                    9 => [
                        'default' => true,
                    ],
                    [
                        'default' => false,
                    ],
                    [
                        'default' => 0,
                    ],
                ],
                'fetch' => [
                    14 => 2,
                ],
                'sourceEntity' => [
                    14 => 'App\\Entity\\DocumentTemplate',
                ],
                'mappedBy' => [
                    14 => 'template',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    14 => 'documents',
                ],
                'targetEntity' => [
                    14 => 'App\\Entity\\Document',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    15 => $o[16],
                ],
                'factory' => [
                    15 => $o[16],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    16 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    16 => null,
                ],
                'nameBasedNamespace' => [
                    16 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
47 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\OAuthToken',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'accessToken' => $o[2],
                        'refreshToken' => $o[3],
                        'expiresAt' => $o[4],
                        'status' => $o[5],
                        'metadata' => $o[6],
                        'createdAt' => $o[7],
                        'updatedAt' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'access_token' => 'accessToken',
                        'refresh_token' => 'refreshToken',
                        'expires_at' => 'expiresAt',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'accessToken' => 'access_token',
                        'refreshToken' => 'refresh_token',
                        'expiresAt' => 'expires_at',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'oauth_tokens',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'connection' => $o[9],
                        'user' => $o[11],
                    ],
                ],
                'idGenerator' => [
                    $o[13],
                ],
                'name' => [
                    'App\\Entity\\OAuthToken',
                    10 => 'connection_id',
                    12 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    10 => false,
                    12 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'text',
                    'text',
                    'datetime_immutable',
                    'string',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'accessToken',
                    'refreshToken',
                    'expiresAt',
                    'status',
                    'metadata',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'access_token',
                    'refresh_token',
                    'expires_at',
                    'status',
                    'metadata',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    true,
                    6 => true,
                    10 => false,
                    12 => true,
                ],
                'options' => [
                    5 => [
                        'default' => 'active',
                    ],
                ],
                'fetch' => [
                    9 => 2,
                    11 => 2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\OAuthToken',
                    11 => 'App\\Entity\\OAuthToken',
                ],
                'inversedBy' => [
                    9 => 'tokens',
                    11 => 'tokens',
                ],
                'sourceToTargetKeyColumns' => [
                    9 => [
                        'connection_id' => 'id',
                    ],
                    11 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    9 => [
                        'id' => 'connection_id',
                    ],
                    11 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                ],
                'joinColumnFieldNames' => [
                    9 => [
                        'connection_id' => 'connection_id',
                    ],
                    11 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'deferrable' => [
                    10 => false,
                    12 => false,
                ],
                'onDelete' => [
                    10 => 'CASCADE',
                    12 => 'SET NULL',
                ],
                'referencedColumnName' => [
                    10 => 'id',
                    12 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'connection',
                    11 => 'user',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\OAuthConnection',
                    11 => 'App\\Entity\\User',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    13 => $o[14],
                ],
                'factory' => [
                    13 => $o[14],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    14 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    14 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    14 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    14 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    14 => null,
                ],
                'nameBasedNamespace' => [
                    14 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
48 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\LeadSource',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'description' => $o[3],
                        'status' => $o[4],
                        'metadata' => $o[5],
                        'sortOrder' => $o[6],
                        'createdAt' => $o[7],
                        'updatedAt' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'sort_order' => 'sortOrder',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'sortOrder' => 'sort_order',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'lead_sources',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'leads' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[10],
                ],
                'name' => [
                    'App\\Entity\\LeadSource',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    true,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'text',
                    'string',
                    'jsonb',
                    'integer',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'status',
                    'metadata',
                    'sortOrder',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'status',
                    'metadata',
                    'sort_order',
                    'created_at',
                    'updated_at',
                ],
                'nullable' => [
                    3 => true,
                    5 => true,
                ],
                'options' => [
                    4 => [
                        'default' => 'active',
                    ],
                    6 => [
                        'default' => 0,
                    ],
                ],
                'fetch' => [
                    9 => 2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\LeadSource',
                ],
                'mappedBy' => [
                    9 => 'source',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'leads',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\Lead',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    10 => $o[11],
                ],
                'factory' => [
                    10 => $o[11],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    11 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    11 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    11 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    11 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    11 => null,
                ],
                'nameBasedNamespace' => [
                    11 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
49 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator')),
            clone ($p['Symfony\\Component\\Uid\\Factory\\UuidFactory'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Uid\\Factory\\UuidFactory')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Client',
                ],
                'customGeneratorDefinition' => [
                    [
                        'class' => 'doctrine.uuid_generator',
                    ],
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    7,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'slug' => $o[3],
                        'description' => $o[4],
                        'websiteUrl' => $o[5],
                        'phone' => $o[6],
                        'email' => $o[7],
                        'address' => $o[8],
                        'city' => $o[9],
                        'state' => $o[10],
                        'postalCode' => $o[11],
                        'country' => $o[12],
                        'industry' => $o[13],
                        'status' => $o[14],
                        'metadata' => $o[15],
                        'googleBusinessProfile' => $o[16],
                        'googleSearchConsole' => $o[17],
                        'googleAnalytics' => $o[18],
                        'createdAt' => $o[19],
                        'updatedAt' => $o[20],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'description' => 'description',
                        'website_url' => 'websiteUrl',
                        'phone' => 'phone',
                        'email' => 'email',
                        'address' => 'address',
                        'city' => 'city',
                        'state' => 'state',
                        'postal_code' => 'postalCode',
                        'country' => 'country',
                        'industry' => 'industry',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'google_business_profile' => 'googleBusinessProfile',
                        'google_search_console' => 'googleSearchConsole',
                        'google_analytics' => 'googleAnalytics',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                        'description' => 'description',
                        'websiteUrl' => 'website_url',
                        'phone' => 'phone',
                        'email' => 'email',
                        'address' => 'address',
                        'city' => 'city',
                        'state' => 'state',
                        'postalCode' => 'postal_code',
                        'country' => 'country',
                        'industry' => 'industry',
                        'status' => 'status',
                        'metadata' => 'metadata',
                        'googleBusinessProfile' => 'google_business_profile',
                        'googleSearchConsole' => 'google_search_console',
                        'googleAnalytics' => 'google_analytics',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'clients',
                    ],
                ],
                'lifecycleCallbacks' => [
                    [
                        'prePersist' => [
                            'setCreatedAtValue',
                        ],
                        'preUpdate' => [
                            'setUpdatedAtValue',
                        ],
                    ],
                ],
                'associationMappings' => [
                    [
                        'agency' => $o[21],
                        'locations' => $o[23],
                        'userAccess' => $o[24],
                        'leads' => $o[25],
                        'campaigns' => $o[26],
                        'keywords' => $o[27],
                        'auditIntakes' => $o[28],
                        'auditRuns' => $o[29],
                        'auditFindings' => $o[30],
                        'oauthConnections' => $o[31],
                        'openPhoneIntegrations' => $o[32],
                    ],
                ],
                'idGenerator' => [
                    $o[33],
                ],
                'name' => [
                    'App\\Entity\\Client',
                    22 => 'agency_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    3 => true,
                    22 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'string',
                    'text',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'jsonb',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'slug',
                    'description',
                    'websiteUrl',
                    'phone',
                    'email',
                    'address',
                    'city',
                    'state',
                    'postalCode',
                    'country',
                    'industry',
                    'status',
                    'metadata',
                    'googleBusinessProfile',
                    'googleSearchConsole',
                    'googleAnalytics',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'slug',
                    'description',
                    'website_url',
                    'phone',
                    'email',
                    'address',
                    'city',
                    'state',
                    'postal_code',
                    'country',
                    'industry',
                    'status',
                    'metadata',
                    'google_business_profile',
                    'google_search_console',
                    'google_analytics',
                    'created_at',
                    'updated_at',
                ],
                'length' => [
                    2 => 255,
                    255,
                    5 => 255,
                    255,
                    255,
                    255,
                    255,
                    255,
                    10,
                    255,
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    true,
                    15 => true,
                    true,
                    true,
                    true,
                    22 => false,
                ],
                'options' => [
                    13 => [
                        'default' => 'law',
                    ],
                    [
                        'default' => 'active',
                    ],
                ],
                'fetch' => [
                    21 => 2,
                    23 => 2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                ],
                'sourceEntity' => [
                    21 => 'App\\Entity\\Client',
                    23 => 'App\\Entity\\Client',
                    'App\\Entity\\Client',
                    'App\\Entity\\Client',
                    'App\\Entity\\Client',
                    'App\\Entity\\Client',
                    'App\\Entity\\Client',
                    'App\\Entity\\Client',
                    'App\\Entity\\Client',
                    'App\\Entity\\Client',
                    'App\\Entity\\Client',
                ],
                'inversedBy' => [
                    21 => 'clients',
                ],
                'sourceToTargetKeyColumns' => [
                    21 => [
                        'agency_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    21 => [
                        'id' => 'agency_id',
                    ],
                ],
                'joinColumns' => [
                    21 => [
                        $o[22],
                    ],
                ],
                'joinColumnFieldNames' => [
                    21 => [
                        'agency_id' => 'agency_id',
                    ],
                ],
                'deferrable' => [
                    22 => false,
                ],
                'onDelete' => [
                    22 => 'CASCADE',
                ],
                'referencedColumnName' => [
                    22 => 'id',
                ],
                'cascade' => [
                    23 => [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                    31 => [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                ],
                'orphanRemoval' => [
                    23 => true,
                    true,
                    31 => true,
                    true,
                ],
                'mappedBy' => [
                    23 => 'client',
                    'client',
                    'client',
                    'client',
                    'client',
                    'client',
                    'client',
                    'client',
                    'client',
                    'client',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    21 => 'agency',
                    23 => 'locations',
                    'userAccess',
                    'leads',
                    'campaigns',
                    'keywords',
                    'auditIntakes',
                    'auditRuns',
                    'auditFindings',
                    'oauthConnections',
                    'openPhoneIntegrations',
                ],
                'targetEntity' => [
                    21 => 'App\\Entity\\Agency',
                    23 => 'App\\Entity\\ClientLocation',
                    'App\\Entity\\UserClientAccess',
                    'App\\Entity\\Lead',
                    'App\\Entity\\Campaign',
                    'App\\Entity\\Keyword',
                    'App\\Entity\\AuditIntake',
                    'App\\Entity\\AuditRun',
                    'App\\Entity\\AuditFinding',
                    'App\\Entity\\OAuthConnection',
                    'App\\Entity\\OpenPhoneIntegration',
                ],
            ],
            'Symfony\\Bridge\\Doctrine\\IdGenerator\\UuidGenerator' => [
                'protoFactory' => [
                    33 => $o[34],
                ],
                'factory' => [
                    33 => $o[34],
                ],
            ],
            'Symfony\\Component\\Uid\\Factory\\UuidFactory' => [
                'defaultClass' => [
                    34 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'timeBasedClass' => [
                    34 => 'Symfony\\Component\\Uid\\UuidV7',
                ],
                'nameBasedClass' => [
                    34 => 'Symfony\\Component\\Uid\\UuidV5',
                ],
                'randomBasedClass' => [
                    34 => 'Symfony\\Component\\Uid\\UuidV4',
                ],
                'timeBasedNode' => [
                    34 => null,
                ],
                'nameBasedNamespace' => [
                    34 => null,
                ],
            ],
        ],
        $o[0],
        []
    );
},
50 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\FormSubmission',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'formId' => $o[3],
                        'data' => $o[4],
                        'ipAddress' => $o[5],
                        'userAgent' => $o[6],
                        'createdAt' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'form_id' => 'formId',
                        'data' => 'data',
                        'ip_address' => 'ipAddress',
                        'user_agent' => 'userAgent',
                        'created_at' => 'createdAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'formId' => 'form_id',
                        'data' => 'data',
                        'ipAddress' => 'ip_address',
                        'userAgent' => 'user_agent',
                        'createdAt' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'form_submissions',
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\FormSubmission',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'uuid',
                    'json',
                    'string',
                    'string',
                    'datetimetz_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'formId',
                    'data',
                    'ipAddress',
                    'userAgent',
                    'createdAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'form_id',
                    'data',
                    'ip_address',
                    'user_agent',
                    'created_at',
                ],
                'nullable' => [
                    5 => true,
                    true,
                ],
            ],
        ],
        $o[0],
        []
    );
},
51 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Site',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'tenantId' => $o[2],
                        'domain' => $o[3],
                        'name' => $o[4],
                        'status' => $o[5],
                        'createdAt' => $o[6],
                        'updatedAt' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'tenant_id' => 'tenantId',
                        'domain' => 'domain',
                        'name' => 'name',
                        'status' => 'status',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'tenantId' => 'tenant_id',
                        'domain' => 'domain',
                        'name' => 'name',
                        'status' => 'status',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'sites',
                        'uniqueConstraints' => [
                            [
                                'columns' => [
                                    'tenant_id',
                                    'domain',
                                ],
                            ],
                        ],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Site',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'uuid',
                    'uuid',
                    'string',
                    'string',
                    'string',
                    'datetimetz_immutable',
                    'datetimetz_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'tenantId',
                    'domain',
                    'name',
                    'status',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'tenant_id',
                    'domain',
                    'name',
                    'status',
                    'created_at',
                    'updated_at',
                ],
                'options' => [
                    5 => [
                        'default' => 'active',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
