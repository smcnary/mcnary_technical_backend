<?php //App.Entity.Category

return [PHP_INT_MAX, static fn () => \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
    $o = [
        (($f = &\Symfony\Component\VarExporter\Internal\Registry::$factories)['Symfony\\Component\\Validator\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\ClassMetadata'))(),
        ($f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::f('Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'))(),
        clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Symfony\\Component\\Validator\\Constraints\\NotBlank'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\NotBlank')),
        clone ($p['Symfony\\Component\\Validator\\Constraints\\Length'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Length')),
        $f['Symfony\\Component\\Validator\\Mapping\\PropertyMetadata'](),
        clone $p['Symfony\\Component\\Validator\\Constraints\\NotBlank'],
        clone $p['Symfony\\Component\\Validator\\Constraints\\Length'],
        clone ($p['Symfony\\Component\\Validator\\Constraints\\Regex'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Validator\\Constraints\\Regex')),
    ],
    null,
    [
        'stdClass' => [
            'name' => [
                'App\\Entity\\Category',
                'name',
                4 => 'slug',
            ],
            'defaultGroup' => [
                'Category',
            ],
            'members' => [
                [
                    'name' => [
                        $o[1],
                    ],
                    'slug' => [
                        $o[4],
                    ],
                ],
            ],
            'properties' => [
                [
                    'name' => $o[1],
                    'slug' => $o[4],
                ],
            ],
            'constraints' => [
                1 => [
                    $o[2],
                    $o[3],
                ],
                4 => [
                    $o[5],
                    $o[6],
                    $o[7],
                ],
            ],
            'constraintsByGroup' => [
                1 => [
                    'Default' => [
                        $o[2],
                        $o[3],
                    ],
                    'Category' => [
                        $o[2],
                        $o[3],
                    ],
                ],
                4 => [
                    'Default' => [
                        $o[5],
                        $o[6],
                        $o[7],
                    ],
                    'Category' => [
                        $o[5],
                        $o[6],
                        $o[7],
                    ],
                ],
            ],
            'class' => [
                1 => 'App\\Entity\\Category',
                4 => 'App\\Entity\\Category',
            ],
            'property' => [
                1 => 'name',
                4 => 'slug',
            ],
            'payload' => [
                2 => null,
                null,
                5 => null,
                null,
                null,
            ],
            'groups' => [
                2 => [
                    'Default',
                    'Category',
                ],
                [
                    'Default',
                    'Category',
                ],
                5 => [
                    'Default',
                    'Category',
                ],
                [
                    'Default',
                    'Category',
                ],
                [
                    'Default',
                    'Category',
                ],
            ],
            'max' => [
                3 => 255,
                6 => 255,
            ],
            'min' => [
                3 => 2,
                6 => 2,
            ],
            'message' => [
                7 => 'Slug must contain only lowercase letters, numbers, and hyphens',
            ],
            'pattern' => [
                7 => '/^[a-z0-9-]+$/',
            ],
        ],
    ],
    $o[0],
    []
)];
