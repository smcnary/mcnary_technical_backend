#!/bin/bash

echo "‚òÅÔ∏è  Cloud Database Migration Script"
echo "=================================="

# Check if we're in the backend directory
if [ ! -f "composer.json" ]; then
    echo "‚ùå Error: Please run this script from the backend directory"
    exit 1
fi

# Function to get cloud database details
get_cloud_details() {
    echo "üåê Please provide your cloud database details:"
    echo ""
    
    read -p "Cloud Database Host: " CLOUD_HOST
    read -p "Cloud Database Port [5432]: " CLOUD_PORT
    CLOUD_PORT=${CLOUD_PORT:-5432}
    read -p "Cloud Database Name [tulsa_seo]: " CLOUD_DB_NAME
    CLOUD_DB_NAME=${CLOUD_DB_NAME:-tulsa_seo}
    read -p "Cloud Admin Username: " CLOUD_ADMIN_USER
    read -s -p "Cloud Admin Password: " CLOUD_ADMIN_PASSWORD
    echo ""
    
    # Validate inputs
    if [ -z "$CLOUD_HOST" ] || [ -z "$CLOUD_ADMIN_USER" ] || [ -z "$CLOUD_ADMIN_PASSWORD" ]; then
        echo "‚ùå Error: Host, admin username, and password are required"
        exit 1
    fi
}

# Function to setup cloud database
setup_cloud_database() {
    echo "üöÄ Setting up cloud database..."
    
    # Test connection to cloud database
    echo "üîç Testing connection to cloud database..."
    if PGPASSWORD="$CLOUD_ADMIN_PASSWORD" psql -h "$CLOUD_HOST" -p "$CLOUD_PORT" -U "$CLOUD_ADMIN_USER" -d postgres -c "SELECT 1;" &> /dev/null; then
        echo "‚úÖ Cloud database connection successful"
    else
        echo "‚ùå Failed to connect to cloud database"
        echo "üí° Please check your credentials and network connectivity"
        exit 1
    fi
    
    # Create database and user on cloud
    echo "üóÑÔ∏è Creating database and user on cloud..."
    PGPASSWORD="$CLOUD_ADMIN_PASSWORD" psql -h "$CLOUD_HOST" -p "$CLOUD_PORT" -U "$CLOUD_ADMIN_USER" -d postgres << EOF
-- Create database if it doesn't exist
SELECT 'CREATE DATABASE $CLOUD_DB_NAME' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$CLOUD_DB_NAME')\gexec

-- Create smcnary user if it doesn't exist
DO \$\$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'smcnary') THEN
        CREATE ROLE smcnary WITH LOGIN PASSWORD 'TulsaSeo122';
    ELSE
        ALTER ROLE smcnary WITH PASSWORD 'TulsaSeo122';
    END IF;
END
\$\$;

-- Grant privileges
GRANT ALL PRIVILEGES ON DATABASE $CLOUD_DB_NAME TO smcnary;
GRANT CREATE ON DATABASE $CLOUD_DB_NAME TO smcnary;
GRANT CONNECT ON DATABASE $CLOUD_DB_NAME TO smcnary;

-- Connect to the database to grant schema privileges
\c $CLOUD_DB_NAME

-- Grant schema privileges
GRANT ALL ON SCHEMA public TO smcnary;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO smcnary;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO smcnary;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO smcnary;

-- Set default privileges for future objects
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO smcnary;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO smcnary;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO smcnary;

-- Make smcnary the owner of the database
ALTER DATABASE $CLOUD_DB_NAME OWNER TO smcnary;
EOF

    if [ $? -eq 0 ]; then
        echo "‚úÖ Cloud database setup completed successfully!"
    else
        echo "‚ùå Error setting up cloud database"
        exit 1
    fi
}

# Function to test smcnary connection to cloud
test_cloud_connection() {
    echo "üîç Testing smcnary connection to cloud database..."
    
    if PGPASSWORD="TulsaSeo122" psql -h "$CLOUD_HOST" -p "$CLOUD_PORT" -U "smcnary" -d "$CLOUD_DB_NAME" -c "SELECT 'Cloud connection successful' as status;" &> /dev/null; then
        echo "‚úÖ Cloud connection test successful with smcnary user"
        return 0
    else
        echo "‚ùå Cloud connection test failed with smcnary user"
        return 1
    fi
}

# Function to update environment files
update_environment_files() {
    echo "üìù Updating environment files for cloud..."
    
    # Update env.prod with cloud details
    if [ -f "env.prod" ]; then
        # Escape special characters for sed
        ESCAPED_PASSWORD=$(echo "TulsaSeo122" | sed 's/[[\.*^$()+?{|]/\\&/g')
        
        # Update DATABASE_URL in env.prod
        sed -i.bak "s|DATABASE_URL=.*|DATABASE_URL=\"postgresql://smcnary:${ESCAPED_PASSWORD}@${CLOUD_HOST}:${CLOUD_PORT}/${CLOUD_DB_NAME}?serverVersion=16&charset=utf8\"|" env.prod
        
        echo "‚úÖ Updated env.prod with cloud database details"
    fi
    
    # Create cloud-specific environment file
    cat > env.cloud << EOF
# Cloud Production Environment Configuration
# Generated by migrate-to-cloud.sh

# Application Environment
APP_ENV=prod
APP_DEBUG=false
APP_SECRET=your-production-secret-key-change-this

# Cloud Database Configuration
DATABASE_URL="postgresql://smcnary:TulsaSeo122%23%24@${CLOUD_HOST}:${CLOUD_PORT}/${CLOUD_DB_NAME}?serverVersion=16&charset=utf8"

# Google OAuth Configuration (Production)
GOOGLE_OAUTH_CLIENT_ID="your_google_oauth_client_id"
GOOGLE_OAUTH_CLIENT_SECRET="your_google_oauth_client_secret"
GOOGLE_OAUTH_REDIRECT_URI="https://api.your-domain.com/api/v1/auth/google/callback"

# Microsoft OAuth Configuration (Production)
MICROSOFT_OAUTH_CLIENT_ID="your_microsoft_oauth_client_id"
MICROSOFT_OAUTH_CLIENT_SECRET="your_microsoft_oauth_client_secret"
MICROSOFT_OAUTH_REDIRECT_URI="https://api.your-domain.com/api/v1/auth/microsoft/callback"

# Frontend URL (Production)
APP_FRONTEND_URL="https://your-domain.com"

# JWT Configuration (Production)
JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem
JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem
JWT_PASSPHRASE=your-production-passphrase

# CORS Configuration (Production)
CORS_ALLOW_ORIGIN="^https://your-domain\.com$"

# Logging (Production)
MONOLOG_LEVEL=WARNING

# Cache (Production)
CACHE_DRIVER=file

# Security (Production)
SECURITY_STRICT_TRANSPORT_SECURITY=true
SECURITY_CONTENT_TYPE_NOSNIFF=true
SECURITY_X_FRAME_OPTIONS=DENY
SECURITY_X_CONTENT_TYPE_OPTIONS=nosniff
EOF

    echo "‚úÖ Created env.cloud with cloud database configuration"
}

# Function to run migrations on cloud
run_cloud_migrations() {
    echo "üìä Running migrations on cloud database..."
    
    # Temporarily update .env.local for cloud
    if [ -f ".env.local" ]; then
        cp .env.local .env.local.backup
    fi
    
    # Create temporary .env.local for cloud
    ESCAPED_PASSWORD=$(echo "TulsaSeo122" | sed 's/[[\.*^$()+?{|]/\\&/g')
    cat > .env.local << EOF
APP_ENV=prod
DATABASE_URL="postgresql://smcnary:${ESCAPED_PASSWORD}@${CLOUD_HOST}:${CLOUD_PORT}/${CLOUD_DB_NAME}?serverVersion=16&charset=utf8"
EOF
    
    # Run migrations
    php bin/console doctrine:migrations:migrate --env=prod --no-interaction
    
    # Restore original .env.local
    if [ -f ".env.local.backup" ]; then
        mv .env.local.backup .env.local
    fi
    
    echo "‚úÖ Cloud migrations completed"
}

# Main execution
echo "üöÄ Starting cloud database migration..."

# Check if psql is available
if ! command -v psql &> /dev/null; then
    echo "‚ùå Error: psql command not found. Please install PostgreSQL client tools."
    echo "   On macOS: brew install postgresql"
    echo "   On Ubuntu: sudo apt-get install postgresql-client"
    exit 1
fi

# Get cloud database details
get_cloud_details

# Setup cloud database
setup_cloud_database

# Test connection
if test_cloud_connection; then
    echo "‚úÖ Cloud database setup completed successfully!"
    
    # Update environment files
    update_environment_files
    
    # Run migrations
    run_cloud_migrations
    
    echo ""
    echo "üéâ Cloud Migration Complete!"
    echo "============================"
    echo "Cloud Host: $CLOUD_HOST"
    echo "Cloud Port: $CLOUD_PORT"
    echo "Database: $CLOUD_DB_NAME"
    echo "User: smcnary"
    echo "Password: TulsaSeo122"
    echo "Privileges: System Admin (ALL PRIVILEGES)"
    echo ""
    echo "üîó Cloud Connection String:"
    echo "postgresql://smcnary:TulsaSeo122@$CLOUD_HOST:$CLOUD_PORT/$CLOUD_DB_NAME"
    echo ""
    echo "üìÅ New Environment Files:"
    echo "   - env.cloud (cloud-specific configuration)"
    echo "   - env.prod (updated with cloud details)"
    echo ""
    echo "üöÄ Next steps:"
    echo "   1. Switch to cloud environment: ./switch-env.sh cloud"
    echo "   2. Test cloud connection"
    echo "   3. Deploy your application to the cloud"
    echo "   4. Update DNS and domain settings"
else
    echo "‚ùå Cloud database setup failed. Please check your configuration."
    exit 1
fi
