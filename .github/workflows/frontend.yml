name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'

jobs:
  test:
    name: Node.js Tests & Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Fix security vulnerabilities
        run: |
          cd frontend
          echo "üîß Attempting to fix security vulnerabilities..."
          npm audit fix --audit-level=moderate || {
            echo "‚ö†Ô∏è Some vulnerabilities could not be automatically fixed."
            echo "Manual review required for remaining issues."
          }

      - name: Run linting
        run: cd frontend && npm run lint

      - name: Run type checking
        run: cd frontend && npx tsc --noEmit

      - name: Run tests (if test script exists)
        run: |
          cd frontend
          if npm run | grep -q "test"; then
            npm test -- --coverage --watchAll=false
          else
            echo "No test script found, skipping tests"
          fi

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          flags: frontend
          name: frontend-coverage

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=moderate || {
            echo "‚ö†Ô∏è Security vulnerabilities found. Continuing with workflow..."
            echo "Vulnerabilities will be reported but won't block the build."
            exit 0
          }

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          working-directory: frontend

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Build application
        run: cd frontend && npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 30

      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-info
          path: |
            frontend/package.json
            frontend/package-lock.json
          retention-days: 30

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          cd frontend
          lhci autorun --upload.target=temporary-public-storage

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Deploy to staging
        run: |
          echo "Deploying frontend to staging environment..."
          # Add your staging deployment logic here
          # Example: AWS S3, Netlify, Vercel, or custom server deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, lighthouse]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Deploy to production
        run: |
          echo "Deploying frontend to production environment..."
          # Add your production deployment logic here
          # Example: AWS S3, Netlify, Vercel, or custom server deployment

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Deployment completed successfully!"
          # Add your notification logic here (Slack, email, etc.)

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          # Add your failure notification logic here
