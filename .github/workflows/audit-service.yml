name: Audit Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'audit-service/**'
      - '.github/workflows/audit-service.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'audit-service/**'
      - '.github/workflows/audit-service.yml'

jobs:
  test:
    name: PHP Tests & Quality (Audit)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_pgsql, xml, zip, gd, curl, iconv
          tools: composer:v2

      - name: Validate composer.json
        run: cd audit-service && composer validate --strict

      - name: Install dependencies
        env:
          COMPOSER_PROCESS_TIMEOUT: 300
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: |
          cd audit-service
          echo "üì¶ Installing audit-service dependencies..."
          composer install --verbose --prefer-dist --no-progress --no-interaction || {
            echo "‚ùå Composer install failed"
            composer diagnose
            exit 1
          }
          echo "‚úÖ Dependencies installed successfully"

      - name: Run tests (if available)
        run: |
          cd audit-service
          if [ -f "vendor/bin/phpunit" ]; then
            vendor/bin/phpunit || {
              echo "‚ùå Tests failed"
              exit 1
            }
          else
            echo "‚ö†Ô∏è PHPUnit not found, skipping tests"
          fi

      - name: Static analysis (PHPStan if present)
        run: |
          cd audit-service
          if [ -f "vendor/bin/phpstan" ]; then
            vendor/bin/phpstan analyse src --level=max || echo "‚ö†Ô∏è PHPStan issues detected"
          else
            echo "‚ö†Ô∏è PHPStan not found, skipping static analysis"
          fi

  build:
    name: Build Audit Service
    runs-on: ubuntu-latest
    needs: test
    # Build on both main and develop so staging/dev deploys have artifacts
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Install dependencies
        env:
          COMPOSER_PROCESS_TIMEOUT: 300
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: |
          cd audit-service
          # Install with dev dependencies but skip post-install scripts in CI
          composer install --verbose --prefer-dist --no-progress --no-interaction --no-scripts || {
            echo "‚ùå Composer install failed"
            composer diagnose
            exit 1
          }
          
          # Then optimize for production (this will keep the bundles but optimize autoloader)
          composer dump-autoload --optimize --no-dev --classmap-authoritative || {
            echo "‚ö†Ô∏è Autoloader optimization failed, continuing with standard autoloader"
          }

      - name: Warm production cache
        run: |
          cd audit-service
          # Create production bundles config (exclude dev bundles)
          php ../../.github/scripts/create-prod-bundles.php
          
          # Temporarily backup original bundles.php and use production version
          cp config/bundles.php config/bundles.php.backup
          cp config/bundles_prod.php config/bundles.php
          
          # Clear cache in production environment using production bundles config
          php bin/console cache:clear --env=prod --no-debug || {
            echo "‚ö†Ô∏è Cache clear failed, continuing..."
          }
          php bin/console cache:warmup --env=prod || {
            echo "‚ö†Ô∏è Cache warmup failed, continuing..."
          }
          
          # Restore original bundles.php
          cp config/bundles.php.backup config/bundles.php

      - name: Create build artifact
        run: |
          cd audit-service
          tar -czf audit-service-build.tar.gz \
            --exclude='.git' \
            --exclude='tests' \
            --exclude='var/cache/dev' \
            --exclude='var/log/dev.log' \
            --exclude='.env.local' \
            --exclude='.env.test' \
            .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: audit-service-build
          path: audit-service/audit-service-build.tar.gz
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging (Audit)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: audit-service-build
          path: audit-service/

      - name: Deploy to staging
        run: echo "üöÄ Deploying audit-service to staging environment..."

  deploy-production:
    name: Deploy to Production (Audit)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: audit-service-build
          path: audit-service/

      - name: Deploy to production
        run: echo "üöÄ Deploying audit-service to production environment..."


