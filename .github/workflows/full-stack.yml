name: Full Stack CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_pgsql, xml, zip, gd, curl, iconv
          tools: composer:v2

      - name: Setup PostgreSQL
        uses: Harmon758/postgresql-action@v1.0.3
        with:
          postgresql-version: '16'
          postgresql-db: 'test_db_test'
          postgresql-user: 'test_user'
          postgresql-password: 'test_password'
          postgresql-port: 5432

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Verify PostgreSQL connection
        run: |
          echo "🔍 Verifying PostgreSQL connection..."
          PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "SELECT version();" || {
            echo "❌ Cannot connect to PostgreSQL as postgres"
            echo "🔍 Checking PostgreSQL service status..."
            sudo systemctl status postgresql || echo "PostgreSQL service not found"
            echo "🔍 Checking if PostgreSQL port is listening..."
            netstat -tlnp | grep 5432 || echo "Port 5432 not listening"
            exit 1
          }
          echo "✅ PostgreSQL connection verified successfully"

      - name: Ensure test database exists
        run: |
          echo "🗄️ Ensuring test database exists..."
          PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "
            CREATE DATABASE test_db_test;
            \l test_db_test;
          " || {
            echo "⚠️ Database might already exist, continuing..."
          }
          echo "✅ Test database verified/created successfully"

      - name: Install backend dependencies
        env:
          COMPOSER_PROCESS_TIMEOUT: 300
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: |
          cd backend
          echo "📦 Installing backend dependencies..."
          composer install --verbose --prefer-dist --no-progress --no-interaction || {
            echo "❌ Composer install failed"
            composer diagnose
            exit 1
          }
          echo "✅ Backend dependencies installed successfully"

      - name: Setup PostgreSQL permissions
        run: |
          echo "🔧 Setting up PostgreSQL permissions..."
          PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "
            -- Create test user if it doesn't exist
            CREATE USER test_user WITH PASSWORD 'test_password';
            -- Grant all privileges on test database
            GRANT ALL PRIVILEGES ON DATABASE test_db_test TO test_user;
            -- Grant schema creation privileges
            GRANT CREATE ON SCHEMA public TO test_user;
            -- Grant usage on all schemas
            GRANT USAGE ON SCHEMA public TO test_user;
          " || {
            echo "⚠️ User might already exist, continuing..."
          }
          
          echo "🔍 Verifying test user permissions..."
          PGPASSWORD=test_password psql -h 127.0.0.1 -p 5432 -U test_user -d test_db_test -c "
            -- Test if user can connect
            SELECT 'Connection successful' as status;
            -- Test if user can see the current database
            SELECT current_database() as current_db;
          " || {
            echo "❌ Test user permissions verification failed"
            exit 1
          }
          
          echo "🔍 Testing table creation permissions..."
          PGPASSWORD=test_password psql -h 127.0.0.1 -p 5432 -U test_user -d test_db_test -c "
            -- Test if user can create a test table
            CREATE TABLE IF NOT EXISTS test_permissions (id INT);
            -- Test if user can drop the test table
            DROP TABLE IF EXISTS test_permissions;
            SELECT 'Table operations successful' as status;
          " || {
            echo "❌ Test user table permissions verification failed"
            exit 1
          }
          echo "✅ Test user permissions verified successfully"

      - name: Debug PostgreSQL status
        run: |
          echo "🔍 Debugging PostgreSQL status..."
          echo "--- Current PostgreSQL users ---"
          PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "\du test_user"
          echo "--- Current databases ---"
          PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "\l"
          echo "--- Test user privileges ---"
          PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d postgres -c "\du+"

      - name: Run backend tests
        run: |
          cd backend
          # Remove any existing test environment files
          rm -f .env.test .env.test.local
          
          # Create test environment file with test-specific configuration
          # This will override any PostgreSQL settings from base .env files
          echo "APP_ENV=test" > .env.test
          echo "APP_DEBUG=false" >> .env.test
          echo "APP_SECRET=test-secret-key-for-ci" >> .env.test
          echo 'DATABASE_URL="postgresql://test_user:test_password@127.0.0.1:5432/test_db_test?serverVersion=16&charset=utf8"' >> .env.test
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-ci" >> .env.test
          echo "JWT_PASSPHRASE=test-jwt-passphrase-for-ci" >> .env.test
          echo 'CORS_ALLOW_ORIGIN="^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$"' >> .env.test
          
          # Also create .env.test.local to ensure highest precedence
          cp .env.test .env.test.local
          
          echo "✅ Test environment file created successfully"
          echo "📋 Test environment configuration:"
          cat .env.test
          
          echo "📋 Test environment local configuration:"
          cat .env.test.local
          
          echo "🔍 Verifying environment variable precedence..."
          echo "Current DATABASE_URL: $DATABASE_URL"
          
          echo "🗄️ Setting up test database..."
          
          # Explicitly unset any conflicting environment variables
          echo "🧹 Clearing conflicting environment variables..."
          unset DATABASE_URL || true
          unset PGPASSWORD || true
          unset PGHOST || true
          unset PGPORT || true
          unset PGDATABASE || true
          unset PGUSER || true
          
          # Verify the test environment is loaded
          echo "🔍 Verifying test environment loading..."
          php bin/console debug:container --env=test | grep -i database || {
            echo "⚠️ Could not verify database configuration, continuing..."
          }
          
          php bin/console doctrine:database:create --env=test --if-not-exists || {
            echo "❌ Failed to create test database"
            exit 1
          }
          
          echo "🔧 Clearing Doctrine cache..."
          php bin/console cache:clear --env=test || {
            echo "⚠️ Cache clear failed, continuing..."
          }
          
          echo "🔍 Verifying Doctrine configuration..."
          php bin/console debug:config doctrine dbal || {
            echo "⚠️ Could not show Doctrine config, continuing..."
          }
          
          echo "🔍 Checking Doctrine platform..."
          php bin/console debug:container doctrine.dbal.default_connection.driver || {
            echo "⚠️ Could not show driver info, continuing..."
          }
          
          echo "🗄️ Creating database schema..."
          php bin/console doctrine:schema:create --env=test || {
            echo "❌ Failed to create test schema"
            echo "🔍 Checking for schema validation issues..."
            php bin/console doctrine:schema:validate --env=test || {
              echo "⚠️ Schema validation failed"
            }
            exit 1
          }
          php bin/console doctrine:migrations:migrate --env=test --no-interaction || {
            echo "❌ Failed to run test migrations"
            exit 1
          }
          # Run tests if phpunit is available
          echo "🧪 Running tests..."
          if [ -f "vendor/bin/phpunit" ]; then
            vendor/bin/phpunit || {
              echo "❌ Tests failed"
              exit 1
            }
            echo "✅ Tests completed successfully"
          else
            echo "⚠️ PHPUnit not found, skipping tests"
          fi
          
          # Clean up test environment files
          rm -f .env.test .env.test.local

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Fix security vulnerabilities
        run: cd frontend && echo "🔧 Attempting to fix security vulnerabilities..." && npm audit fix --audit-level=moderate || { echo "⚠️ Some vulnerabilities could not be automatically fixed."; echo "Manual review required for remaining issues."; }

      - name: Run frontend linting
        run: cd frontend && npm run lint

      - name: Run frontend type checking
        run: cd frontend && npx tsc --noEmit

  backend-build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: backend-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Install backend dependencies
        env:
          COMPOSER_PROCESS_TIMEOUT: 300
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: |
          cd backend
          echo "📦 Installing backend dependencies (production)..."
          composer install --verbose --prefer-dist --no-dev --optimize-autoloader --no-progress --no-interaction || {
            echo "❌ Composer install failed"
            composer diagnose
            exit 1
          }
          echo "✅ Backend dependencies installed successfully"

      - name: Build backend
        run: cd backend && php bin/console cache:clear --env=prod --no-debug && php bin/console cache:warmup --env=prod && php bin/console assets:install public --env=prod

      - name: Create backend artifact
        run: cd backend && tar -czf backend-build.tar.gz --exclude='.git' --exclude='tests' --exclude='var/cache/dev' --exclude='var/log/dev.log' --exclude='.env.local' --exclude='.env.test' .

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/backend-build.tar.gz
          retention-days: 30

  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: frontend-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/

      - name: Deploy to staging
        run: echo "🚀 Deploying full stack to staging environment..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/

      - name: Deploy to production
        run: echo "🚀 Deploying full stack to production environment..."

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Run integration tests
        run: echo "🧪 Running integration tests..."

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, integration-test]
    if: always()

    steps:
      - name: Notify on success
        if: success()
        run: echo "✅ Full stack deployment completed successfully!"

      - name: Notify on failure
        if: failure()
        run: echo "❌ Full stack deployment failed!"
