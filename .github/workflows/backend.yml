name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  test:
    name: PHP Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql, xml, zip, gd, curl, iconv
          coverage: xdebug
          tools: composer:v2

      - name: Validate composer.json
        run: cd backend && composer validate --strict

      - name: Install dependencies
        run: cd backend && composer install --prefer-dist --no-progress --no-interaction

      - name: Copy environment file
        run: cd backend && cp .env .env.test

      - name: Configure test environment
        run: |
          cd backend
          echo "DATABASE_URL=mysql://test_user:test_password@127.0.0.1:3306/test_db" >> .env.test
          echo "APP_ENV=test" >> .env.test
          echo "APP_SECRET=test_secret_key_for_testing_only" >> .env.test

      - name: Create database schema
        run: |
          cd backend
          php bin/console doctrine:database:create --env=test --if-not-exists
          php bin/console doctrine:schema:create --env=test

      - name: Run migrations
        run: cd backend && php bin/console doctrine:migrations:migrate --env=test --no-interaction

      - name: Run tests
        run: cd backend && php bin/phpunit --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Run PHPStan static analysis
        run: cd backend && vendor/bin/phpstan analyse src --level=8

      - name: Run PHP CS Fixer
        run: cd backend && vendor/bin/php-cs-fixer fix --dry-run --diff

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Install dependencies
        run: cd backend && composer install --prefer-dist --no-dev --no-progress --no-interaction

      - name: Run security audit
        run: cd backend && composer audit --format=json --output=security-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: backend/security-report.json

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Install dependencies
        run: cd backend && composer install --prefer-dist --no-dev --optimize-autoloader --no-progress --no-interaction

      - name: Clear cache
        run: cd backend && php bin/console cache:clear --env=prod --no-debug

      - name: Warm up cache
        run: cd backend && php bin/console cache:warmup --env=prod

      - name: Build assets
        run: cd backend && php bin/console assets:install public --env=prod

      - name: Create build artifact
        run: |
          cd backend
          tar -czf backend-build.tar.gz \
            --exclude='.git' \
            --exclude='tests' \
            --exclude='var/cache/dev' \
            --exclude='var/log/dev.log' \
            --exclude='.env.local' \
            --exclude='.env.test' \
            .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/backend-build.tar.gz
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: rsync, SSH deployment, or cloud platform deployment

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: rsync, SSH deployment, or cloud platform deployment
