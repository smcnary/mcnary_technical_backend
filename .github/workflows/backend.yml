name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  test:
    name: PHP Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql, xml, zip, gd, curl, iconv
          coverage: xdebug
          tools: composer:v2

      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client

      - name: Verify MySQL connection
        run: |
          echo "üîç Verifying MySQL connection..."
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT VERSION();" || {
            echo "‚ùå Cannot connect to MySQL as root"
            echo "üîç Checking MySQL service status..."
            sudo systemctl status mysql || echo "MySQL service not found"
            echo "üîç Checking if MySQL port is listening..."
            netstat -tlnp | grep 3306 || echo "Port 3306 not listening"
            exit 1
          }
          echo "‚úÖ MySQL connection verified successfully"

      - name: Ensure test database exists
        run: |
          echo "üóÑÔ∏è Ensuring test database exists..."
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "
            CREATE DATABASE IF NOT EXISTS test_db_test;
            SHOW DATABASES LIKE 'test_db_test';
          "
          echo "‚úÖ Test database verified/created successfully"

      - name: Validate composer.json
        run: cd backend && composer validate --strict

      - name: Install dependencies
        env:
          COMPOSER_PROCESS_TIMEOUT: 300
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: |
          cd backend
          echo "üì¶ Installing backend dependencies..."
          composer install --verbose --prefer-dist --no-progress --no-interaction || {
            echo "‚ùå Composer install failed"
            composer diagnose
            exit 1
          }
          echo "‚úÖ Backend dependencies installed successfully"

      - name: Setup MySQL permissions
        run: |
          echo "üîß Setting up MySQL permissions..."
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "
            -- Grant all privileges on all databases to test_user
            GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%';
            -- Grant specific privileges for test database
            GRANT CREATE, DROP, ALTER, INDEX, SELECT, INSERT, UPDATE, DELETE ON *.* TO 'test_user'@'%';
            FLUSH PRIVILEGES;
            -- Show the granted privileges
            SHOW GRANTS FOR 'test_user'@'%';
            -- Verify the user can connect
            SELECT User, Host FROM mysql.user WHERE User = 'test_user';
          "
          
          echo "üîç Verifying test user permissions..."
          mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "
            -- Test if user can connect
            SELECT 'Connection successful' as status;
            -- Test if user can see the test database
            SHOW DATABASES LIKE 'test_db_test';
          " || {
            echo "‚ùå Test user permissions verification failed"
            exit 1
          }
          
          echo "üîç Testing table creation permissions..."
          mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password test_db_test -e "
            -- Test if user can create a test table
            CREATE TABLE IF NOT EXISTS test_permissions (id INT);
            -- Test if user can drop the test table
            DROP TABLE IF EXISTS test_permissions;
            SELECT 'Table operations successful' as status;
          " || {
            echo "‚ùå Test user table permissions verification failed"
            exit 1
          }
          echo "‚úÖ Test user permissions verified successfully"

      - name: Debug MySQL status
        run: |
          echo "üîç Debugging MySQL status..."
          echo "--- Current MySQL users ---"
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT User, Host, authentication_string FROM mysql.user WHERE User = 'test_user';"
          echo "--- Current databases ---"
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SHOW DATABASES;"
          echo "--- Test user privileges ---"
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SHOW GRANTS FOR 'test_user'@'%';"

      - name: Configure test environment
        run: |
          cd backend
          # Remove any existing test environment file
          rm -f .env.test
          
          # Create test environment file with test-specific configuration
          echo "APP_ENV=test" > .env.test
          echo "APP_DEBUG=false" >> .env.test
          echo "APP_SECRET=test_secret_key_for_testing_only" >> .env.test
          echo 'DATABASE_URL="mysql://test_user:test_password@127.0.0.1:3306/test_db_test?serverVersion=8.0&charset=utf8&platform=mysql"' >> .env.test
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-ci" >> .env.test
          echo "JWT_PASSPHRASE=test-jwt-passphrase-for-ci" >> .env.test
          echo 'CORS_ALLOW_ORIGIN="^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$"' >> .env.test
          
          echo "‚úÖ Test environment file created successfully"

      - name: Create database schema
        run: |
          cd backend
          echo "üóÑÔ∏è Creating database schema..."
          php bin/console doctrine:database:create --env=test --if-not-exists || {
            echo "‚ùå Failed to create test database"
            exit 1
          }
          
          echo "üîß Clearing Doctrine cache..."
          php bin/console cache:clear --env=test || {
            echo "‚ö†Ô∏è Cache clear failed, continuing..."
          }
          
          echo "üîç Verifying Doctrine configuration..."
          php bin/console debug:config doctrine dbal || {
            echo "‚ö†Ô∏è Could not show Doctrine config, continuing..."
          }
          
          echo "üîç Checking Doctrine platform..."
          php bin/console debug:container doctrine.dbal.default_connection.driver || {
            echo "‚ö†Ô∏è Could not show driver info, continuing..."
          }
          
          echo "üóÑÔ∏è Creating database schema..."
          php bin/console doctrine:schema:create --env=test || {
            echo "‚ùå Failed to create test schema"
            echo "üîç Checking for schema validation issues..."
            php bin/console doctrine:schema:validate --env=test || {
              echo "‚ö†Ô∏è Schema validation failed"
            }
            exit 1
          }

      - name: Run migrations
        run: cd backend && php bin/console doctrine:migrations:migrate --env=test --no-interaction

      - name: Run tests
        run: |
          cd backend
          echo "üß™ Running backend tests..."
          php bin/phpunit --coverage-clover=coverage.xml || {
            echo "‚ùå Tests failed"
            exit 1
          }
          echo "‚úÖ Tests completed successfully"
          
          # Clean up test environment file
          rm -f .env.test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Run PHPStan static analysis
        run: cd backend && vendor/bin/phpstan analyse src --level=8

      - name: Run PHP CS Fixer
        run: cd backend && vendor/bin/php-cs-fixer fix --dry-run --diff

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Install dependencies
        env:
          COMPOSER_PROCESS_TIMEOUT: 300
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: |
          cd backend
          echo "üì¶ Installing backend dependencies (security)..."
          composer install --verbose --prefer-dist --no-dev --no-progress --no-interaction || {
            echo "‚ùå Composer install failed"
            composer diagnose
            exit 1
          }
          echo "‚úÖ Backend dependencies installed successfully"

      - name: Run security audit
        run: cd backend && composer audit --format=json --output=security-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: backend/security-report.json

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2

      - name: Install dependencies
        env:
          COMPOSER_PROCESS_TIMEOUT: 300
          COMPOSER_NO_INTERACTION: 1
          COMPOSER_NO_AUDIT: 1
        run: |
          cd backend
          echo "üì¶ Installing backend dependencies (build)..."
          composer install --verbose --prefer-dist --no-dev --optimize-autoloader --no-progress --no-interaction || {
            echo "‚ùå Composer install failed"
            composer diagnose
            exit 1
          }
          echo "‚úÖ Backend dependencies installed successfully"

      - name: Clear cache
        run: cd backend && php bin/console cache:clear --env=prod --no-debug

      - name: Warm up cache
        run: cd backend && php bin/console cache:warmup --env=prod

      - name: Build assets
        run: cd backend && php bin/console assets:install public --env=prod

      - name: Create build artifact
        run: cd backend && tar -czf backend-build.tar.gz --exclude='.git' --exclude='tests' --exclude='var/cache/dev' --exclude='var/log/dev.log' --exclude='.env.local' --exclude='.env.test' .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/backend-build.tar.gz
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/

      - name: Deploy to staging
        run: echo "Deploying to staging environment..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/

      - name: Deploy to production
        run: echo "Deploying to production environment..."
