# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Symfony

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  symfony-tests:
    runs-on: ubuntu-latest
    steps:
    #  To automatically get bug fixes and new Php versions for shivammathur/setup-php,
    # change this to (see https://github.com/shivammathur/setup-php#bookmark-versioning):
    # uses: shivammathur/setup-php@v2
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl, pdo_mysql, xml, zip, gd, curl, iconv
        tools: composer:v2
    - uses: actions/checkout@v4
    - name: Ensure test environment file
      run: |
        if [ -f ".env.test" ]; then
          cp .env.test .env.test.local
        else
          echo "Creating minimal .env.test.local for testing..."
          echo "APP_ENV=test" > .env.test.local
          echo "APP_DEBUG=false" >> .env.test.local
          echo "APP_SECRET=test-secret-key-for-ci" >> .env.test.local
          echo 'DATABASE_URL="sqlite:///%kernel.project_dir%/data/database.sqlite"' >> .env.test.local
          echo "JWT_SECRET_KEY=test-jwt-secret-key-for-ci" >> .env.test.local
          echo "JWT_PASSPHRASE=test-jwt-passphrase-for-ci" >> .env.test.local
          echo 'CORS_ALLOW_ORIGIN="^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$"' >> .env.test.local
        fi
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
    - name: Verify Composer configuration
      run: |
        echo "üîç Checking Composer configuration..."
        composer --version
        composer config --list --global
        
    - name: Install Dependencies
      env:
        COMPOSER_PROCESS_TIMEOUT: 300
        COMPOSER_NO_INTERACTION: 1
        COMPOSER_NO_AUDIT: 1
      run: |
        echo "üì¶ Installing Composer dependencies..."
        composer install --verbose --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist || {
          echo "‚ùå Composer install failed"
          echo "üîç Checking for common issues..."
          composer diagnose
          exit 1
        }
        echo "‚úÖ Dependencies installed successfully"
    - name: Create Database
      run: |
        mkdir -p data
        touch data/database.sqlite
        echo "‚úÖ SQLite database file created successfully"
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DATABASE_URL: sqlite:///%kernel.project_dir%/data/database.sqlite
      run: |
        echo "üß™ Running Symfony tests..."
        if [ -f "vendor/bin/phpunit" ]; then
          vendor/bin/phpunit || {
            echo "‚ùå Tests failed"
            exit 1
          }
          echo "‚úÖ Tests completed successfully"
        else
          echo "‚ö†Ô∏è PHPUnit not found, skipping tests"
        fi
        
        # Clean up test environment file
        rm -f .env.test.local
