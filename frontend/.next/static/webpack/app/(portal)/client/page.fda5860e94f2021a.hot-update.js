"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(portal)/client/page",{

/***/ "(app-pages-browser)/./src/services/dataService.ts":
/*!*************************************!*\
  !*** ./src/services/dataService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataService: function() { return /* binding */ dataService; }\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ \"(app-pages-browser)/./src/services/api.ts\");\n\nclass DataService {\n    // Subscribe to data state changes\n    subscribe(listener) {\n        this.listeners.push(listener);\n        return ()=>{\n            const index = this.listeners.indexOf(listener);\n            if (index > -1) {\n                this.listeners.splice(index, 1);\n            }\n        };\n    }\n    // Notify all listeners of state changes\n    notifyListeners() {\n        this.listeners.forEach((listener)=>listener({\n                ...this.state\n            }));\n    }\n    // Get current state\n    getState() {\n        return {\n            ...this.state\n        };\n    }\n    // Set loading state for a specific data type\n    setLoading(dataType, isLoading) {\n        this.state.isLoading[dataType] = isLoading;\n        this.notifyListeners();\n    }\n    // Set error state for a specific data type\n    setError(dataType, error) {\n        this.state.error[dataType] = error;\n        this.notifyListeners();\n    }\n    // Check cache validity\n    isCacheValid(key) {\n        const cached = this.cache.get(key);\n        if (!cached) return false;\n        return Date.now() - cached.timestamp < this.CACHE_DURATION;\n    }\n    // Get cached data\n    getCachedData(key) {\n        const cached = this.cache.get(key);\n        if (cached && this.isCacheValid(key)) {\n            return cached.data;\n        }\n        return null;\n    }\n    // Set cached data\n    setCachedData(key, data) {\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n    }\n    // Clear cache for specific data type\n    clearCache(dataType) {\n        const keys = Array.from(this.cache.keys()).filter((key)=>key.startsWith(dataType));\n        keys.forEach((key)=>this.cache.delete(key));\n    }\n    // Clear all cache\n    clearAllCache() {\n        this.cache.clear();\n    }\n    // CLIENT MANAGEMENT\n    async getClients(params) {\n        const cacheKey = \"clients:\".concat(JSON.stringify(params || {}));\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            this.setLoading(\"clients\", true);\n            this.setError(\"clients\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getClients(params);\n            const clients = response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.clients = clients;\n            this.setCachedData(cacheKey, clients);\n            this.notifyListeners();\n            return clients;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch clients\";\n            this.setError(\"clients\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"clients\", false);\n        }\n    }\n    async getClient(id) {\n        const cacheKey = \"client:\".concat(id);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const client = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getClient(id);\n            this.setCachedData(cacheKey, client);\n            return client;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async createClient(clientData) {\n        try {\n            const client = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.createClient(clientData);\n            this.state.clients.push(client);\n            this.clearCache(\"clients\");\n            this.notifyListeners();\n            return client;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async updateClient(id, clientData) {\n        try {\n            const client = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.updateClient(id, clientData);\n            const index = this.state.clients.findIndex((c)=>c.id === id);\n            if (index !== -1) {\n                this.state.clients[index] = client;\n            }\n            this.clearCache(\"clients\");\n            this.clearCache(\"client:\".concat(id));\n            this.notifyListeners();\n            return client;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // CAMPAIGN MANAGEMENT\n    async getCampaigns(params) {\n        const cacheKey = \"campaigns:\".concat(JSON.stringify(params || {}));\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            this.setLoading(\"campaigns\", true);\n            this.setError(\"campaigns\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getCampaigns(params);\n            const campaigns = response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.campaigns = campaigns;\n            this.setCachedData(cacheKey, campaigns);\n            this.notifyListeners();\n            return campaigns;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch campaigns\";\n            this.setError(\"campaigns\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"campaigns\", false);\n        }\n    }\n    async createCampaign(campaignData) {\n        try {\n            const campaign = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.createCampaign(campaignData);\n            this.state.campaigns.push(campaign);\n            this.clearCache(\"campaigns\");\n            this.notifyListeners();\n            return campaign;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async updateCampaign(id, campaignData) {\n        try {\n            const campaign = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.updateCampaign(id, campaignData);\n            const index = this.state.campaigns.findIndex((c)=>c.id === id);\n            if (index !== -1) {\n                this.state.campaigns[index] = campaign;\n            }\n            this.clearCache(\"campaigns\");\n            this.notifyListeners();\n            return campaign;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // PACKAGE MANAGEMENT\n    async getPackages(params) {\n        const cacheKey = \"packages:\".concat(JSON.stringify(params || {}));\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            this.setLoading(\"packages\", true);\n            this.setError(\"packages\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getPackages(params);\n            const packages = response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.packages = packages;\n            this.setCachedData(cacheKey, packages);\n            this.notifyListeners();\n            return packages;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch packages\";\n            this.setError(\"packages\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"packages\", false);\n        }\n    }\n    async getPackage(id) {\n        const cacheKey = \"package:\".concat(id);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const packageData = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getPackage(id);\n            this.setCachedData(cacheKey, packageData);\n            return packageData;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // PAGE MANAGEMENT\n    async getPages(params) {\n        const cacheKey = \"pages:\".concat(JSON.stringify(params || {}));\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            this.setLoading(\"pages\", true);\n            this.setError(\"pages\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getPages(params);\n            const pages = response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.pages = pages;\n            this.setCachedData(cacheKey, pages);\n            this.notifyListeners();\n            return pages;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch pages\";\n            this.setError(\"pages\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"pages\", false);\n        }\n    }\n    async getPage(slug) {\n        const cacheKey = \"page:\".concat(slug);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const page = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getPage(slug);\n            this.setCachedData(cacheKey, page);\n            return page;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // MEDIA ASSET MANAGEMENT\n    async getMediaAssets(params) {\n        const cacheKey = \"mediaAssets:\".concat(JSON.stringify(params || {}));\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            this.setLoading(\"mediaAssets\", true);\n            this.setError(\"mediaAssets\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getMediaAssets(params);\n            const mediaAssets = response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.mediaAssets = mediaAssets;\n            this.setCachedData(cacheKey, mediaAssets);\n            this.notifyListeners();\n            return mediaAssets;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch media assets\";\n            this.setError(\"mediaAssets\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"mediaAssets\", false);\n        }\n    }\n    async getMediaAsset(id) {\n        const cacheKey = \"mediaAsset:\".concat(id);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const mediaAsset = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getMediaAsset(id);\n            this.setCachedData(cacheKey, mediaAsset);\n            return mediaAsset;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // FAQ MANAGEMENT\n    async getFaqs(params) {\n        const cacheKey = \"faqs:\".concat(JSON.stringify(params || {}));\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            this.setLoading(\"faqs\", true);\n            this.setError(\"faqs\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getFaqs(params);\n            const faqs = response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.faqs = faqs;\n            this.setCachedData(cacheKey, faqs);\n            this.notifyListeners();\n            return faqs;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch FAQs\";\n            this.setError(\"faqs\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"faqs\", false);\n        }\n    }\n    async getFaq(id) {\n        const cacheKey = \"faq:\".concat(id);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const faq = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getFaq(id);\n            this.setCachedData(cacheKey, faq);\n            return faq;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // CASE STUDY MANAGEMENT\n    async getCaseStudies() {\n        const cacheKey = \"caseStudies\";\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            this.setLoading(\"caseStudies\", true);\n            this.setError(\"caseStudies\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getCaseStudies();\n            const caseStudies = response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.caseStudies = caseStudies;\n            this.setCachedData(cacheKey, caseStudies);\n            this.notifyListeners();\n            return caseStudies;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch case studies\";\n            this.setError(\"caseStudies\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"caseStudies\", false);\n        }\n    }\n    async getCaseStudy(id) {\n        const cacheKey = \"caseStudy:\".concat(id);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const caseStudy = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getCaseStudy(id);\n            this.setCachedData(cacheKey, caseStudy);\n            return caseStudy;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // LEAD MANAGEMENT\n    async getLeads(params) {\n        console.log(\"DataService.getLeads called with params:\", params);\n        const cacheKey = \"leads:\".concat(JSON.stringify(params || {}));\n        const cached = this.getCachedData(cacheKey);\n        if (cached) {\n            console.log(\"Returning cached leads:\", cached.length);\n            return cached;\n        }\n        try {\n            console.log(\"Fetching leads from API...\");\n            this.setLoading(\"leads\", true);\n            this.setError(\"leads\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getLeads(params);\n            const rawLeads = response.data || response[\"hydra:member\"] || response.member || [];\n            // Transform snake_case to camelCase\n            const leads = rawLeads.map((lead)=>({\n                    id: lead.id,\n                    fullName: lead.full_name,\n                    email: lead.email,\n                    phone: lead.phone,\n                    firm: lead.firm,\n                    website: lead.website,\n                    practiceAreas: lead.practice_areas || [],\n                    city: lead.city,\n                    state: lead.state,\n                    zipCode: lead.zip_code,\n                    message: lead.message,\n                    status: lead.status,\n                    statusLabel: lead.status_label,\n                    source: lead.source,\n                    client: lead.client,\n                    createdAt: lead.created_at,\n                    updatedAt: lead.updated_at\n                }));\n            this.state.leads = leads;\n            this.setCachedData(cacheKey, leads);\n            this.notifyListeners();\n            return leads;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch leads\";\n            console.warn(\"API Error fetching leads:\", errorMessage);\n            // Set empty leads array on error\n            this.state.leads = [];\n            this.setCachedData(cacheKey, []);\n            this.notifyListeners();\n            // Throw error to be handled by the component\n            throw error;\n        } finally{\n            this.setLoading(\"leads\", false);\n        }\n    }\n    async importLeadgenData(leads, clientId, sourceId) {\n        try {\n            this.setLoading(\"leads\", true);\n            this.setError(\"leads\", null);\n            const result = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.importLeadgenData(leads, clientId, sourceId);\n            // Clear cache to force refresh\n            this.clearCache(\"leads\");\n            this.notifyListeners();\n            return result;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to import leadgen data\";\n            this.setError(\"leads\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"leads\", false);\n        }\n    }\n    async getLeadEvents(leadId) {\n        const cacheKey = \"lead_events:\".concat(leadId);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const events = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getLeadEvents(leadId);\n            this.setCachedData(cacheKey, events);\n            return events;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async getLeadStatistics(leadId) {\n        const cacheKey = \"lead_statistics:\".concat(leadId);\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const statistics = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getLeadStatistics(leadId);\n            this.setCachedData(cacheKey, statistics);\n            return statistics;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async createLeadEvent(leadId, eventData) {\n        try {\n            const event = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.createLeadEvent(leadId, eventData);\n            // Clear related caches\n            this.clearCache(\"lead_events:\".concat(leadId));\n            this.clearCache(\"lead_statistics:\".concat(leadId));\n            this.clearCache(\"leads\");\n            this.notifyListeners();\n            return event;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // LEADGEN EXECUTION (Admin Only)\n    async executeLeadgenCampaign(config) {\n        try {\n            this.setLoading(\"leadgen\", true);\n            this.setError(\"leadgen\", null);\n            const result = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.executeLeadgenCampaign(config);\n            // Clear leads cache to force refresh\n            this.clearCache(\"leads\");\n            this.notifyListeners();\n            return result;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to execute leadgen campaign\";\n            this.setError(\"leadgen\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"leadgen\", false);\n        }\n    }\n    async getLeadgenVerticals() {\n        const cacheKey = \"leadgen_verticals\";\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const verticals = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getLeadgenVerticals();\n            this.setCachedData(cacheKey, verticals);\n            return verticals;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async getLeadgenSources() {\n        const cacheKey = \"leadgen_sources\";\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const sources = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getLeadgenSources();\n            this.setCachedData(cacheKey, sources);\n            return sources;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async getLeadgenCampaignStatus(campaignId) {\n        try {\n            return await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getLeadgenCampaignStatus(campaignId);\n        } catch (error) {\n            throw error;\n        }\n    }\n    async getLeadgenTemplate() {\n        const cacheKey = \"leadgen_template\";\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            const template = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getLeadgenTemplate();\n            this.setCachedData(cacheKey, template);\n            return template;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async submitLead(leadData) {\n        try {\n            const lead = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.submitLead(leadData);\n            this.state.leads.push(lead);\n            this.clearCache(\"leads\");\n            this.notifyListeners();\n            return lead;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async importLeads(csvData, options) {\n        try {\n            this.setLoading(\"leads\", true);\n            this.setError(\"leads\", null);\n            const result = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.importLeads(csvData, options);\n            // Refresh leads data after import\n            await this.getLeads();\n            return result;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to import leads\";\n            this.setError(\"leads\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"leads\", false);\n        }\n    }\n    // USER MANAGEMENT (Admin only)\n    async getUsers(params) {\n        const cacheKey = \"users:\".concat(JSON.stringify(params || {}));\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n        try {\n            this.setLoading(\"users\", true);\n            this.setError(\"users\", null);\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getUsers(params);\n            const users = response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.users = users;\n            this.setCachedData(cacheKey, users);\n            this.notifyListeners();\n            return users;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch users\";\n            this.setError(\"users\", errorMessage);\n            throw error;\n        } finally{\n            this.setLoading(\"users\", false);\n        }\n    }\n    async createUser(userData) {\n        try {\n            const user = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.createUser(userData);\n            this.state.users.push(user);\n            this.clearCache(\"users\");\n            this.notifyListeners();\n            return user;\n        } catch (error) {\n            throw error;\n        }\n    }\n    async updateUser(id, userData) {\n        try {\n            const user = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.updateUser(id, userData);\n            const index = this.state.users.findIndex((u)=>u.id === id);\n            if (index !== -1) {\n                this.state.users[index] = user;\n            }\n            this.clearCache(\"users\");\n            this.notifyListeners();\n            return user;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // NOTIFICATIONS MANAGEMENT\n    async getNotifications(params) {\n        const cacheKey = \"notifications_\".concat(JSON.stringify(params || {}));\n        const cachedData = this.getCachedData(cacheKey);\n        if (cachedData) {\n            return cachedData;\n        }\n        this.setLoading(\"notifications\", true);\n        this.clearError(\"notifications\");\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getNotifications(params);\n            const notifications = response.notifications || response.data || response[\"hydra:member\"] || response.member || [];\n            this.state.notifications = notifications;\n            this.setCachedData(cacheKey, notifications);\n            this.notifyListeners();\n            return notifications;\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : \"Failed to fetch notifications\";\n            console.warn(\"API Error fetching notifications:\", errorMessage);\n            // Set empty notifications array on error\n            this.state.notifications = [];\n            this.setCachedData(cacheKey, []);\n            this.notifyListeners();\n            // Throw error to be handled by the component\n            throw error;\n        } finally{\n            this.setLoading(\"notifications\", false);\n        }\n    }\n    async getNotification(id) {\n        try {\n            return await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getNotification(id);\n        } catch (error) {\n            throw error;\n        }\n    }\n    async markNotificationAsRead(id) {\n        try {\n            await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.markNotificationAsRead(id);\n            // Update local state\n            const index = this.state.notifications.findIndex((n)=>n.id === id);\n            if (index !== -1) {\n                this.state.notifications[index].isRead = true;\n                this.state.notifications[index].readAt = new Date().toISOString();\n                this.notifyListeners();\n            }\n            this.clearCache(\"notifications\");\n        } catch (error) {\n            throw error;\n        }\n    }\n    async markNotificationAsUnread(id) {\n        try {\n            await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.markNotificationAsUnread(id);\n            // Update local state\n            const index = this.state.notifications.findIndex((n)=>n.id === id);\n            if (index !== -1) {\n                this.state.notifications[index].isRead = false;\n                this.state.notifications[index].readAt = undefined;\n                this.notifyListeners();\n            }\n            this.clearCache(\"notifications\");\n        } catch (error) {\n            throw error;\n        }\n    }\n    async markAllNotificationsAsRead() {\n        try {\n            await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.markAllNotificationsAsRead();\n            // Update local state\n            this.state.notifications.forEach((notification)=>{\n                notification.isRead = true;\n                notification.readAt = new Date().toISOString();\n            });\n            this.notifyListeners();\n            this.clearCache(\"notifications\");\n        } catch (error) {\n            throw error;\n        }\n    }\n    async deleteNotification(id) {\n        try {\n            await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.deleteNotification(id);\n            // Update local state\n            this.state.notifications = this.state.notifications.filter((n)=>n.id !== id);\n            this.notifyListeners();\n            this.clearCache(\"notifications\");\n        } catch (error) {\n            throw error;\n        }\n    }\n    async getNotificationCount() {\n        try {\n            return await _api__WEBPACK_IMPORTED_MODULE_0__.apiService.getNotificationCount();\n        } catch (error) {\n            throw error;\n        }\n    }\n    // Get loading state for specific data type\n    getLoadingState(dataType) {\n        return this.state.isLoading[dataType] || false;\n    }\n    // Get error state for specific data type\n    getErrorState(dataType) {\n        return this.state.error[dataType] || null;\n    }\n    // Clear error for specific data type\n    clearError(dataType) {\n        this.setError(dataType, null);\n    }\n    // Refresh all data\n    async refreshAllData() {\n        this.clearAllCache();\n        await Promise.all([\n            this.getClients(),\n            this.getCampaigns(),\n            this.getPackages(),\n            this.getPages(),\n            this.getMediaAssets(),\n            this.getFaqs(),\n            this.getCaseStudies(),\n            this.getLeads(),\n            this.getUsers(),\n            this.getNotifications()\n        ]);\n    }\n    constructor(){\n        this.state = {\n            clients: [],\n            campaigns: [],\n            packages: [],\n            pages: [],\n            mediaAssets: [],\n            faqs: [],\n            caseStudies: [],\n            leads: [],\n            users: [],\n            notifications: [],\n            isLoading: {},\n            error: {}\n        };\n        this.listeners = [];\n        this.cache = new Map();\n        this.CACHE_DURATION = 5 * 60 * 1000 // 5 minutes\n        ;\n    }\n}\n// Export singleton instance\nconst dataService = new DataService();\n/* harmony default export */ __webpack_exports__[\"default\"] = (dataService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/dataService.ts\n"));

/***/ })

});