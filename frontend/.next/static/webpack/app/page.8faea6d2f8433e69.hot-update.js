"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiService: function() { return /* binding */ ApiService; },\n/* harmony export */   apiService: function() { return /* binding */ apiService; }\n/* harmony export */ });\n// API service for connecting to Symfony backend\nconst API_BASE_URL = \"http://localhost:8000\" || 0;\n// API service class\nclass ApiService {\n    // Set authentication token\n    setAuthToken(token) {\n        this.authToken = token;\n        if (true) {\n            localStorage.setItem(\"auth_token\", token);\n        }\n    }\n    // Clear authentication token\n    clearAuthToken() {\n        this.authToken = null;\n        if (true) {\n            localStorage.removeItem(\"auth_token\");\n        }\n    }\n    // Get current auth token\n    getAuthToken() {\n        return this.authToken;\n    }\n    // Generic fetch method with error handling\n    async fetchApi(endpoint, options) {\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            ...(options === null || options === void 0 ? void 0 : options.headers) || {}\n        };\n        // Add auth token if available\n        if (this.authToken) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.authToken);\n        }\n        const response = await fetch(url, {\n            headers,\n            credentials: \"include\",\n            ...options\n        });\n        if (!response.ok) {\n            if (response.status === 401) {\n                // Unauthorized - clear token and redirect to login\n                this.clearAuthToken();\n                throw new Error(\"Authentication required\");\n            }\n            const errorData = await response.json().catch(()=>({}));\n            throw new Error(errorData.error || errorData.message || errorData.detail || \"HTTP error! status: \".concat(response.status));\n        }\n        return response.json();\n    }\n    // Authentication\n    async login(email, password) {\n        const response = await this.fetchApi(\"/api/v1/auth/login\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                email,\n                password\n            })\n        });\n        if (response.token) {\n            this.setAuthToken(response.token);\n        }\n        return response;\n    }\n    async logout() {\n        try {\n            const response = await this.fetchApi(\"/api/v1/auth/logout\", {\n                method: \"POST\"\n            });\n            this.clearAuthToken();\n            return response;\n        } catch (error) {\n            // Even if logout fails, clear local token\n            this.clearAuthToken();\n            return {\n                message: \"Logged out successfully\"\n            };\n        }\n    }\n    async refreshToken(token) {\n        return this.fetchApi(\"/api/v1/auth/refresh\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                token\n            })\n        });\n    }\n    async getCurrentUser() {\n        return this.fetchApi(\"/api/v1/me\");\n    }\n    // Lead Management\n    async submitLead(leadData) {\n        return this.fetchApi(\"/api/v1/leads\", {\n            method: \"POST\",\n            body: JSON.stringify(leadData)\n        });\n    }\n    async getLeads(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/leads?\".concat(queryString) : \"/api/leads\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/leads\");\n    }\n    async importLeads(csvData, options) {\n        return this.fetchApi(\"/api/v1/leads/import\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                csv_data: csvData,\n                client_id: options === null || options === void 0 ? void 0 : options.clientId,\n                source_id: options === null || options === void 0 ? void 0 : options.sourceId,\n                overwrite_existing: (options === null || options === void 0 ? void 0 : options.overwriteExisting) || false\n            })\n        });\n    }\n    async getLead(id) {\n        return this.fetchApi(\"/api/v1/leads/\".concat(id));\n    }\n    // Case Studies\n    async getCaseStudies() {\n        return this.fetchApi(\"/api/case_studies\");\n    }\n    async getCaseStudy(id) {\n        return this.fetchApi(\"/api/case_studies/\".concat(id));\n    }\n    // FAQs\n    async getFaqs(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/v1/faqs?\".concat(queryString) : \"/api/v1/faqs\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/v1/faqs\");\n    }\n    async getFaq(id) {\n        return this.fetchApi(\"/api/v1/faqs/\".concat(id));\n    }\n    // Pages\n    async getPages(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/v1/pages?\".concat(queryString) : \"/api/v1/pages\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/v1/pages\");\n    }\n    async getPage(slug) {\n        var _response_data, _response_hydramember, _response_member;\n        const response = await this.fetchApi(\"/api/v1/pages?slug=\".concat(slug));\n        const page = ((_response_data = response.data) === null || _response_data === void 0 ? void 0 : _response_data[0]) || ((_response_hydramember = response[\"hydra:member\"]) === null || _response_hydramember === void 0 ? void 0 : _response_hydramember[0]) || ((_response_member = response.member) === null || _response_member === void 0 ? void 0 : _response_member[0]);\n        if (!page) {\n            throw new Error(\"Page with slug '\".concat(slug, \"' not found\"));\n        }\n        return page;\n    }\n    async getPageById(id) {\n        return this.fetchApi(\"/api/v1/pages/\".concat(id));\n    }\n    // Media Assets\n    async getMediaAssets(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/v1/media-assets?\".concat(queryString) : \"/api/v1/media-assets\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/v1/media-assets\");\n    }\n    async getMediaAsset(id) {\n        return this.fetchApi(\"/api/v1/media-assets/\".concat(id));\n    }\n    // Packages\n    async getPackages(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/v1/packages?\".concat(queryString) : \"/api/v1/packages\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/v1/packages\");\n    }\n    async getPackage(id) {\n        return this.fetchApi(\"/api/v1/packages/\".concat(id));\n    }\n    // Campaigns\n    async getCampaigns(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/campaigns?\".concat(queryString) : \"/api/campaigns\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/campaigns\");\n    }\n    async createCampaign(campaignData) {\n        return this.fetchApi(\"/api/v1/campaigns\", {\n            method: \"POST\",\n            body: JSON.stringify(campaignData)\n        });\n    }\n    async updateCampaign(id, campaignData) {\n        return this.fetchApi(\"/api/v1/campaigns/\".concat(id), {\n            method: \"PATCH\",\n            body: JSON.stringify(campaignData)\n        });\n    }\n    // Users (Admin only)\n    async getUsers(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/v1/users?\".concat(queryString) : \"/api/v1/users\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/v1/users\");\n    }\n    async createUser(userData) {\n        return this.fetchApi(\"/api/v1/users\", {\n            method: \"POST\",\n            body: JSON.stringify(userData)\n        });\n    }\n    async updateUser(id, userData) {\n        return this.fetchApi(\"/api/v1/users/\".concat(id), {\n            method: \"PATCH\",\n            body: JSON.stringify(userData)\n        });\n    }\n    // Clients\n    async getClients(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/v1/clients?\".concat(queryString) : \"/api/v1/clients\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/v1/clients\");\n    }\n    async getClient(id) {\n        return this.fetchApi(\"/api/v1/clients/\".concat(id));\n    }\n    async createClient(clientData) {\n        return this.fetchApi(\"/api/v1/clients\", {\n            method: \"POST\",\n            body: JSON.stringify(clientData)\n        });\n    }\n    async updateClient(id, clientData) {\n        return this.fetchApi(\"/api/v1/clients/\".concat(id), {\n            method: \"PATCH\",\n            body: JSON.stringify(clientData)\n        });\n    }\n    // Get API entry point to discover available endpoints\n    async getApiInfo() {\n        return this.fetchApi(\"/api\");\n    }\n    // Google Business Profile KPI methods\n    async getGbpKpi(clientId) {\n        return this.fetchApi(\"/api/v1/gbp/kpi/\".concat(clientId));\n    }\n    async connectGbp(clientId, profileId) {\n        return this.fetchApi(\"/api/v1/gbp/connect/\".concat(clientId), {\n            method: \"POST\",\n            body: JSON.stringify({\n                profileId\n            })\n        });\n    }\n    async initiateGbpAuth(clientId) {\n        // Redirect to OAuth flow - this will be handled by the backend\n        window.location.href = \"\".concat(this.baseUrl, \"/api/v1/gbp/auth/\").concat(clientId);\n    }\n    // Health check\n    async healthCheck() {\n        try {\n            await this.fetchApi(\"/api\");\n            return {\n                status: \"healthy\"\n            };\n        } catch (error) {\n            return {\n                status: \"unhealthy\"\n            };\n        }\n    }\n    // Audit Intake methods\n    async createAuditIntake(auditData) {\n        const response = await this.fetchApi(\"/api/v1/audits/intakes\", {\n            method: \"POST\",\n            body: JSON.stringify(auditData)\n        });\n        return response;\n    }\n    async getAuditIntake(id) {\n        const response = await this.fetchApi(\"/api/v1/audits/intakes/\".concat(id));\n        return response;\n    }\n    async updateAuditIntake(id, auditData) {\n        const response = await this.fetchApi(\"/api/v1/audits/intakes/\".concat(id), {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/merge-patch+json\"\n            },\n            body: JSON.stringify(auditData)\n        });\n        return response;\n    }\n    async submitAuditWizard(submission) {\n        // First, try to register the user using the client registration endpoint\n        const userResponse = await this.fetchApi(\"/api/v1/clients/register\", {\n            method: \"POST\",\n            body: JSON.stringify({\n                organization_name: submission.audit.companyName,\n                organization_domain: submission.audit.website,\n                client_name: submission.audit.companyName,\n                client_website: submission.audit.website,\n                admin_email: submission.account.email,\n                admin_password: submission.account.password,\n                admin_first_name: submission.account.firstName,\n                admin_last_name: submission.account.lastName\n            })\n        });\n        // Then create the audit intake\n        const auditIntakeData = {\n            contactName: \"\".concat(submission.account.firstName, \" \").concat(submission.account.lastName),\n            contactEmail: submission.account.email,\n            websiteUrl: submission.audit.website,\n            cms: \"custom\",\n            techStack: {\n                industry: submission.audit.industry,\n                goals: submission.audit.goals,\n                competitors: submission.audit.competitors,\n                budget: submission.audit.monthlyBudget,\n                tier: submission.audit.tier,\n                notes: submission.audit.notes,\n                companyName: submission.audit.companyName\n            },\n            hasGoogleAnalytics: false,\n            hasSearchConsole: false,\n            hasGoogleBusinessProfile: false,\n            hasTagManager: false\n        };\n        const auditIntake = await this.createAuditIntake(auditIntakeData);\n        return {\n            auditIntake,\n            user: userResponse.user,\n            token: userResponse.token\n        };\n    }\n    // Audit Run methods\n    async getAuditRuns(params) {\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"/api/v1/audits/runs?\".concat(queryString) : \"/api/v1/audits/runs\";\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(\"/api/v1/audits/runs\");\n    }\n    async getAuditRun(id) {\n        return this.fetchApi(\"/api/v1/audits/runs/\".concat(id));\n    }\n    async startAuditRun(auditData) {\n        return this.fetchApi(\"/api/v1/audits/runs\", {\n            method: \"POST\",\n            body: JSON.stringify(auditData)\n        });\n    }\n    async getAuditIssues(auditRunId, params) {\n        const baseEndpoint = \"/api/v1/audits/runs/\".concat(auditRunId, \"/issues\");\n        if (params) {\n            const stringParams = Object.fromEntries(Object.entries(params).map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    String(value)\n                ];\n            }));\n            const queryString = new URLSearchParams(stringParams).toString();\n            const endpoint = queryString ? \"\".concat(baseEndpoint, \"?\").concat(queryString) : baseEndpoint;\n            return this.fetchApi(endpoint);\n        }\n        return this.fetchApi(baseEndpoint);\n    }\n    async updateAuditIssue(issueId, updates) {\n        return this.fetchApi(\"/api/v1/audits/issues/\".concat(issueId), {\n            method: \"PATCH\",\n            body: JSON.stringify(updates)\n        });\n    }\n    async getAuditQuickWins(auditRunId) {\n        return this.fetchApi(\"/api/v1/audits/runs/\".concat(auditRunId, \"/quick-wins\"));\n    }\n    async getAuditMetrics(auditRunId) {\n        return this.fetchApi(\"/api/v1/audits/runs/\".concat(auditRunId, \"/metrics\"));\n    }\n    async exportAuditReport(auditRunId) {\n        let format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"pdf\";\n        const response = await fetch(\"\".concat(this.baseUrl, \"/api/v1/audits/runs/\").concat(auditRunId, \"/export?format=\").concat(format), {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(this.authToken)\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to export audit report: \".concat(response.status));\n        }\n        return response.blob();\n    }\n    // Check if user is authenticated\n    isAuthenticated() {\n        return !!this.authToken;\n    }\n    // Get user role from token (basic implementation)\n    getUserRole() {\n        if (!this.authToken) return null;\n        try {\n            var _payload_roles;\n            // Basic JWT payload extraction (for client-side use only)\n            const payload = JSON.parse(atob(this.authToken.split(\".\")[1]));\n            return ((_payload_roles = payload.roles) === null || _payload_roles === void 0 ? void 0 : _payload_roles[0]) || null;\n        } catch (error) {\n            return null;\n        }\n    }\n    constructor(baseUrl = API_BASE_URL){\n        this.authToken = null;\n        this.baseUrl = baseUrl;\n        // Load token from localStorage if available\n        this.authToken =  true ? localStorage.getItem(\"auth_token\") : 0;\n    }\n}\n// Export singleton instance\nconst apiService = new ApiService();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api.ts\n"));

/***/ })

});